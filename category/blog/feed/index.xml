<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>blog &#8211; howdy</title>
	<atom:link href="https://jameswsullivan.github.io/category/blog/feed/" rel="self" type="application/rss+xml" />
	<link>https://jameswsullivan.github.io/</link>
	<description></description>
	<lastBuildDate>Sun, 07 May 2023 20:34:32 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.2</generator>
	<item>
		<title>Docker Containerization of Koha ILS Software</title>
		<link>https://jameswsullivan.github.io/docker-containerization-of-koha-ils-software/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Sun, 07 May 2023 20:30:25 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[notes]]></category>
		<category><![CDATA[Apache]]></category>
		<category><![CDATA[Containerization]]></category>
		<category><![CDATA[Docker]]></category>
		<category><![CDATA[Dockerizing]]></category>
		<category><![CDATA[Hosting]]></category>
		<category><![CDATA[KOHA]]></category>
		<category><![CDATA[KOHA ILS]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[Self-Hosting]]></category>
		<category><![CDATA[Ubuntu]]></category>
		<category><![CDATA[Web Hosting]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2389</guid>

					<description><![CDATA[Docker Containerization of the Koha ILS Software using the latest Ubuntu 22.04 LTS image.]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading">Background:</h2>



<p>The majority of instructions I found so far have been installing Koha instances on VMs or standalone servers, <a rel="noreferrer noopener" href="https://bywatersolutions.com/education/koha-testing-docker" target="_blank">ByWater Solution&#8217;s solution</a> (<a rel="noreferrer noopener" href="https://gitlab.com/koha-community/koha-testing-docker" target="_blank">gitlab repo</a>) seem to be the only one out there that&#8217;s a decent attempt. I have been setting things up in my home lab recently and this was one of the test projects.</p>



<h2 class="wp-block-heading">Environment:</h2>



<ul>
<li>My homelab uses a <code>.local</code> domain. The Koha DNS entries look like this: <code>koha-opac.example.local</code> and <code>koha-staff.example.local</code> .</li>



<li>My containers have IP addresses statically assigned.</li>



<li>An <code>ipvlan</code> Docker network named the same as my homelab&#8217;s domain. ( <code>example.local</code> )</li>



<li>DNS resolution is done on both my core router (Cisco 2951) and on the two Domain Controllers.</li>
</ul>



<h2 class="wp-block-heading">Containerization</h2>



<p>This project is documented on <a rel="noreferrer noopener" href="https://github.com/jameswsullivan/KohaContainerization" target="_blank">my GitHub</a>. This is only the first iteration and still has some improvements that I want to make in the future, such as setting it to use a remote MySQL server instead of a local MySQL/MariaDB instance and mounting some volumes for persistent data.</p>



<h2 class="wp-block-heading">Troubleshooting</h2>



<p>Since a Ubuntu container is slightly different than a standalone Ubuntu installation, Koha&#8217;s automatic configurations won&#8217;t work straight out of the box and I needed to make some tweaks.</p>



<h4 class="wp-block-heading"><strong>Issue 1: MPM ITK Apache module warning</strong></h4>



<p>The container has to be run with the <code>--cap-add=SYS_NICE --cap-add=DAC_READ_SEARCH</code> flags added, otherwise you&#8217;ll get this error in the <code>/var/log/apache2/error.log</code> and a 500 server error. (See full <a rel="noreferrer noopener" href="https://github.com/jameswsullivan/KohaContainerization" target="_blank">docker run</a> command.)</p>



<pre class="wp-block-code"><code>&#91;mpm_itk:warn] &#91;pid 746] (itkmpm: pid=746 uid=33, gid=33) itk_post_perdir_config(): setgid(1000): Operation not permitted</code></pre>



<h4 class="wp-block-heading"><strong>Issue 2: MySQL database connection problem.</strong></h4>



<p><strong>In the Koha config file</strong>, <code>/etc/koha/sites/koha/koha-conf.xml</code>, change <code>&lt;hostname&gt;localhost&lt;/hostname&gt;</code> to <code>&lt;hostname&gt;YOUR_CONTAINERS_HOSTNAME&lt;/hostname&gt;</code>. For example, in my <code>docker run</code> command I specified the hostname to be <code>--hostname=koha-opac.YOURDOMAIN.COM</code> , then I&#8217;ll change my <code>&lt;hostname&gt;</code> element to <code>&lt;hostname&gt;koha-opac.YOURDOMAIN.COM&lt;/hostname&gt;</code> or <code>&lt;hostname&gt;<code>koha-opac</code>&lt;/hostname&gt;</code> .</p>



<p><strong>In the MySQL config file</strong>, <code>/etc/mysql/mysql.conf.d/mysqld.cnf</code>, change the <code>bind-address</code> IP from 127.0.0.1 to 0.0.0.0 .</p>



<p>You can manually change these configs or <a rel="noreferrer noopener" href="https://github.com/jameswsullivan/KohaContainerization/blob/main/docker-entrypoint.sh" target="_blank">use a script to programmatically change it</a> with Docker ENTRYPOINT.</p>



<pre class="wp-block-code"><code>sed -i 's/^bind-address.*=.*/bind-address = 0.0.0.0/' /etc/mysql/mysql.conf.d/mysqld.cnf

sed -i "s|&lt;hostname&gt;localhost&lt;/hostname&gt;|&lt;hostname&gt;${current_hostname}&lt;/hostname&gt;|" /etc/koha/sites/koha/koha-conf.xml</code></pre>



<p><strong>Issue 3: Modify the database user.</strong></p>



<p>I named my instance <strong>koha</strong>, so both of the database and the database user automatically created by Koha are named as <strong>koha_koha</strong> . By default, when running inside a container the Koha application can&#8217;t use the <code>'koha_koha'@'localhost'</code> user to connect to the database. A simple workaround is to create a user and use the wildcard as its host and grant all privileges to this user for the koha database.</p>



<pre class="wp-block-code"><code>DROP USER 'koha_koha'@'localhost';

CREATE USER 'koha_koha'@'%' IDENTIFIED WITH mysql_native_password BY 'YOUR_KOHA_USER_PASSWORD';

GRANT ALL PRIVILEGES ON koha_koha.* TO 'koha_koha'@'%' WITH GRANT OPTION;

FLUSH PRIVILEGES;

SHOW GRANTS FOR 'koha_koha'@'%';</code></pre>



<p>Pay attention to the <code>WITH mysql_native_password</code> option here, without it you&#8217;ll get the an <code>Authentication plugin 'caching_sha2_password' reported error: Authentication requires secure connection.</code> error like the one below.</p>



<pre class="wp-block-code"><code>&#91;Sat May 06 15:08:46.361945 2023] &#91;cgi:error] &#91;pid 22303] &#91;client SOME_IP:4761] AH01215: DBIx::Class::Storage::DBI::catch {…} (): DBI Connection failed: DBI connect('database=koha_koha;host=YOUR_HOSTNAME;port=3306','koha_koha',…) failed: Authentication plugin 'caching_sha2_password' reported error: Authentication requires secure connection. at /usr/share/koha/lib/Koha/Database.pm line 91. at /usr/share/koha/lib/Koha/Database.pm line 139: /usr/share/koha/intranet/cgi-bin/errors/500.pl</code></pre>



<p>Again, to do this automatically and programmatically with the <a href="https://github.com/jameswsullivan/KohaContainerization/blob/main/docker-entrypoint.sh" target="_blank" rel="noreferrer noopener">docker-entrypoint.sh</a> script, add the following:</p>



<pre class="wp-block-code"><code>mysql -e "
DROP USER 'koha_koha'@'localhost';
CREATE USER 'koha_koha'@'%' IDENTIFIED WITH mysql_native_password BY '$koha_password';
GRANT ALL PRIVILEGES ON koha_koha.* TO 'koha_koha'@'%' WITH GRANT OPTION;
FLUSH PRIVILEGES;"</code></pre>



<h4 class="wp-block-heading"><strong>Issue 4: Retrieve the auto generated Koha password.</strong></h4>



<p>By default, with a manual installation you&#8217;d use the <code>koha-passwd koha</code> command to retrieve your initial password, but since we&#8217;re automating things with <a href="https://github.com/jameswsullivan/KohaContainerization/blob/main/koha_mysql_localhost.dockerfile" target="_blank" rel="noreferrer noopener">Dockerfile</a> and the <a href="https://github.com/jameswsullivan/KohaContainerization/blob/main/docker-entrypoint.sh">docker-entrypoint.sh</a> script, it would make sense to automate this one too.</p>



<p>Since the password is stored in the<code> /etc/koha/sites/koha/koha-conf.xml</code> file in plain text, we can use a script to retrieve it and print it out to the container&#8217;s logs. (<strong>Danger, Will Robinson!</strong> &#8211; You should never do this on a production, publicly accessible container.)</p>



<pre class="wp-block-code"><code>koha_password=$(grep "&lt;pass&gt;" /etc/koha/sites/koha/koha-conf.xml | awk -F'&#91;&lt;&gt;]' '{print $3}')

echo -e "\n\nKoha Password: $koha_password"</code></pre>



<p>Note that I also used this <code>$koha_password</code> variable in the SQL statements when creating the database user.</p>



<p>The password can be viewed using the <code>docker logs YOUR_CONTAINER_NAME</code> command.</p>



<h2 class="wp-block-heading">Conclusion</h2>



<p>This project is designed to be used as a turnkey testing or dev environment to quickly spin up a Koha instance. As you might have noticed my configurations practically bear no security practices in mind, its use in production environment is strongly discouraged.</p>



<p>Keywords: Install Koha ILS on Ubuntu 22.04 LTS, Install Koha ILS on Docker</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Set up self-hosted BookStack</title>
		<link>https://jameswsullivan.github.io/set-up-self-hosted-bookstack/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Mon, 01 May 2023 00:23:40 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[notes]]></category>
		<category><![CDATA[BookStack]]></category>
		<category><![CDATA[Docker]]></category>
		<category><![CDATA[Hosting]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[Self-Hosting]]></category>
		<category><![CDATA[Ubuntu]]></category>
		<category><![CDATA[Web Hosting]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2353</guid>

					<description><![CDATA[Self-host BookStack with Docker.]]></description>
										<content:encoded><![CDATA[
<p>As I venture more and more into software development and homelab building, I found that I&#8217;m in need of a better way for my documentation because OneNote just doesn&#8217;t natively support all my needs. After a bit research I found BookStack to be a good choice. Since <a href="https://github.com/jameswsullivan/selfhosted/tree/main/BookStack">this project</a> is on GitHub as part of my <a href="https://github.com/jameswsullivan/selfhosted">self-hosted application suite</a>, this article only serves as a documentation.</p>



<h2 class="wp-block-heading">Dockerfile:</h2>



<pre class="wp-block-code"><code>FROM ubuntu

ARG APACHE_DIR=/var/www
ARG BOOKSTACK_DIR=/var/www/bookstack
ARG DEBIAN_FRONTEND=noninteractive

ENV LC_ALL en_US.UTF-8
ENV LANG en_US.UTF-8

RUN apt-get update -y &amp;&amp; \
    apt-get upgrade -y &amp;&amp; \
    apt-get install wget -y &amp;&amp; \
    apt-get install iproute2 -y &amp;&amp; \
    apt-get install nano -y &amp;&amp; \
    apt-get install tzdata -y &amp;&amp; \
    ln -fs /usr/share/zoneinfo/US/Central /etc/localtime &amp;&amp; \
    dpkg-reconfigure -f noninteractive tzdata &amp;&amp; \
    apt-get install locales -y &amp;&amp; \
    locale-gen en_US.UTF-8 &amp;&amp; \
    update-locale LANG=en_US.UTF-8 &amp;&amp; \
    apt-get install -y git unzip apache2 php8.1 curl php8.1-curl \
    php8.1-mbstring php8.1-ldap php8.1-xml php8.1-zip php8.1-gd \
    php8.1-mysql libapache2-mod-php8.1 &amp;&amp; \
    curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

WORKDIR $APACHE_DIR

RUN git clone https://github.com/BookStackApp/BookStack.git --branch release --single-branch &amp;&amp; \       
    mv BookStack/ bookstack/ &amp;&amp; \
    chown -R www-data:www-data $BOOKSTACK_DIR

WORKDIR $BOOKSTACK_DIR

COPY ./config.sh ./config.sh

RUN composer install --no-dev &amp;&amp; \
    mv $BOOKSTACK_DIR/public/.htaccess $BOOKSTACK_DIR/public/.htaccess.bk &amp;&amp; \
    mv /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/000-default.conf.bk &amp;&amp; \
    mv /etc/apache2/sites-available/default-ssl.conf /etc/apache2/sites-available/default-ssl.conf.bk &amp;&amp; \
    chmod +x config.sh

ENTRYPOINT &#91;"/var/www/bookstack/config.sh"]</code></pre>



<h2 class="wp-block-heading">Post-setup configuration script:</h2>



<pre class="wp-block-code"><code>#!/bin/bash
BOOKSTACK_DIR="/var/www/bookstack"

service apache2 start
a2ensite bookstack.conf
a2enmod rewrite
a2enmod headers

cd "$BOOKSTACK_DIR"

php artisan key:generate --no-interaction --force
php artisan migrate --no-interaction --force

service apache2 restart

exec "$@"
tail -f /var/log/apache2/access.log</code></pre>



<h2 class="wp-block-heading">BookStack Virtual Host file:</h2>



<pre class="wp-block-code"><code>&lt;VirtualHost *:80&gt;

        ServerName bookstack.example.com
        DocumentRoot /var/www/bookstack/public/

        &lt;Directory /var/www/bookstack/public/&gt;
                Options Indexes FollowSymLinks
                AllowOverride None
                Require all granted
                &lt;IfModule mod_rewrite.c&gt;
                        &lt;IfModule mod_negotiation.c&gt;
                                Options -MultiViews -Indexes
                        &lt;/IfModule&gt;

                        RewriteEngine On

                        # Handle Authorization Header
                        RewriteCond %{HTTP:Authorization} .
                        RewriteRule .* - &#91;E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]

                        # Redirect Trailing Slashes If Not A Folder...
                        RewriteCond %{REQUEST_FILENAME} !-d
                        RewriteCond %{REQUEST_URI} (.+)/$
                        RewriteRule ^ %1 &#91;L,R=301]

                        # Handle Front Controller...
                        RewriteCond %{REQUEST_FILENAME} !-d
                        RewriteCond %{REQUEST_FILENAME} !-f
                        RewriteRule ^ index.php &#91;L]
                &lt;/IfModule&gt;
        &lt;/Directory&gt;

        ErrorLog ${APACHE_LOG_DIR}/error.log
        CustomLog ${APACHE_LOG_DIR}/access.log combined

&lt;/VirtualHost&gt;</code></pre>



<p>BookStack .env file:</p>



<pre class="wp-block-code"><code>APP_KEY=SomeRandomString

APP_URL=http://example.com/

# Database details
DB_HOST=YOUR_DB_URL
DB_DATABASE=YOUR_DB_NAME
DB_USERNAME=YOUR_DB_USER
DB_PASSWORD=YOUR_DB_PASS

# Mail system to use
# Can be 'smtp' or 'sendmail'
MAIL_DRIVER=smtp

# Mail sender details
MAIL_FROM_NAME="BookStack"
MAIL_FROM=bookstack@example.com

# SMTP mail options
# These settings can be checked using the "Send a Test Email"
# feature found in the "Settings &gt; Maintenance" area of the system.
MAIL_HOST=localhost
MAIL_PORT=1025
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null</code></pre>



<h2 class="wp-block-heading"><em>docker image build</em> and <em>docker run</em> commands:</h2>



<pre class="wp-block-code"><code># Linux build:
docker image build --file bookstack.dockerfile --tag bookstack:1.0 --progress plain --no-cache . 2&gt;&amp;1 | tee bookstack_build.log

# Windows build using PowerShell
docker image build --file bookstack.dockerfile --tag bookstack:1.0 --progress plain --no-cache . 2&gt;&amp;1 | Tee-Object bookstack_build.log

# Start a container:
docker run -dit \
    --name MY_BOOKSTACK_CONTAINER_NAME \
    --ip IP_ADDRESS --network DOCKER_NETWORK \
    --hostname=MY_HOSTNAME \
    --restart=unless-stopped \
    --mount type=bind,source=SOURCE_DIRECTORY/.env,target=/var/www/bookstack/.env \
    --mount type=bind,source=SOURCE_DIRECTORY/bookstack.conf,target=/etc/apache2/sites-available/bookstack.conf \
    -v SOURCE_DIRECTORY:/var/www/bookstack/public/uploads \
    -v SOURCE_DIRECTORY:/var/www/bookstack/storage/uploads \
    bookstack:1.0</code></pre>



<h2 class="wp-block-heading">Default login:</h2>



<pre class="wp-block-code"><code>Default login email: admin@admin.com
Default login password: password</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Silence the Cisco CISCO2951/K9 Router</title>
		<link>https://jameswsullivan.github.io/silence-the-cisco-cisco2951-k9-router/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Mon, 01 May 2023 00:01:19 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Cisco 2951]]></category>
		<category><![CDATA[Engineering]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2351</guid>

					<description><![CDATA[Silencing the Cisco 2951 router by replacing its stock high speed fans with Noctua quiet fans and adding active CPU cooler.]]></description>
										<content:encoded><![CDATA[
<p>Recently I came to the need for a quieter environment for audiovisual production and my Cisco 2951 router is producing noticeable background noise in my recordings, so I decided to do some surgery on it and make it quieter. <a href="https://www.mattmillman.com/silencing-a-cisco-2951-for-where-ever-silence-may-be-required/" target="_blank" rel="noreferrer noopener">This article</a> gave me a lot of insights and I highly recommend using it as a reference, my method is slightly modified and improved to fit my needs.</p>



<h2 class="wp-block-heading">Overview:</h2>



<h3 class="wp-block-heading">The project has two parts:</h3>



<ol>
<li>Swapping the four stock high speed fans with quiet fans from Noctua.</li>



<li>Since the quiet fans have significantly less power, we&#8217;ll need to change the CPU&#8217;s passive cooling to active cooling.</li>
</ol>



<h2 class="wp-block-heading">Parts involved:</h2>



<h3 class="wp-block-heading">Original Parts:</h3>



<ol>
<li>4 x SUNON PSD1206PMB1-A, 4-pin PWM, DC12V &#8211; 9.8W. Dimension: 60mm x 60mm x 38mm. (<a href="https://github.com/jameswsullivan/blog-file-share/blob/main/Sunon_PSD1206PMBX-A(2)_DataSheet.pdf" target="_blank" rel="noreferrer noopener">datasheet</a>)</li>



<li>60mm x 60mm passive CPU heatsink.</li>
</ol>



<h3 class="wp-block-heading">Replacement Parts:</h3>



<ol>
<li>4 x <a rel="noreferrer noopener" href="https://www.amazon.com/Noctua-NF-A6x25-PWM-Premium-Quiet/dp/B00VXTANZ4" target="_blank">Noctua NF-A6x25 PWM</a>, 4-pin, 12V &#8211; 0.96W. Dimension: 60mm x 60mm x 25mm. (<a href="https://github.com/jameswsullivan/blog-file-share/blob/main/Noctua-A6x25_DataSheet.pdf" target="_blank" rel="noreferrer noopener">datasheet</a>)</li>



<li><a rel="noreferrer noopener" href="https://www.amazon.com/dp/B07PMDX99G" target="_blank">Intel PGA988/989 CPU active cooler</a>.</li>
</ol>



<h2 class="wp-block-heading">Important Info:</h2>



<p><strong>SUNON PSD1206PMB1-A Pinout:<br></strong>RED &#8212; +12V<br>BLACK &#8212; GND<br>YELLOW &#8212; TACH<br>BLUE &#8212; PWM<br><br><strong>Noctua NF-A6x25 Pinout:<br></strong>BLACK &#8212; GND<br>YELLOW &#8212; +12V<br>GREEN &#8212; TACH<br>BLUE &#8212; PWM<br><br><strong>Intel PGA988/989 CPU active cooler 3-wire fan pinout:<br></strong>BLACK &#8212; GND<br>RED &#8212; 12V<br>YELLOW &#8212; TACH</p>



<p>In terms of the steps, I think if you&#8217;re already thinking about doing this type of mod, you must be already savvy with electronics and handy with tools, so I feel like illustrating the steps might be redundant and will only note a few important things.</p>



<ul>
<li>The active CPU cooler will have to be disassembled and have the mounting screws removed and replaced with the mounting clips from the original passive heatsink, and you&#8217;ll need a 3mm drill bit to enlarge the mounting holes on the heatsink of the active cooler for the original mounting clips to fit. The copper heatsink is very soft so you should be able to hand drill it with very little efforts.</li>



<li>The mounting bracket that comes with the active CPU cooler won&#8217;t fit on the 2951&#8217;s motherboard, and the soft padding on the mating surface of the active cooler heatsink will have to be removed as well. I used acetone to give it a good cleaning.</li>



<li>In terms of wiring and routing of the wires, it&#8217;s completely arbitrary as long as the correct pinout is followed. And in this case since we&#8217;re replacing the stock fans with quiet fans with much less power and RPM and tapping an active CPU cooler into one of the four fans, the PWM/TACH signals won&#8217;t make a difference anymore, we can ignore them and only connect the 12V and GND and let them run at full power.</li>



<li>After the mod&#8217;s been finished, use <code>show env</code> to monitor the temperatures. Mine stays around 49 degrees Celsius for the CPU and 67 degrees for the power supply, which is pretty much identical to the temperatures before the mod.</li>
</ul>



<h2 class="wp-block-heading">After thought:</h2>



<ul>
<li>If your room is well air conditioned and your server rack/cabinet well ventilated, you probably won&#8217;t need the active CPU cooler. Although the four Noctua fans are significantly weaker than the original ones, if your router is not under heavy load and your rack/cabinet has enough air flow, the four fans are probably enough to keep the router cool. My room is not always air conditioned and has other equipment producing heat and I see the CPU temperature slowly creep up to around 75 degrees Celsius, which was why I added the active cooler.</li>



<li>If you have or have access to better tools &#8211; such as a laser cutter, you can probably create more ventilation by slotting the upper panel around the heatsink areas without adding an active cooler. I thought about doing it this way but my access to a proper cutter is limited so I changed course. Nevertheless, it&#8217;s cooling after all, as long as the temperature is under control there are plenty of room for innovation.</li>
</ul>



<h2 class="wp-block-heading">Pictures:</h2>



<figure class="wp-block-gallery has-nested-images columns-default is-cropped wp-block-gallery-1 is-layout-flex">
<figure class="wp-block-image size-large is-style-default"><a href="https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD01-scaled.jpg"><img decoding="async" width="1024" height="306" data-id="2370"  src="https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD01-1024x306.jpg" alt="" class="wp-image-2370" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD01-1024x306.jpg 1024w, https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD01-300x90.jpg 300w, https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD01-768x229.jpg 768w, https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD01-1536x459.jpg 1536w, https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD01-2048x612.jpg 2048w, https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD01-700x209.jpg 700w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></figure>



<figure class="wp-block-image size-large"><a href="https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD02-scaled.jpg"><img decoding="async" width="1024" height="576" data-id="2371"  src="https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD02-1024x576.jpg" alt="" class="wp-image-2371" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD02-1024x576.jpg 1024w, https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD02-300x169.jpg 300w, https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD02-768x432.jpg 768w, https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD02-1536x864.jpg 1536w, https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD02-2048x1152.jpg 2048w, https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD02-700x394.jpg 700w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></figure>



<figure class="wp-block-image size-large"><a href="https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD03-scaled.jpg"><img decoding="async" width="1024" height="576" data-id="2375"  src="https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD03-1024x576.jpg" alt="" class="wp-image-2375" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD03-1024x576.jpg 1024w, https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD03-300x169.jpg 300w, https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD03-768x432.jpg 768w, https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD03-1536x864.jpg 1536w, https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD03-2048x1152.jpg 2048w, https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD03-700x394.jpg 700w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></figure>



<figure class="wp-block-image size-large"><a href="https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD04-scaled.jpg"><img decoding="async" width="1024" height="576" data-id="2373"  src="https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD04-1024x576.jpg" alt="" class="wp-image-2373" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD04-1024x576.jpg 1024w, https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD04-300x169.jpg 300w, https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD04-768x432.jpg 768w, https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD04-1536x864.jpg 1536w, https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD04-2048x1152.jpg 2048w, https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD04-700x394.jpg 700w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></figure>



<figure class="wp-block-image size-large"><a href="https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD05-scaled.jpg"><img decoding="async" width="1024" height="576" data-id="2372"  src="https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD05-1024x576.jpg" alt="" class="wp-image-2372" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD05-1024x576.jpg 1024w, https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD05-300x169.jpg 300w, https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD05-768x432.jpg 768w, https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD05-1536x864.jpg 1536w, https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD05-2048x1152.jpg 2048w, https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD05-700x394.jpg 700w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></figure>



<figure class="wp-block-image size-large"><a href="https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD06-scaled.jpg"><img decoding="async" width="1024" height="576" data-id="2374"  src="https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD06-1024x576.jpg" alt="" class="wp-image-2374" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD06-1024x576.jpg 1024w, https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD06-300x169.jpg 300w, https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD06-768x432.jpg 768w, https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD06-1536x864.jpg 1536w, https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD06-2048x1152.jpg 2048w, https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD06-700x394.jpg 700w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></figure>



<figure class="wp-block-image size-large"><a href="https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD07-scaled.jpg"><img decoding="async" width="1024" height="576" data-id="2376"  src="https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD07-1024x576.jpg" alt="" class="wp-image-2376" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD07-1024x576.jpg 1024w, https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD07-300x169.jpg 300w, https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD07-768x432.jpg 768w, https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD07-1536x864.jpg 1536w, https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD07-2048x1152.jpg 2048w, https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD07-700x394.jpg 700w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></figure>



<figure class="wp-block-image size-large"><a href="https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD08-scaled.jpg"><img decoding="async" width="1024" height="576" data-id="2377"  src="https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD08-1024x576.jpg" alt="" class="wp-image-2377" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD08-1024x576.jpg 1024w, https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD08-300x169.jpg 300w, https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD08-768x432.jpg 768w, https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD08-1536x864.jpg 1536w, https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD08-2048x1152.jpg 2048w, https://jameswsullivan.github.io/wp-content/uploads/2023/05/CISCO2951MOD08-700x394.jpg 700w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></figure>
</figure>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Use LineageOS on Pixel 3a XL</title>
		<link>https://jameswsullivan.github.io/use-lineageos-on-pixel-3a-xl/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Sat, 22 Apr 2023 16:31:17 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[notes]]></category>
		<category><![CDATA[ADB]]></category>
		<category><![CDATA[Android]]></category>
		<category><![CDATA[bootloader]]></category>
		<category><![CDATA[Custom ROM]]></category>
		<category><![CDATA[fastboot]]></category>
		<category><![CDATA[LineageOS]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2326</guid>

					<description><![CDATA[Install LineageOS 19.1 on Pixel 3a XL.]]></description>
										<content:encoded><![CDATA[
<p>It&#8217;s been a while since I flashed a custom ROM on an Android phone a few years back. Recently I needed to get an old Pixel 3a XL to work for a project and I have to say that installing custom ROMs has become much easier than before.</p>



<h2 class="wp-block-heading">Steps</h2>



<ol>
<li>Get your computer and phone ready for ADB. <a href="https://wiki.lineageos.org/adb_fastboot_guide">https://wiki.lineageos.org/adb_fastboot_guide</a></li>



<li>Follow the steps here provided by LineageOS: <a href="https://wiki.lineageos.org/devices/crosshatch/">https://wiki.lineageos.org/devices/crosshatch/</a></li>
</ol>



<h2 class="wp-block-heading">Common Issues</h2>



<ul>
<li>If your device is not showing when running the <code>adb devices</code> command, 9 out 10 times it&#8217;s either a driver issue or <code>USB Debugging</code> not properly enabled. When installing the driver, you have to make sure that you manually install the correct &#8220;<code>Android Composite ADB Interface</code>&#8221; rather than letting Windows automatically pick the driver.<br><br>e.g. in <code>Device Manager</code>, right click on your phone, select <code>Update driver</code> &#8211;&gt; <code>Browse my computer for drivers</code> &#8211;&gt; browse to the USB driver folder you just downloaded and choose: <code>Let me pick from a list of available drivers on my computer</code>, and pick <code>Android Composite ADB Interface</code>.<br><br>Upon successful installation, your phone should appear in Device Manager as <code>Android Device - Android Composite ADB Interface</code> instead of under <code>Portable Devices</code> or <code>Universal Serial Bus controllers</code>.</li>
</ul>



<ul>
<li>Additionally, <code>fastboot flashing unlock</code> doesn&#8217;t unlock the bootloader, make sure that <code>Stay awake</code> and <code>OEM Unlocking</code> are enabled under <code>Developer options</code>.</li>
</ul>



<p>Other useful troubleshooting commands if your device is not showing under <code>adb devices</code> :</p>



<pre class="wp-block-code"><code>net stop winnat
net start winnat

adb kill-server
adb start-server</code></pre>



<h2 class="wp-block-heading">ADB Commands</h2>



<pre class="wp-block-code"><code>adb reboot bootloader
fastboot devices
fastboot flashing unlock
adb reboot bootloader
fastboot flash boot boot.img
adb sideload lineage-19.1-20230415-nightly-bonito-signed.zip
adb sideload MindTheGapps-12.1.0-arm64-20220605_112439.zip
</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Set up Docker host with Ubuntu Server and mount disks</title>
		<link>https://jameswsullivan.github.io/set-up-docker-host-with-ubuntu-server-and-mount-disks/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Tue, 11 Apr 2023 02:19:44 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Docker]]></category>
		<category><![CDATA[Hosting]]></category>
		<category><![CDATA[Self-Hosting]]></category>
		<category><![CDATA[System Administration]]></category>
		<category><![CDATA[Ubuntu]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2307</guid>

					<description><![CDATA[Install Docker on Ubuntu Server, attach disks to the Docker host VM and configure mounts.]]></description>
										<content:encoded><![CDATA[
<p>In order to run and test things I set up multiple Hyper-V VMs as Docker hosts to run my containers. This blog documents the Docker installation and disk mounting on Ubuntu Server.</p>



<p>First, if you have installed Docker or any packages along with Ubuntu Server, it&#8217;s likely installed via snap. There is nothing wrong with using snap, but most of the directory paths will be different and it makes it harder to tweak certain configs in the future, so it&#8217;s recommended to remove them before the rest of the steps.</p>



<pre class="wp-block-code"><code>sudo snap remove docker
sudo reboot 

# Reboot is needed, otherwise you'll get "bash: /snap/bin/docker: No such file or directory" error.</code></pre>



<p>Second, install Docker:</p>



<pre class="wp-block-code"><code># Install using the apt repository:
# https://docs.docker.com/engine/install/ubuntu/
apt-get update -y
apt-get upgrade -y
apt-get install ca-certificates curl gnupg lsb-release -y
mkdir -m 0755 -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg \
    | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

echo "deb &#91;arch=$(dpkg --print-architecture) \
    signed-by=/etc/apt/keyrings/docker.gpg] \
    https://download.docker.com/linux/ubuntu \
    $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

apt-get update -y
apt-get upgrade -y
apt-get install docker-ce \
        docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

# After installing docker-ce, other dependencies are usually automatically installed.

# OPTIONAL: List and verify installed packages.

apt list --installed</code></pre>



<p>Third, mount physical or virtual disks one by one to the VM so that you can identify the disks by UUID and configure the mount one at a time, especially when you have multiple disks of the same size, because the devices are usually not attached in order when booting, the only way to quickly and accurately identify the disks is by UUID. Use the following commands to format and configure the mounts.</p>



<pre class="wp-block-code"><code># List devices.
fdisk -l

# Cross reference with:
blkid
blkid | grep /dev/sd

# Use lsscsi if needed.
apt-get install lsscsi -y

# Create partition:
gdisk /dev/sda

# Enter ? for help. Enter n and accept all default parameters to use the entire disk capacity.
# Enter w to write changes to disk.

# Format disk to ext4 file system.
mkfs.ext4 /dev/sda

# Then run:
fdisk -l
blkid | grep /dev/sd
# again to grab the device name and UUID.

# Create mount locations:
mkdir /mnt/directory_name
mount /dev/sda /mnt/directory_name

# Copy the UUID and add entries in /etc/fstab to configure mounts at boot time.
nano /etc/fstab

# Add entries, e.g., mount 100GB to /mnt/my_folder:
UUID="dcd8c5ac-db76-435e-ab3c-48570190c7d8" /mnt/my_folder ext4 defaults 0 1

# Verify the mounts after a reboot.</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Self-hosted Nextcloud with Docker</title>
		<link>https://jameswsullivan.github.io/self-hosted-nextcloud-with-docker/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Tue, 11 Apr 2023 01:24:00 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Docker]]></category>
		<category><![CDATA[Hosting]]></category>
		<category><![CDATA[Nextcloud]]></category>
		<category><![CDATA[Self-Hosting]]></category>
		<category><![CDATA[Web Hosting]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2303</guid>

					<description><![CDATA[Spin up self-hosted Nextcloud with MySQL using Docker.]]></description>
										<content:encoded><![CDATA[
<p>My <a href="https://jameswsullivan.github.io/self-host-nextcloud/">previous attempt</a> to spin up a self-hosted Nextcloud was directly on a Ubuntu VM, but its virtual disks were not configured in a way that&#8217;s easily expandable as data grows. This time I&#8217;m using Docker and have addressed the issues.</p>



<h2 class="wp-block-heading">Components:</h2>



<ul>
<li>The Docker host is a dedicated Hyper-V VM running Ubuntu Server in Windows Server 2022.</li>



<li><a href="https://hub.docker.com/_/nextcloud" target="_blank" rel="noreferrer noopener">Nextcloud</a> Docker image.</li>



<li><a href="https://hub.docker.com/r/ubuntu/mysql" target="_blank" rel="noreferrer noopener">Ubuntu/MySQL</a> Docker image.</li>



<li>A storage pool consisting of 6 x 500GB 2.5&#8221; HDDs and a virtual disk in Parity mode with 2 disks set as redundant, bringing total capacity to 1.35TB. This virtual disk will be mounted to Nextcloud&#8217;s <code>/var/www/html</code> path to store persistent data.</li>



<li>An 100GB virtual disk for MySQL persistent data (<code>/var/lib/mysql</code>).</li>
</ul>



<h2 class="wp-block-heading">Nextcloud Dockerfile:</h2>



<pre class="wp-block-code"><code>FROM nextcloud

# Configure PHP parameters via environment variables.
ENV PHP_MEMORY_LIMIT=4096M
ENV PHP_UPLOAD_LIMIT=4096M

# Install packages and configure timezone.
RUN apt-get update -y &amp;&amp; \
    apt-get upgrade -y &amp;&amp; \
    apt-get install nano -y &amp;&amp; \
    apt-get install tzdata -y &amp;&amp; \
    ln -fs /usr/share/zoneinfo/US/Central /etc/localtime &amp;&amp; \
    dpkg-reconfigure -f noninteractive tzdata

EXPOSE 80 443</code></pre>



<h2 class="wp-block-heading">Containers:</h2>



<pre class="wp-block-code"><code># Build Nextcloud image
docker image build --tag nextcloud:1.0 --progress plain --no-cache . 2>&amp;1 | tee build.log

# Start Nextcloud container.
# The drive for Nextcloud's persistent data is mounted to /mnt/nextcloud_data .
docker run -dit --name MY-NEXTCLOUD-CONTAINER --ip IP-ADDRESS --network DOCKER-NETWORK --restart=unless-stopped --hostname=MY_NEXTCLOUD_CONTAINER_HOSTNAME -v /mnt/nextcloud_data:/var/www/html nextcloud:1.0

# Start a MySQL container for Nextcloud.
# The virtual disk for MySQL's persistent data is mounted to /mnt/nextcloud_db .
docker run -dit --name MY-NEXTCLOUD-DB-CONTAINER --ip IP-ADDRESS --network DOCKER-NETWORK --hostname=MY_NEXTCLOUD_DB_CONTAINER_HOSTNAME --restart=unless-stopped -v /mnt/nextcloud_db:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=MY-ROOT-PASSWORD ubuntu/mysql</code></pre>



<h2 class="wp-block-heading">Docker compose:</h2>



<p>To be added.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Invalid Time error and Unable to Change Time Zone</title>
		<link>https://jameswsullivan.github.io/invalid-time-error-and-unable-to-change-time-zone/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Sun, 26 Mar 2023 16:52:31 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[System Administration]]></category>
		<category><![CDATA[Windows Systems Administration]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2217</guid>

					<description><![CDATA[Fix the Invalid Time error and the Time Zone setting greyed out issue on Windows.]]></description>
										<content:encoded><![CDATA[
<p>If your applications are encountering an Invalid Time error, check the following settings:</p>



<pre class="wp-block-preformatted">Control Panel - Date and Time - Internet Time - Change Settings ... - Synchronize with an Internet time server - Set server to: time.nist.gov</pre>



<p>For some reason the <code>time.windows.com</code> occasionally has issues with certain programs.</p>



<p>If your <code>Time zone</code> setting is greyed out in Windows Settings, use <a href="https://learn.microsoft.com/en-us/troubleshoot/windows-client/shell-experience/cannot-set-timezone-automatically">this guide</a> to fix it:</p>



<pre class="wp-block-code"><code>1. Change the Set time zone automatically setting and set the data value of the registry entry
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\tzautoupdate\Start
as follows:

3	Enable Set time zone automatically
4	Disable Set time zone automatically

2. Change the location setting and set the value of the registry entry
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\CapabilityAccessManager\ConsentStore\location\Value
as follows:

Allow	On
Deny	Off</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Troubleshooting Apache Web Server and Name-based Virtual Hosting</title>
		<link>https://jameswsullivan.github.io/troubleshooting-apache-web-server-and-name-based-virtual-hosting/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Sat, 25 Mar 2023 23:26:42 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Apache]]></category>
		<category><![CDATA[Docker]]></category>
		<category><![CDATA[Hosting]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[Self-Hosting]]></category>
		<category><![CDATA[Ubuntu]]></category>
		<category><![CDATA[Web Hosting]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2185</guid>

					<description><![CDATA[This troubleshooting note wraps up the Name-based Virtual Hosting Series.]]></description>
										<content:encoded><![CDATA[
<p>During the process of setting up name-based virtual hosting with Apache, I ran into a few issues with the WordPress container, this post documents the steps taken to address them.</p>



<h2 class="wp-block-heading">Background:</h2>



<p>I use the locally hosted WordPress site to write documentation and blog posts and then use Simply Static to convert and get it ready for GitHub Pages. During the process I ran into the following issues:</p>



<ul>
<li>WordPress Site Health check has three critical issues:
<ul>
<li>The required module, gd, is not installed, or has been disabled.</li>



<li>The REST API encountered an error.</li>



<li>Your site could not complete a loopback request.</li>
</ul>
</li>



<li><em>Updating failed. The response is not a valid JSON response.</em> when creating and updating posts.</li>



<li>Simply Static&#8217;s failed diagnostics:
<ul>
<li>Checking if WordPress can make requests to itself from YOUR_IP  FAIL</li>



<li>Checking for cURL support  FAIL</li>
</ul>
</li>
</ul>



<h2 class="wp-block-heading">Issue 1: Updating failed. The response is not a valid JSON response.</h2>



<p>I get this error only after I&#8217;ve set the <strong>Permalinks</strong> setting to anything else other than the default <strong>Plain</strong> setting. When <strong>Permalinks</strong> is not set to <strong>Plain</strong>, the URLs need to be rewritten, and that&#8217;s when this error will occur. In my case, it turned out to be that I forgot to add the &lt;Directory> tag in the virtual host configuration file. As you can see in <a href="https://jameswsullivan.github.io/configure-apache-web-server-and-name-based-virtual-hosting-with-ubuntu/">this post</a>, my configuration file looks like this:</p>



<pre class="wp-block-code"><code>&lt;VirtualHost *:80>
    ServerAdmin webmaster@example1.mydomain
    ServerName example1.mydomain
    DocumentRoot /var/www/html/example1.mydomain
    DirectoryIndex index.php
    ErrorLog ${APACHE_LOG_DIR}/example1.mydomain_error.log
    CustomLog ${APACHE_LOG_DIR}/example1.mydomain_access.log combined
&lt;/VirtualHost></code></pre>



<p>But the correct configs for rewrite to work need to look like this:</p>



<pre class="wp-block-code"><code>&lt;VirtualHost *:80>
    ServerAdmin webmaster@example1.mydomain
    ServerName example1.mydomain
    DocumentRoot /var/www/html/example1.mydomain

        &lt;Directory /var/www/html/example1.mydomain>
                Options Indexes FollowSymLinks
                AllowOverride All
                Require all granted
                DirectoryIndex index.php
        &lt;/Directory>

    ErrorLog ${APACHE_LOG_DIR}/example1.mydomain_error.log
    CustomLog ${APACHE_LOG_DIR}/example1.mydomain_access.log combined
&lt;/VirtualHost></code></pre>



<p>Without the <strong>&lt;Directory></strong> element, the <strong>.htaccess</strong> file is unable to override the rewrite rules.</p>



<h2 class="wp-block-heading">Issue 2: WordPress Site Health Critical Issues</h2>



<p><strong>The required module, gd, is not installed, or has been disabled.</strong></p>



<pre class="wp-block-code"><code># Install the php8.1-gd module
apt-get install php8.1-gd -y</code></pre>



<p><strong>The REST API encountered an error.</strong></p>



<pre class="wp-block-code"><code>The REST API is one way that WordPress and other applications communicate with the server. For example, the block editor screen relies on the REST API to display and save your posts and pages.

When testing the REST API, an error was encountered:

REST API Endpoint: http://example1.mydomain/wp-json/wp/v2/types/post?context=edit
REST API Response: (http_request_failed) cURL error 6: Could not resolve host: example1.mydomain</code></pre>



<p><strong>Your site could not complete a loopback request.</strong></p>



<pre class="wp-block-code"><code>Loopback requests are used to run scheduled events, and are also used by the built-in editors for themes and plugins to verify code stability.

The loopback request to your site failed, this means features relying on them are not currently working as expected.
Error: cURL error 6: Could not resolve host: example1.mydomain (http_request_failed)</code></pre>



<p>Edit the <strong>/etc/hosts</strong> file:</p>



<pre class="wp-block-code"><code>nano /etc/hosts

# Add a new line: IP hostname. e.g. 192.168.0.4 website1.example.com</code></pre>



<p>Additionally, you might need to install the curl package:</p>



<pre class="wp-block-code"><code>apt-get install php8.1-curl -y

# Verify curl version:
curl --version

# Verify curl is enabled in php.ini
nano /etc/php/8.1/apache2/php.ini

# Uncomment this line:
extension=curl</code></pre>



<p>Adding this entry in <strong>/etc/hosts</strong> file also resolves Simply Static&#8217;s <em>&#8220;Checking if WordPress can make requests to itself from your_IP&#8221;</em> FAIL issue.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Configure Apache Web Server and Name-based Virtual Hosting with Ubuntu</title>
		<link>https://jameswsullivan.github.io/configure-apache-web-server-and-name-based-virtual-hosting-with-ubuntu/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Fri, 03 Feb 2023 20:19:00 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Apache]]></category>
		<category><![CDATA[Docker]]></category>
		<category><![CDATA[Hosting]]></category>
		<category><![CDATA[Self-Hosting]]></category>
		<category><![CDATA[Ubuntu]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=18</guid>

					<description><![CDATA[This is the fourth installment of the Name-based Virtual Hosting Series.]]></description>
										<content:encoded><![CDATA[
<p>This is the final installment of my dev environment setup which documents the process of setting up Apache web server and name-based virtual hosting. My setup has CIFS/Samba volume <em>my_smb_vol</em> and an ipvlan network <em>docker_dev_net</em>.</p>



<h2 class="wp-block-heading">Spin up a Ubuntu Docker container:</h2>



<pre class="wp-block-code"><code>docker run -dit --name WEB_SERVER --network docker_dev_net --ip 192.168.1.103 --mount source=my_smb_vol,destination=/SharedVolume ubuntu

# -p 443:443 -p 80:80 -p 22:22
# Port exposure is optional because the containers will be part of the same network that my other machines are in.</code></pre>



<p>Install necessary packages:</p>



<pre class="wp-block-code"><code># Install network utilities for troubleshooting:
apt-get install iputils-ping -y
apt-get install iproute2 -y
apt-get install traceroute -y

# Install SSH:
apt-get install openssh-client -y
apt-get install openssh-server -y

# Install sudo and other utilities:
apt-get install sudo -y
apt-get install nano -y

# Install apache, php, and php-mysql:
apt-get install apache2 -y
apt-get install php8.1 -y
apt-get install php-mysql -y
apt-get install libapache2-mod-php -y</code></pre>



<p>Verify services are running and start the them if not:</p>



<pre class="wp-block-code"><code># ssh and apache2 service status
service ssh status
service apache2 status

# start the services:
service ssh start
service apache2 start</code></pre>



<p>Hostname and name server (optional):</p>



<pre class="wp-block-code"><code># Depending on your setup, you might need to specify the --hostname when creating your container:

--hostname=your_hostname

# Technically after specifying --ip and --hostname , you shouldn't need to edit /etc/resolv.conf anymore. To verify:

cat /etc/resolv.conf</code></pre>



<p>Verify php version:</p>



<pre class="wp-block-code"><code># Create a info.php file under the /var/www/html directory with the following content:

&lt;?php phpinfo();?&gt;</code></pre>



<p>Now that you should be able to visit the Apache server&#8217;s default landing page and the info.php page to verify that the Apache server is running and view your php version.</p>



<h2 class="wp-block-heading">Set up name-based virtual hosting:</h2>



<pre class="wp-block-code"><code># The example websites I'm using are: example.mydomain, example1.mydomain, example2.mydomain.

# Create directories:
# example.mydomain will reside under /var/www/html as the "main" website.

mkdir /var/www/html/example1.mydomain
mkdir /var/www/html/example2.mydomain

# Change ownership of the directories. I simply changed the entire html directory and its subdirectories' ownership to www-data for my convenience.

chown -R www-data:www-data /var/www/html

# Create Virtual Host configuration files for your sites.
touch /etc/apache2/sites-available/example.mydomain.conf
touch /etc/apache2/sites-available/example1.mydomain.conf
touch /etc/apache2/sites-available/example2.mydomain.conf

# Use nano to add the corresponding content to your site config files. Edit the ServerName and DocumentRoot as needed to point to the your domains and directories:

# example.mydomain.conf or use the 000-default.conf:
&lt;VirtualHost *:80&gt;
    ServerAdmin webmaster@example.mydomain
    ServerName example.mydomain
    DocumentRoot /var/www/html
    DirectoryIndex index.html
    ErrorLog ${APACHE_LOG_DIR}/example.mydomain_error.log
    CustomLog ${APACHE_LOG_DIR}/example.mydomain_access.log combined
&lt;/VirtualHost&gt;

# example1.mydomain.conf:
&lt;VirtualHost *:80&gt;
    ServerAdmin webmaster@example1.mydomain
    ServerName example1.mydomain
    DocumentRoot /var/www/html/example1.mydomain
    DirectoryIndex index.php
    ErrorLog ${APACHE_LOG_DIR}/example1.mydomain_error.log
    CustomLog ${APACHE_LOG_DIR}/example1.mydomain_access.log combined
&lt;/VirtualHost&gt;

# Enable the configuration files for the sites:
a2ensite example1.mydomain
a2ensite example2.mydomain

# Restart apache2 service and verify that apache2 is running:
service apache2 reload
service apache2 status

# Of course, you will need to add your own index.html or index.php files under the sites' directories.</code></pre>



<p>Configure your router or DNS server records:</p>



<pre class="wp-block-code"><code># I'm using my Cisco router as an example:

ip host example.mydomain 192.168.1.103
ip host example1.mydomain 192.168.1.103
ip host example2.mydomain 192.168.1.103</code></pre>



<p>Now that you should be able to visit the sites by going to:</p>



<pre class="wp-block-code"><code>http:&#47;&#47;example.mydomain
http://example1.mydomain/
http://example2.mydomain/</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Configure Docker MySQL Server</title>
		<link>https://jameswsullivan.github.io/configure-docker-mysql-server/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Fri, 03 Feb 2023 17:14:00 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Apache]]></category>
		<category><![CDATA[Docker]]></category>
		<category><![CDATA[Hosting]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[Self-Hosting]]></category>
		<category><![CDATA[Ubuntu]]></category>
		<guid isPermaLink="false">https://www.alexchen.net/?p=2124</guid>

					<description><![CDATA[This is the third installment of the Name-based Virtual Hosting Series.]]></description>
										<content:encoded><![CDATA[
<p>Background:</p>



<p>I set up this MySQL server using the <strong><a rel="noreferrer noopener" href="https://hub.docker.com/r/ubuntu/mysql" target="_blank">ubuntu/mysql</a></strong> Docker image and it&#8217;s part of my dev environment setup. My setup has <a href="https://jameswsullivan.github.io/docker-volumes-and-smb-share/">CIFS/Samba volume</a> <em>my_smb_vol</em> and an <a href="https://jameswsullivan.github.io/ubuntu-server-docker-host-and-docker-networking/">ipvlan network</a> <em>docker_dev_net</em>.</p>



<p>Steps:</p>



<p>Create a ubuntu/mysql container:</p>



<pre class="wp-block-code"><code>docker run -dit --name MySQL_DEV --network docker_dev_net --ip 192.168.1.101 --mount source=my_smb_vol,destination=/SharedVolume -p 3306:3306 -p 22:22 -e MYSQL_ROOT_PASSWORD=password ubuntu/mysql</code></pre>



<p>Create users and databases:</p>



<pre class="wp-block-code"><code># Connect to mysql instance:
mysql -u root -p

# Show databases:
SHOW DATABASES;

# Describe a table:
USE mysql;
DESC user;

# Show all the users:
SELECT user, host FROM mysql.user;

# Create databases:
CREATE DATABASE my_wordpress_db;

# Create users:
CREATE USER 'wordpress_user'@'192.168.1.103' IDENTIFIED BY 'password';

# Explanation here: 192.168.1.103 is my other Ubuntu Apache web server container. If you are creating a local user use the following command:
CREATE USER 'wordpress_user'@'localhost' IDENTIFIED BY 'password';

# Grant privileges to the user:
GRANT ALL ON my_wordpress_db.* TO 'wordpress_user'@'192.168.1.103' WITH GRANT OPTION;
FLUSH PRIVILEGES;

# Verify privileges:
SHOW GRANTS FOR 'wordpress_user'@'192.168.1.103';</code></pre>



<p>Allow remote connection to this mysql instance:</p>



<pre class="wp-block-code"><code># You will have to modify one of the .cnf files to allow remote connection to your mysql instance, if you list the files under /etc/mysql/, you'll find the following files and directories listed:

ls -al /etc/mysql/

conf.d
my.cnf
my.cnf.fallback

# See the content of my.cnf:
cat /etc/mysql/my.cnf

# On the last two lines of the output, you should see:
# Custom config should go here
!includedir /etc/mysql/conf.d/

# List files under the conf.d directory:
ls -al /etc/mysql/conf.d/

docker.cnf
mysql.cnf
mysqldump.cnf

# The mysql.cnf is what you're going to edit:
nano /etc/mysql/conf.d/mysql.cnf

# By default, your mysql.cnf file should only contain one line: &#91;mysql]. Add a new line below it so it looks like the following:

&#91;mysql]
bind-address = 0.0.0.0</code></pre>



<p>Test connection to the mysql instance from the remote machine/container using the newly created <em>wordpress_user</em> user.</p>



<pre class="wp-block-code"><code># I'm performing these steps on the Ubuntu Apache web server, 192.168.1.103:
# Install the mysql-client package if it's not been installed.

apt-get install mysql-client

# Connect to the mysql instance at 192.168.1.101:
mysql -h 192.168.1.101 -u wordpress_user -p</code></pre>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
