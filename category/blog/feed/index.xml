<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>blog &#8211; howdy</title>
	<atom:link href="https://jameswsullivan.github.io/category/blog/feed/" rel="self" type="application/rss+xml" />
	<link>https://jameswsullivan.github.io/</link>
	<description></description>
	<lastBuildDate>Fri, 29 Dec 2023 20:21:40 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.2</generator>
	<item>
		<title>Refurbish Mac Mini A1347 (Late 2014) &#8211; Part 5 &#8211; Install openSUSE</title>
		<link>https://jameswsullivan.github.io/refurbish-mac-mini-a1347-late-2014-part-4-install-opensuse/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Tue, 21 Nov 2023 22:21:20 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Boot Loader]]></category>
		<category><![CDATA[Kubernetes]]></category>
		<category><![CDATA[KubeSphere]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[Mac Mini]]></category>
		<category><![CDATA[Mac Mini A1347]]></category>
		<category><![CDATA[macOS]]></category>
		<category><![CDATA[openSUSE]]></category>
		<category><![CDATA[rEFInd]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2847</guid>

					<description><![CDATA[Refurbish Mac Mini A1347 (Late 2014) - Part 5 - Install openSUSE and rEFInd.]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading">Background:</h2>



<p>One of the Mac Minis will be used for KubeSphere in a lab environment and I wanted to experiment with openSUSE. However, due to Macs handles the EFI slight differently, both openSUSE&#8217;s default GRUB2 for EFI and GRUB2 Boot Loader configs fail during installation. I&#8217;ve experimented with different combination of settings and openSUSE would not boot successfully once the USB drive is removed. Eventually, <a href="https://www.rodsbooks.com/refind/" target="_blank" rel="noreferrer noopener">rEFInd</a> resolved the problems.</p>



<p>Setup:</p>



<ul>
<li>Mac Mini late-2014 (macmini7,1) with 4GB RAM, 256GB SSD.</li>



<li>openSUSE Leap 15.5, with &#8220;Server&#8221; System Role, (installed natively via USB, without macOS)
<ul>
<li>Partition layout:
<ul>
<li>/dev/sda1 at /boot/eft</li>



<li>/dev/sda2 for / with btrfs</li>



<li>/dev/sda3 at swap</li>
</ul>
</li>



<li>&#8220;Secure Boot&#8221; is disabled under Boot Loader Settings, with Secure Boot Support unchecked.</li>



<li>&#8220;Protective MBR flag&#8221; set to &#8220;remove&#8221; under Boot Loader Settings.</li>
</ul>
</li>
</ul>



<h2 class="wp-block-heading">Issue Details:</h2>



<p>Installation using <code>GRUB2 for EFI</code> fails with the following error at around 93% when Boot Loader configs are being committed:</p>



<pre class="wp-block-code"><code><strong>Error</strong>

Execution of command "&#91;&#91;"/usr/sbin/grub2-install","--target=x86_64-efi","--force","--skip-fs-probe"]]" failed.
Exit code: 1
Error output: Installing for x86_64-efi platform.
Could not prepare Boot variable: invalid argument
/usr/sbin/grub2-install: error: efibootmgr failed to register the boot entry: input/output error.</code></pre>



<p>The installation will finish successfully if &#8220;Update NVRAM Entry&#8221; is unchecked, or use GRUB2 Boot Loader (MBR). However, in both cases, openSUSE is unable to boot successfully without the help of the installation media, the Mac Mini will stuck at the following screen after power-on.</p>



<figure class="wp-block-image size-large"><img fetchpriority="high" decoding="async" width="1024" height="818" src="https://jameswsullivan.github.io/wp-content/uploads/2023/11/mac-flashing-folder-with-question-mark-1024x818.jpg" alt="" class="wp-image-2850" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/11/mac-flashing-folder-with-question-mark-1024x818.jpg 1024w, https://jameswsullivan.github.io/wp-content/uploads/2023/11/mac-flashing-folder-with-question-mark-300x240.jpg 300w, https://jameswsullivan.github.io/wp-content/uploads/2023/11/mac-flashing-folder-with-question-mark-768x614.jpg 768w, https://jameswsullivan.github.io/wp-content/uploads/2023/11/mac-flashing-folder-with-question-mark-700x559.jpg 700w, https://jameswsullivan.github.io/wp-content/uploads/2023/11/mac-flashing-folder-with-question-mark.jpg 1100w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h2 class="wp-block-heading">Solution:</h2>



<p>The solution is fairly straightforward with the help of <a href="https://www.rodsbooks.com/refind/" target="_blank" rel="noreferrer noopener">rEFInd</a>.</p>



<p>1. Install openSUSE using the following Boot Loader Settings:</p>



<ul>
<li>Boot Loader: <code>GRUB2 for EFI</code></li>



<li>Uncheck <code>Secure Boot Support</code></li>



<li>Uncheck <code>Update NVRAM Entry</code></li>



<li><code>Protective MBR flag</code> set to <code>remove</code></li>



<li>Partition layout:
<ul>
<li>/dev/sda1 at /boot/eft</li>



<li>/dev/sda2 for / with btrfs</li>



<li>/dev/sda3 at swap</li>
</ul>
</li>
</ul>



<p>2. After installation finishes, boot openSUSE using the installation media and select <code>More ... -- Boot Linux System</code> , accept default settings and boot to the shell prompt.</p>



<blockquote class="wp-block-quote">
<p>I ran into a minor issue here which my keyboard doesn&#8217;t get recognized, but you should be able to use SSH to connect to the machine and perform the remaining steps. I didn&#8217;t further troubleshoot the driver issue. Also, I had the Mac Mini hardwired for internet so that I don&#8217;t have to load any WiFi drivers, but if you&#8217;re performing the steps on a Mac that doesn&#8217;t have an RJ45 port, you might need to perform extra steps to load the drivers.</p>
</blockquote>



<p>3. Install rEFInd using the following commands:</p>



<pre class="wp-block-code"><code># become root first to make things easy.

cd /tmp

zypper refresh

zypper install -y wget unzip

wget https://phoenixnap.dl.sourceforge.net/project/refind/0.14.0.2/refind-bin-0.14.0.2.zip

unzip refind-bin-0.14.0.2.zip

cd refind-bin-0.14.0.2

./refind-install</code></pre>



<p>After the installation finishes, you might see the following message:</p>



<pre class="wp-block-code"><code>ShimSource is none
Installing rEFInd on Linux....
ESP was found at /boot/efi using vfat
Installing driver for btrfs (btrfs_x64.efi)
Copied rEFInd binary files

Copying sample configuration file as refind.conf; edit this file to configure
rEFInd.

Creating new NVRAM entry

ALERT: There were problems running the efibootmgr program! You may need to
rename the refind_x64.efi binary to the default name (EFI/BOOT/bootx64.efi
on x86-64 systems, EFI/BOOT/bootia32.efi on x86 systems, or
EFI/BOOT/bootaa64.efi on ARM64 systems) to have it run!

Creating //boot/refind_linux.conf; edit it to adjust kernel options.

ALERT:
Installation has completed, but problems were detected. Review the output for
error messages and take corrective measures as necessary. You may need to
re-run this script or install manually before rEFInd will work.</code></pre>



<p>If that&#8217;s the case, perform the following steps:</p>



<pre class="wp-block-code"><code>cd /boot/efi/EFI/

cp -a refind/ BOOT

cd BOOT/

mv refind_x64.efi bootx64.efi</code></pre>



<p>Additionally, if you need to, reset NVRAM using <code>Command/Windows Key + Option/Alt + P + R</code> keys.</p>



<p>Now that you should be able to see the rEFInd boot screen after a reboot, with openSUSE installation media removed. This method should also work for dual boot with macOS, or on other Mac models.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Refurbish Mac Mini A1347 (Late 2014 and Mid 2011) &#8211; Part 4</title>
		<link>https://jameswsullivan.github.io/refurbish-mac-mini-a1347-late-2014-and-mid-2011-part-4/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Sun, 19 Nov 2023 18:29:10 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Driver]]></category>
		<category><![CDATA[Electronics]]></category>
		<category><![CDATA[Hardware]]></category>
		<category><![CDATA[Mac Mini]]></category>
		<category><![CDATA[Mac Mini A1347]]></category>
		<category><![CDATA[macOS]]></category>
		<category><![CDATA[Repair]]></category>
		<category><![CDATA[Windows Systems Administration]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2827</guid>

					<description><![CDATA[Refurbish Mac Mini A1347 (Late 2014 and Mid 2011) - Part 4. Restore Mac Mini late-2014 and mid-2011. Install Windows 10 on Mac Mini mid-2011 (macmini5,1).]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading" id="0-background">Background:</h2>



<p>I came across two more cheap Mac Mini A1347 (one is late-2014 the other is a mid-2011) that I can use for my projects. While restoring them, I came across a few things that&#8217;s worth noting.</p>



<h2 class="wp-block-heading">Issues:</h2>



<ol>
<li>The mid-2011 model has great difficulty with drivers (particularly display and sound) with Windows 10/11.</li>



<li>The mid-2011 model gets very hot when just under normal workload.</li>



<li>The late-2014 model automatically turns on after applying power (which is something I want to disable).</li>



<li>Install 16GB RAM and a second hard drive to the mid-2011 model.</li>
</ol>



<h2 class="wp-block-heading" id="1-issues">Solutions:</h2>



<p>1. The mid-2011 model has great difficulty with drivers (particularly display and sound) with Windows 10/11.</p>



<p>The mid-2011 model (<a href="https://support.apple.com/kb/sp632?locale=en_US" target="_blank" rel="noreferrer noopener">the 2.3Ghz variant</a>) has the Intel HD 3000 graphics card and the Cirrus Audio CS4206B sound card, both of which don&#8217;t have official driver support for anything beyond Windows 7. Plus, if Windows is installed using EFI, the screen is going to go black as soon as HD 3000&#8217;s display driver gets applied, and installing the Cirrus Audio driver will not work either. While you can force Windows to use the Basic Display Driver (Microsoft Basic Display Adapter) by uninstalling the display driver using <a href="https://www.wagnardsoft.com/display-driver-uninstaller-DDU-" target="_blank" rel="noreferrer noopener">DDU</a> and blocking the Hardware Ids using Group Policy (will explain in the last section of this post), it&#8217;s not an elegant solution after all and you&#8217;ll still suffer from no audio (from both HDMI and Cirrus Audio).</p>



<blockquote class="wp-block-quote">
<p>According to some research, it seems that there might be a solution by using DSDT modification/override so that the hardware can be properly &#8220;seen&#8221; and handled correctly by the OS under UEFI. But it&#8217;s not worth it for me to go down that rabbit hole to figure it out, so I just opted for Legacy BIOS mode (which also means that Windows 11 is not the best option). </p>
</blockquote>



<p>After installing Windows 10 using Legacy BIOS mode, everything works fine except the Display-Audio via HDMI despite the fact that all drivers have been installed and are showing that they work &#8220;correctly&#8221; in Device Manager. There is nothing indicating errors but HDMI and Thunderbolt ports both output no sound to the TV. But it&#8217;s acceptable in my case to use as a &#8220;media player&#8221; for my treadmill, which accepts a 3.5mm audio input to the treadmill&#8217;s speakers.</p>



<p>Download:</p>



<ul>
<li><a href="https://github.com/jameswsullivan/blog-file-share/blob/main/Macmini5%2C1-Drivers.7z">Windows 10 drivers for Mac Mini mid-2011 (Macmini5,1)</a></li>



<li><a href="https://www.wagnardsoft.com/display-driver-uninstaller-DDU-">DDU (Display Driver Uninstaller)</a> (<a href="https://www.intel.com/content/www/us/en/support/articles/000091878/graphics.html" target="_blank" rel="noreferrer noopener">reference</a>)</li>
</ul>



<p>Additionally, <a href="https://www.intel.com/content/www/us/en/support/articles/000090440/graphics.html" target="_blank" rel="noreferrer noopener">Intel HD 4000&#8217;s driver</a> seems to also work for Intel HD 3000, and its Display Audio driver is a newer version which supports &#8220;Windows 10&#8221;, but I still wasn&#8217;t able to get sound from HDMI/Thunderbolt.</p>



<p>2. The mid-2011 model gets very hot when just under normal workload.</p>



<p>I guess this was somewhat &#8220;by design&#8221; because I&#8217;ve done my due diligence to check, clean, and restore everything I can think of &#8211; heatsink, thermal paste, fan, etc.. It&#8217;s been restored to a condition that&#8217;s almost like new. After some Googling around I think it&#8217;s just how this particular model is, because the aluminum case is designed to act as a &#8220;heatsink&#8221; to dissipate heat, I guess I&#8217;m just used to newer model&#8217;s cooler and quieter designs.</p>



<p>3. The late-2014 model automatically turns on after applying power (which is something I want to disable).</p>



<p>One of the late-2014 models automatically turns on after applying power, and judging from what was originally installed on it, it seems to be used as a display device at a medical facility that runs a 24/7 slideshow. Disabling it was easy:</p>



<p>Get into Recovery Mode by <code>Option/Windows Key + R</code> , and open <strong>Terminal</strong> under <strong>Utilities</strong>, and type the following command:</p>



<pre class="wp-block-code"><code># To disable:
pmset autorestart 0

# If you want to enable "Power On After Power-Loss", set the value to 1 instead.
pmset autorestart 1</code></pre>



<p>4. Install 16GB RAM and a second hard drive to the mid-2011 model.</p>



<p>RAM and a second hard drive are one of the most popular upgrades done on this model, <a href="https://www.ifixit.com/Device/Mac_Mini_Mid_2011" target="_blank" rel="noreferrer noopener">ifixit has very well made instructions</a>.</p>



<div style="height:50px" aria-hidden="true" class="wp-block-spacer"></div>



<h2 class="wp-block-heading">Forcing Windows 11 (in UEFI mode) to use Microsoft Basic Display Adapter without automatically installing drivers.</h2>



<p>Find the &#8220;Hardware Ids&#8221;:</p>



<pre class="wp-block-code"><code>Device Manager -- Display adapters -- Properties -- Details tab -- Select "Hardware Ids" from the Property drop-down -- Copy them to a text file.</code></pre>



<p>Block them using Group Policy:</p>



<pre class="wp-block-code"><code>Open Local Group Policy Editor, go to Computer Configuration -- Administrative Templates -- System -- Device Installation -- Device Installation Restrictions -- "Prevent installation of devices that match any of these device IDs."

Enable it and add the Hardware Ids you found from Device Manager.</code></pre>



<p>Additionally, you can configure the following to stop Windows 11 from automatically updating drivers:</p>



<pre class="wp-block-code"><code>Open Local Group Policy Editor, go to Computer Configuration -- Administrative Templates -- Windows Components -- Windows Update -- Manage Updates offered from Windows Update -- Enable “Do not include drivers with Windows Updates”</code></pre>



<pre class="wp-block-code"><code>Open Settings -- System -- About -- Advanced system settings -- Hardware tab -- Device Installation Settings -- Check "No (your device might not work as expected)"</code></pre>



<p>During the process, if the screen goes black after Windows 11 automatically applies a display driver (Intel HD 3000 in this case), you might need to get into Safe Mode to use <a href="https://www.wagnardsoft.com/display-driver-uninstaller-DDU-" target="_blank" rel="noreferrer noopener">DDU</a> to remove the driver. You can force powering off the machine three times to get into Advanced boot options (Recovery) mode, or you can try the following trick (because the OS is not frozen or dead, it&#8217;s just the screen that&#8217;s gone black, so you can still do things &#8220;blindly&#8221;):</p>



<pre class="wp-block-code"><code>Windows + R (Run) -- type "shutdown /r /o /t /f 0"</code></pre>



<p>Assuming there is nothing else blocking the reboot, it should go to the Advanced boot options menu upon restart.</p>



<p>If you need to install anything while in Safe Mode, enable Windows Installer using the following commands in a command prompt:</p>



<pre class="wp-block-code"><code>REG ADD “HKLM\SYSTEM\CurrentControlSet\Control\SafeBoot\Network\MSIServer” /VE /T REG_SZ /F /D “Service”

net start msiserver</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Refurbish Mac Mini A1347 (Late 2014 ) – Part 3 &#8211; Remove EFI/BIOS Firmware Lock</title>
		<link>https://jameswsullivan.github.io/refurbish-mac-mini-a1347-late-2014-part-3-remove-efi-bios-firmware-lock/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Tue, 03 Oct 2023 18:33:47 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[CH341A]]></category>
		<category><![CDATA[Electronics]]></category>
		<category><![CDATA[Hardware]]></category>
		<category><![CDATA[Mac Mini]]></category>
		<category><![CDATA[Mac Mini A1347]]></category>
		<category><![CDATA[Repair]]></category>
		<category><![CDATA[XGecu T56]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2811</guid>

					<description><![CDATA[Refurbish Mac Mini A1347 (Late 2014 ) – Part 3 - Remove EFI/BIOS Firmware Lock with CH341A Programmer]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading">Background:</h2>



<p>Two of the Mac Minis I bought on eBay were really cheap and had their HDD and accessories removed, everything&#8217;s been in working order (hardware wise) until I found that I was hit with a &#8220;lock&#8221; screen prompting for password and unable to enter Recovery Mode (Command/Windows Key + R).</p>



<figure class="wp-block-image size-large"><img decoding="async" width="1024" height="607" src="https://jameswsullivan.github.io/wp-content/uploads/2023/10/MacMiniEFILock-1024x607.png" alt="" class="wp-image-2812" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/10/MacMiniEFILock-1024x607.png 1024w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/MacMiniEFILock-300x178.png 300w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/MacMiniEFILock-768x455.png 768w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/MacMiniEFILock-700x415.png 700w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/MacMiniEFILock.png 1326w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h2 class="wp-block-heading">Solution:</h2>



<p>The solution is quite straightforward with the right tools:</p>



<ol>
<li>Use a BIOS/Chip programmer to extract firmware data. The BIOS chips on my Mac Minis are: <code>MX25L6406E</code> and <code>N25Q064A</code>. NeoProgrammer was able to detect <code>N25Q064A</code> automatically, but for <code>MX25L6406E</code>, it was only able to detect the series and the specific chip needs to be selected manually.</li>



<li>Open the extracted <code>.bin</code> file with a HEX editor (<a href="https://mh-nexus.de/en/hxd/">HxD</a> was what I used), search for <code>$SVS</code> , fill the section with <code>FF</code> . Save file.</li>



<li>Wipe the BIOS chip, write the modified <code>.bin</code> file back to the chip.</li>



<li>EFI/BIOS Firmware Lock is gone.</li>
</ol>



<p>The steps I omitted were <a href="https://www.ifixit.com/Teardown/Mac+mini+Late+2014+Teardown/30410">how to open Mac Mini and remove the logic board</a>. I assume that if you&#8217;re already doing this level of DIY, this should already be a simple process. I also removed the AirPort module to allow for more space to fit the clip.</p>



<p><strong>Tools needed:</strong></p>



<ul>
<li>CH341A programmer (with the SOP8 SOIC8 clip).</li>



<li>NeoProgrammer V2.2.0.10</li>



<li>HxD HEX Editor</li>



<li>[Optional]: Multimeter with probes thin enough to test the connectivity/continuity between the clip and CH341A.</li>



<li>[Optional]: Microscope. It&#8217;s gonna be really easy to see the chip&#8217;s part number with a microscope.</li>
</ul>



<p>There are a lot of alternatives that you could use to accomplish this task, for me the CH341A was the cheapest and easiest to come by. Here is a list of possible alternatives:</p>



<ul>
<li><strong>Programmer:</strong> <a href="http://www.xgecu.com/en/TL866_main.html">XGecu T48/T56</a> universal programmer. This is probably the best one out there if you want a tool that supports almost any chip available out there. It&#8217;s a little pricey for small jobs like this one, but it&#8217;s on my shopping list.</li>



<li><strong>Software:</strong> AsProgrammer, Colibri (compatible with CH341A); Xgpro (comes with XGecu programmer, not sure if it&#8217;s compatible with CH341A).</li>
</ul>



<p>Colibri doesn&#8217;t seem to support as many chips as AsProgrammer and NeoProgrammer do, but all of them were fairly straightforward to use.</p>



<p><strong>Pro Tips:</strong></p>



<ul>
<li>Datasheet: <a href="https://github.com/jameswsullivan/blog-file-share/blob/main/MX25L6406E-MacronixInternational.pdf">MX25L6406E</a> and <a href="https://github.com/jameswsullivan/blog-file-share/blob/main/N25Q064A-MicronTechnology.pdf">N25Q064A</a> .</li>



<li>The CH341A programmer and the clip should theoretically work with any 24 and 25 series chips.</li>



<li>See the closeup pictures from the gallery below, the purple wire should match PIN #1 on the chip, and when it&#8217;s clipped to CH341A, PIN #1 faces toward the lever, away from the USB port.</li>



<li>Use a multimeter to test the continuity after fitting the clip onto the BIOS chip. It&#8217;s not absolutely necessary but it saved me a lot of time when trying to get a solid connection.</li>
</ul>



<p>A video will be provided at a later time to better illustrate the process.</p>



<figure class="wp-block-gallery has-nested-images columns-2 is-cropped wp-block-gallery-1 is-layout-flex wp-block-gallery-is-layout-flex">
<figure class="wp-block-image size-large"><a href="https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-01-scaled.jpg"><img decoding="async" width="1024" height="576" data-id="2816" src="https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-01-1024x576.jpg" alt="" class="wp-image-2816" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-01-1024x576.jpg 1024w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-01-300x169.jpg 300w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-01-768x432.jpg 768w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-01-1536x864.jpg 1536w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-01-2048x1152.jpg 2048w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-01-700x394.jpg 700w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></figure>



<figure class="wp-block-image size-large"><a href="https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-02-scaled.jpg"><img loading="lazy" decoding="async" width="1024" height="576" data-id="2817" src="https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-02-1024x576.jpg" alt="" class="wp-image-2817" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-02-1024x576.jpg 1024w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-02-300x169.jpg 300w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-02-768x432.jpg 768w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-02-1536x864.jpg 1536w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-02-2048x1152.jpg 2048w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-02-700x394.jpg 700w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></figure>



<figure class="wp-block-image size-large"><a href="https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-03-scaled.jpg"><img loading="lazy" decoding="async" width="1024" height="576" data-id="2815" src="https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-03-1024x576.jpg" alt="" class="wp-image-2815" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-03-1024x576.jpg 1024w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-03-300x169.jpg 300w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-03-768x432.jpg 768w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-03-1536x864.jpg 1536w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-03-2048x1152.jpg 2048w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-03-700x394.jpg 700w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></figure>



<figure class="wp-block-image size-large"><a href="https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-04-scaled.jpg"><img loading="lazy" decoding="async" width="1024" height="576" data-id="2814" src="https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-04-1024x576.jpg" alt="" class="wp-image-2814" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-04-1024x576.jpg 1024w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-04-300x169.jpg 300w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-04-768x432.jpg 768w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-04-1536x864.jpg 1536w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-04-2048x1152.jpg 2048w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-04-700x394.jpg 700w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></figure>



<figure class="wp-block-image size-large"><a href="https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-05.jpg"><img loading="lazy" decoding="async" width="1024" height="1024" data-id="2819" src="https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-05-1024x1024.jpg" alt="" class="wp-image-2819" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-05-1024x1024.jpg 1024w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-05-300x300.jpg 300w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-05-150x150.jpg 150w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-05-768x768.jpg 768w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-05-1536x1536.jpg 1536w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-05-2048x2048.jpg 2048w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-05-140x140.jpg 140w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-05-380x380.jpg 380w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-05-600x600.jpg 600w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></figure>



<figure class="wp-block-image size-large"><a href="https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-06-scaled.jpg"><img loading="lazy" decoding="async" width="1024" height="1024" data-id="2818" src="https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-06-1024x1024.jpg" alt="" class="wp-image-2818" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-06-1024x1024.jpg 1024w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-06-300x300.jpg 300w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-06-150x150.jpg 150w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-06-768x768.jpg 768w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-06-1536x1536.jpg 1536w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-06-2048x2048.jpg 2048w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-06-140x140.jpg 140w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-06-380x380.jpg 380w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-06-600x600.jpg 600w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></figure>
</figure>



<p></p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Refurbish Mac Mini A1347 (Late 2014 ) – Part 2 &#8211; Install Windows 11</title>
		<link>https://jameswsullivan.github.io/refurbish-mac-mini-a1347-late-2014-part-2-install-windows-11/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Sun, 01 Oct 2023 21:04:59 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[brigadier]]></category>
		<category><![CDATA[Mac Mini]]></category>
		<category><![CDATA[Mac Mini A1347]]></category>
		<category><![CDATA[macOS]]></category>
		<category><![CDATA[System Administration]]></category>
		<category><![CDATA[Windows Systems Administration]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2797</guid>

					<description><![CDATA[Refurbish Mac Mini A1347 (late 2014, EMC 2840, 820-5509-A) - Part 2 - Install Windows 11 natively.]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading">Background:</h2>



<p>As detailed in <a href="https://jameswsullivan.github.io/refurbish-mac-mini-a1347-late-2014-part-1/">the previous article</a>, after the Mac Minis were restored (hardware wise), I decided to use one of them as a &#8220;media player&#8221; and mount it on the back of a monitor and place it in front of the treadmill to use while I work out. And since it&#8217;ll only be used as a media player, installing Windows 11 on it won&#8217;t be a bad idea.</p>



<p>I didn&#8217;t use BootCamp and didn&#8217;t have macOS and Windows dual OS, Windows 11 was installed natively. However, without going through the BootCamp process means that the Windows drivers issue won&#8217;t be automatically resolved.</p>



<h2 class="wp-block-heading">Solution:</h2>



<p>After installing Windows 11, use <a href="https://github.com/timsutton/brigadier">Brigadier</a> to download and install BootCamp and drivers, after the drivers are successfully installed, BootCamp and other Apple related software can be safely removed.</p>



<p>Currently there is <a href="https://github.com/timsutton/brigadier/issues/37">a 7zip issue</a> (<a href="https://sourceforge.net/p/sevenzip/bugs/2414/">7zip bug</a>) when unpacking the payload with brigadier. The easiest way to avoid this issue is to install the <code>7-Zip 22.01 (2022-07-15)</code> version.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Refurbish Mac Mini A1347 (Late 2014 ) &#8211; Part 1</title>
		<link>https://jameswsullivan.github.io/refurbish-mac-mini-a1347-late-2014-part-1/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Sun, 01 Oct 2023 20:21:14 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Mac Mini]]></category>
		<category><![CDATA[Mac Mini A1347]]></category>
		<category><![CDATA[macOS]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2784</guid>

					<description><![CDATA[Refurbish Mac Mini A1347 (late 2014, EMC 2840, 820-5509-A) - Part 1.]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading">Background:</h2>



<p>I&#8217;ve acquired a few Mac Mini A1347 (late 2014, EMC 2840, 820-5509-A) over the years for my projects due to their decent performance, low price, and the possibility of RAM and SSD upgrades (RAM upgrade will require soldering/de-soldering of the memory chips and reconfiguration of some resistors, which I&#8217;ll attempt at a later time). This first part of the series details the process of how I resolved the overheating issue and some OS installation hiccups.</p>



<p>Machines and their specs:</p>



<ul>
<li>2 x i5, 4GB RAM models, with no HDD/SSD and accessories.</li>



<li>1 x i5, 8GB RAM model, with original 1TB HDD.</li>
</ul>



<h2 class="wp-block-heading">Problems:</h2>



<ol>
<li>One 4GB model repeatedly gets the 5101F error when attempting to reinstall macOS via Internet Recovery. Also, for some reason this particular machine would not enter its built-in Recovery Mode regardless which key combinations were used (<code>Command/Windows Key + R</code> should enter built-in Recovery Mode, <code>Command/Windows Key + Option/Alt + R</code> enters Internet Recovery), it would always automatically enter Internet Recovery and eventually fails with the 5101F error.</li>



<li>The 8GB RAM model produces excessive heat compared to the rest of Mac Minis and received the &#8220;An error occurred while preparing the installation. try running this application again.&#8221; error while reinstalling macOS Sierra via built-in Recovery Mode.</li>
</ol>



<h2 class="wp-block-heading">Solution:</h2>



<p><strong>1. The 5101F and unable to enter built-in Recovery Mode problem:</strong></p>



<p>This error could have multiple causes (such as poor internet connection). In my case, resetting the PRAM/NVRAM resolved it. To reset the PRAM/NVRAM, follow these steps:</p>



<ul>
<li>Power off the Mac Mini.</li>



<li>Power on the machine, press and hold <code>Option + Command + P + R (Windows Key + Alt + P + R)</code> when you hear the power-on chime. The machine will restart a few times, keep holding the keys until you hear the third chime (counting from the one when you first powered the machine on).</li>



<li>Release the keys, your machine will reboot one more time and then boot normally.</li>
</ul>



<p>Note: you can also hold the keys for 20+ seconds. The number of chimes you hear is not a factor as to whether the reset is successful.</p>



<p>After the NVRAM reset, shut down the machine, unplug the power cord, push and hold the power button for a few seconds and then power on the machine and use <code>Command/Windows Key + R</code> to enter built-in Recovery Mode.</p>



<p>Upon successful boot up, I discovered that the OS Recovery was still at Yosemite (the other 4GB model was at Sierra). Without knowing the history of the machine, maybe being outdated had something to do with the errors.</p>



<p>After reinstalling macOS Yosemite, macOS Sierra can be downloaded <a href="https://support.apple.com/en-us/HT211683#browser">here</a> and manually installed without further issues (Internet Recovery still produces 5101F error).</p>



<p><strong>2. &#8220;An error occurred while preparing the installation. try running this application again.&#8221; while reinstalling macOS Sierra via built-in Recovery Mode.</strong></p>



<p>For this one, resetting the NVRAM had no effect, but going straight to Internet Recovery was able to install macOS Monterey successfully. It seems that the built-in OS Recovery for Sierra was broken in <a href="https://www.reddit.com/r/MacOS/comments/1030a4g/need_help_with_this_an_error_occurred_while/">some cases</a>.</p>



<p><strong>3. The excessive heat.</strong></p>



<p>Assuming that the cooling fan and logic boards are all clean and intact and there is no excessive dust that blocks the cooling channels, reapplying the thermal paste on the CPU is usually the solution. I assume that if you&#8217;re already doing this level of repair, you would already be familiar with how to disassemble the Mac Mini and the heatsink, so I&#8217;ll only post a few pictures here for reference.</p>



<figure class="wp-block-gallery has-nested-images columns-default is-cropped wp-block-gallery-2 is-layout-flex wp-block-gallery-is-layout-flex">
<figure class="wp-block-image size-large"><a href="https://jameswsullivan.github.io/wp-content/uploads/2023/10/macmini-thermal-paste-01-scaled.jpg"><img loading="lazy" decoding="async" width="1024" height="576" data-id="2788" src="https://jameswsullivan.github.io/wp-content/uploads/2023/10/macmini-thermal-paste-01-1024x576.jpg" alt="" class="wp-image-2788" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/10/macmini-thermal-paste-01-1024x576.jpg 1024w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/macmini-thermal-paste-01-300x169.jpg 300w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/macmini-thermal-paste-01-768x432.jpg 768w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/macmini-thermal-paste-01-1536x864.jpg 1536w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/macmini-thermal-paste-01-2048x1152.jpg 2048w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/macmini-thermal-paste-01-700x394.jpg 700w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></figure>



<figure class="wp-block-image size-large"><a href="https://jameswsullivan.github.io/wp-content/uploads/2023/10/macmini-thermal-paste-02-scaled.jpg"><img loading="lazy" decoding="async" width="1024" height="576" data-id="2789" src="https://jameswsullivan.github.io/wp-content/uploads/2023/10/macmini-thermal-paste-02-1024x576.jpg" alt="" class="wp-image-2789" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/10/macmini-thermal-paste-02-1024x576.jpg 1024w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/macmini-thermal-paste-02-300x169.jpg 300w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/macmini-thermal-paste-02-768x432.jpg 768w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/macmini-thermal-paste-02-1536x864.jpg 1536w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/macmini-thermal-paste-02-2048x1152.jpg 2048w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/macmini-thermal-paste-02-700x394.jpg 700w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></figure>



<figure class="wp-block-image size-large"><a href="https://jameswsullivan.github.io/wp-content/uploads/2023/10/macmini-thermal-paste-03-scaled.jpg"><img loading="lazy" decoding="async" width="1024" height="575" data-id="2790" src="https://jameswsullivan.github.io/wp-content/uploads/2023/10/macmini-thermal-paste-03-1024x575.jpg" alt="" class="wp-image-2790" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/10/macmini-thermal-paste-03-1024x575.jpg 1024w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/macmini-thermal-paste-03-300x169.jpg 300w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/macmini-thermal-paste-03-768x432.jpg 768w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/macmini-thermal-paste-03-1536x863.jpg 1536w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/macmini-thermal-paste-03-2048x1151.jpg 2048w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/macmini-thermal-paste-03-700x393.jpg 700w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></figure>
</figure>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Flash LSI SAS Adapters to HBA IT MODE</title>
		<link>https://jameswsullivan.github.io/flash-lsi-sas-adapters-to-hba-it-mode/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Sat, 05 Aug 2023 23:33:28 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Firmware]]></category>
		<category><![CDATA[HBA]]></category>
		<category><![CDATA[LSI HBA Adapters]]></category>
		<category><![CDATA[MegaCLI]]></category>
		<category><![CDATA[MegaRec]]></category>
		<category><![CDATA[NAS]]></category>
		<category><![CDATA[SAS2FLASH.EFI]]></category>
		<category><![CDATA[SAS2FLSH]]></category>
		<category><![CDATA[Storage]]></category>
		<category><![CDATA[TrueNAS]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2205</guid>

					<description><![CDATA[Flash LSI SAS Adapters to IT MODE with MegaRec, SAS2FLASH.EFI.]]></description>
										<content:encoded><![CDATA[
<p>In the past year of so I&#8217;ve acquired a few SAS Adapters for my NAS and other server builds and needed to flash them to IT mode to use with TrueNAS and Windows storage pool. The following steps were performed on a PIKE 2008 card that came with an ASUS Z9PA-D8 motherboard.</p>



<p>I did quite some research on this matter and found that a lot of the tutorials have over complicated the issue if the only goal here is to flash the SAS adapter to IT mode, so here I&#8217;ll provide a simplified process.</p>



<h2 class="wp-block-heading">Tools needed:</h2>



<ul>
<li>The firmware <code>.bin</code> file of your adapter. Most of the firmware files can be downloaded directly from Broadcom&#8217;s website. (Here we&#8217;re using the <code>2118it.bin</code> file extracted from the <code>9211-8i_Package_P20_IR_IT_FW_BIOS_for_MSDOS_Windows</code> package.</li>



<li>You <strong>do not</strong> necessarily need the full suite of the LSI command line toolkit, you only need three files: <code>MegaRec.exe</code>, <code>DOS4GW.EXE</code>, and <code>sas2flash.efi</code> . <code>MegaCli</code> is optional, I used it on one machine and it provides a lot of powerful functions but on the machine with PIKE 2008, it wasn&#8217;t able to detect any hardware.</li>



<li>The <code>sbrempty.bin</code> file.</li>



<li>A flash drive (a small one is enough, the files needed are only a few MBs) formatted to FAT32.</li>



<li>A copy of the EFI bootloader (<code>efi\boot\bootx64.efi</code>) to boot into the EFI shell.</li>



<li><a rel="noreferrer noopener" href="https://rufus.ie/en/" target="_blank">Rufus</a>, to make the flash drive DOS bootable.</li>



<li>[Optional]: If you want to be able to boot into the card&#8217;s BIOS utility, you can flash the <code>mptsas2.rom</code> as well (not provided), but if you only want your adapter to function like extra SATA ports in passthrough mode, you can ignore this one.</li>
</ul>



<p>Note: You can probably perform the firmware flash without the EFI shell, the sas2flash tool has a DOS version, but from my experience the EFI version has the best compatibility and I&#8217;ve had the most success with it. All the files needed can be downloaded here: <a rel="noreferrer noopener" href="https://github.com/jameswsullivan/blog-file-share/blob/main/SAS-Adapters-IT-Mode.zip" target="_blank">SAS-Adapters-IT-Mode.zip</a> .</p>



<h2 class="wp-block-heading">Steps:</h2>



<p>1. Use Rufus to make a MS-DOS bootable flash drive. Add all files from the zip file to the root directory of the flash drive. The root directory should look like this:</p>



<pre class="wp-block-code"><code>LOCALE
efi
autorun.inf
autorun.ico
MegaRec.exe
DOS4GW.EXE
2118it.bin
sbrempty.bin
sas2flash.efi</code></pre>



<p>2. Configure your boot options in BIOS as needed (legacy and UEFI), and boot into EFI first.</p>



<p>3. At the EFI shell prompt, move to the flash drive (mine is <code>fs0:</code> ), and execute the following commands:</p>



<pre class="wp-block-code"><code># List your boards. If you only have one adapter, the index should be 0.
sas2flash.efi -listall

# Get the adapter's SAS address.
sas2flash.efi -c 0 -list

# You can pipe your output to a text file if you want to keep a record of it, and you can use the "edit" command in the EFI shell to view/edit the files, very much like how you use "nano" on Linux. e.g.:

sas2flash.efi -listall &gt; myadapters.txt
sas2flash.efi -c 0 -list &gt; adapter0info.txt
edit adapter0info.txt</code></pre>



<p>4. Exit out of the EFI shell and boot into DOS. At the DOS prompt, move to your flash drive and execute the following <code>MegaRec</code> commands:</p>



<pre class="wp-block-code"><code># Show adapters, which we already know from step 3 that our adapter is at "0".
megarec -adplist

# &#91;Optional]: Make a backup of your SBR and SPD.
megarec -readsbr 0 file_name.sbr
megarec -readspd 0 file_name.spd

# Write the sbrempty.bin file.
megarec -writesbr 0 sbrempty.bin

# Clean the flash. This step might take a few minutes.
megarec -cleanflash 0

# Note: You can also pipe the output of these commands to a text file for documentation.</code></pre>



<p>5. Boot into the EFI shell again and flash the <code>2118it.bin</code> firmware.</p>



<pre class="wp-block-code"><code># Flash the 2118it.bin firmware:
sas2flash.efi -c 0 -o -f 2118it.bin
OR
sas2flash.efi -c 0 -o -f 2118it.bin -b mptsas2.rom

# Grab the SAS address from step 3 and set the address.
# Note, the SAS address displayed in step 3 contains dashes, but when you enter it here you need to enter the 16 digits address without dashes.
sas2flash.efi -c 0 -o -sasadd 12345600000000AB

# Verify your adapter
sas2flash.efi -listall
sas2flash.efi -c 0 -list</code></pre>



<p>If all the steps finished without errors, your SAS adapter should be working in IT Mode now. As a reference, I have the following cards on my servers: one PIKE 2008, one 9200-8i (or maybe a 9220-8i), and two IBM ServeRAID M1015 that came off some x3690 X5 servers.</p>



<div style="height:50px" aria-hidden="true" class="wp-block-spacer"></div>



<h2 class="wp-block-heading">Reference: MegaREC Command Usage:</h2>



<pre class="wp-block-code"><code>
MegaRAID HWR Contoller Recovery tool. Version 01.02-007 August 03, 2011
Copyright (c) 2006-2010 LSI Corp.
Supports 1078 controller and its Successors.

Usage:
MegaRec -help                  : Display the list of options
MegaRec -adpList               : Display identified MR controller(s)
MegaRec -corruptInfo           : Display corruption information of controller
MegaRec -m0flash &lt;n&gt; &lt;image&gt;   : Flash controller
                               : where &lt;n&gt; is the controller index
                               : and &lt;image&gt; is the image file to flash
MegaRec -cleanflash &lt;n&gt; &lt;image&gt;: Erase Flash. Programs if image is Provided.
                               : where &lt;n&gt; is the controller index
                               : and &lt;image&gt; is the image file to flash
MegaRec -readspd &lt;n&gt; &lt;image&gt;   : Read controller SPD to specified file
                               : where &lt;n&gt; is the controller index
                               : and &lt;image&gt; is the specified file name
MegaRec -writespd &lt;n&gt; &lt;image&gt;  : Write controller SPD from specified file
                               : where &lt;n&gt; is the controller index
                               : and &lt;image&gt; is the specified file name
MegaRec -readsbr &lt;n&gt; &lt;image&gt; &#91;&lt;byteCount&gt;] : Read controller SBR to specified 
                               : file where &lt;n&gt; is the controller index,
                               : &lt;byteCount&gt; is the number of bytes of SBR 
                               : to be read and is optional to specify
                               : and &lt;image&gt; is the specified file name
MegaRec -writesbr &lt;n&gt; &lt;image&gt;  : Write controller SBR from specified file
                               : where &lt;n&gt; is the controller index
                               : and &lt;image&gt; is the specified file name
MegaRec -m0flash &lt;n&gt; &lt;image&gt; &lt;-i2o/-fusion&gt;     : Flash controller in I2O/FUSION mode
MegaRec -cleanflash &lt;n&gt; &lt;image&gt; &lt;-i2o/-fusion&gt;  : Erase Flash. Programs if image is Provided in I2O/FUSION mode.
MegaRec -readspd &lt;n&gt; &lt;image&gt; &lt;-i2o/-fusion&gt;     : Read controller SPD to specified file in I2O/FUSION mode
MegaRec -writespd &lt;n&gt; &lt;image&gt; &lt;-i2o/-fusion&gt;    : Write controller SPD from specified file in I2O/FUSION mode
MegaRec -readsbr &lt;n&gt; &lt;image&gt; &#91;&lt;byteCount&gt;] &lt;-i2o/-fusion&gt; : Read controller SBR to specified file in I2O/FUSION mode
MegaRec -writesbr &lt;n&gt; &lt;image&gt; &lt;-i2o/-fusion&gt;    : Write controller SBR from specified file in I2O/FUSION mode
</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Linux Administration: Expand LVM</title>
		<link>https://jameswsullivan.github.io/linux-administration-expand-lvm/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Sat, 05 Aug 2023 16:06:41 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Docker]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[System Administration]]></category>
		<category><![CDATA[Ubuntu]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2710</guid>

					<description><![CDATA[Expand LVM in Ubuntu 22.04 LTS.]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading">Background:</h2>



<p>This Ubuntu server (Hyper-V VM) in question is a Docker host that was partitioned using the default layout (50/50 split of available disk space) when Ubuntu was installed. After a few month one of the logic volumes <code>/dev/mapper/ubuntu--vg-ubuntu--lv</code> ran out of space. Since there is no GUI for partition management, a few steps will be needed to properly expand the volume size.</p>



<p>Related article:</p>



<ul>
<li><a href="https://jameswsullivan.github.io/linux-administration-install-docker-on-ubuntu-server-and-mount-disks/">Linux Administration: Install Docker on Ubuntu Server and mount disks</a></li>
</ul>



<h2 class="wp-block-heading">Solution:</h2>



<p>1. Expand the virtual disk size in Hyper-V manager.</p>



<p>2. On the Ubuntu server, use <code>fdisk -l</code> to identify the disk and <code>df -h</code> to check the disk usage, here we use <code>/dev/sdf</code> (disk) and <code>/dev/mapper/ubuntu--vg-ubuntu--lv</code> (logic volume) as an example.</p>



<p>3. Run <code>parted /dev/sdf print</code> to view partition layout. You&#8217;ll probably get a warning message like the following. Which one you choose doesn&#8217;t really matter because we&#8217;ll be doing the process manually.</p>



<pre class="wp-block-code"><code>Warning: Not all of the space available to /dev/sdf appears to be used, you can fix the GPT to use all of the space (an extra ______ blocks) or continue with the current setting?
Fix/Ignore?</code></pre>



<p>4. After you see the list of partitions, run this command on the partition that you need to expand to resize the partition to use the additional space, here we use partition 3 as an example: <code>parted /dev/sdf resizepart 3 100%</code></p>



<p>5. Resize the Physical Volume using command: <code>pvresize /dev/sdf3</code></p>



<p>6. Now that if you run <code>vgdisplay</code> , you should see the free space listed under <code>Free PE / Size</code>. And make sure you have your volume group name <code>ubuntu-vg</code> ready.</p>



<p>7. Run <code>lvdisplay</code> to identify the logical volume we need to expand, as we discussed above, the one needs expanding is the <code>/dev/ubuntu-vg/ubuntu-lv</code> volume.</p>



<p>8. Run <code>lvextend -l +100%FREE -r /dev/ubuntu-vg/ubuntu-lv</code> to expand the volume.</p>



<p>9. Now run <code>vgdisplay</code> , <code>lvdisplay</code>, and <code>df -h</code> again to verify that the <code>/dev/mapper/ubuntu--vg-ubuntu--lv</code> volume has been successfully expanded. Reboot the system if needed.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Repair ProForm 505 CST Treadmill</title>
		<link>https://jameswsullivan.github.io/repair-proform-505-cst-treadmill/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Sun, 16 Jul 2023 21:08:14 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Electronics]]></category>
		<category><![CDATA[MOSFET]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2637</guid>

					<description><![CDATA[Repair ProForm 505 CST Treadmill.]]></description>
										<content:encoded><![CDATA[
<p>I recently picked up a used, broken ProForm 505 CST Treadmill from someone at a really good price and decided to experiment with a repair myself, because the symptoms didn&#8217;t sound like it&#8217;s irreparable.</p>



<p><strong>And I was right</strong> &#8211; the only thing I needed to replace was an IRFP250 MOSFET.</p>



<blockquote class="wp-block-quote">
<p><strong>Symptom:</strong> The control panel turns on fine, but the motor will run for a fraction of a second and then immediately stop.</p>
</blockquote>



<p>The repair is very easy: de-solder the bad MOSFET and replace it with a new one.</p>



<p>The bad MOSFET was shot, you can diagnose with a multimeter:</p>



<ul>
<li>Put the multimeter in continuity or diode testing mode, you should see a voltage drop between the pins on a good MOSFET and the pins shouldn&#8217;t have continuity between each other.</li>



<li>On the bad one, the multimeter beeps in continuity mode on all three pins, meaning the MOSFET is completely shot.</li>
</ul>



<figure class="wp-block-image size-large is-resized"><a href="https://jameswsullivan.github.io/wp-content/uploads/2023/07/repair-treadmill-01-scaled.jpg"><img loading="lazy" decoding="async" width="1024" height="576" src="https://jameswsullivan.github.io/wp-content/uploads/2023/07/repair-treadmill-01-1024x576.jpg" alt="Motor Control Board" class="wp-image-2639" style="width:768px;height:432px" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/07/repair-treadmill-01-1024x576.jpg 1024w, https://jameswsullivan.github.io/wp-content/uploads/2023/07/repair-treadmill-01-300x169.jpg 300w, https://jameswsullivan.github.io/wp-content/uploads/2023/07/repair-treadmill-01-768x432.jpg 768w, https://jameswsullivan.github.io/wp-content/uploads/2023/07/repair-treadmill-01-1536x864.jpg 1536w, https://jameswsullivan.github.io/wp-content/uploads/2023/07/repair-treadmill-01-2048x1152.jpg 2048w, https://jameswsullivan.github.io/wp-content/uploads/2023/07/repair-treadmill-01-700x394.jpg 700w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></figure>



<figure class="wp-block-image size-large is-resized"><a href="https://jameswsullivan.github.io/wp-content/uploads/2023/07/repair-treadmill-02-scaled.jpg"><img loading="lazy" decoding="async" width="1024" height="576" src="https://jameswsullivan.github.io/wp-content/uploads/2023/07/repair-treadmill-02-1024x576.jpg" alt="IRFP250 MOSFET" class="wp-image-2641" style="width:768px;height:432px" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/07/repair-treadmill-02-1024x576.jpg 1024w, https://jameswsullivan.github.io/wp-content/uploads/2023/07/repair-treadmill-02-300x169.jpg 300w, https://jameswsullivan.github.io/wp-content/uploads/2023/07/repair-treadmill-02-768x432.jpg 768w, https://jameswsullivan.github.io/wp-content/uploads/2023/07/repair-treadmill-02-1536x864.jpg 1536w, https://jameswsullivan.github.io/wp-content/uploads/2023/07/repair-treadmill-02-2048x1152.jpg 2048w, https://jameswsullivan.github.io/wp-content/uploads/2023/07/repair-treadmill-02-700x394.jpg 700w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></figure>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Network Administration: Configure VLAN and InterVLAN Routing</title>
		<link>https://jameswsullivan.github.io/network-administration-configure-vlan-and-intervlan-routing/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Tue, 20 Jun 2023 15:25:19 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Cisco]]></category>
		<category><![CDATA[Cisco 2951]]></category>
		<category><![CDATA[Cisco C3750G]]></category>
		<category><![CDATA[InterVLAN Routing]]></category>
		<category><![CDATA[Network Administration]]></category>
		<category><![CDATA[Networking]]></category>
		<category><![CDATA[router-on-a-stick]]></category>
		<category><![CDATA[SVI]]></category>
		<category><![CDATA[Switch Virtual Interface]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2574</guid>

					<description><![CDATA[Configure VLAN and InterVLAN routing on Cisco router and switch using router-on-a-stick and SVI.]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading">Lab Environment:</h2>



<ul>
<li>Router: Cisco 2951</li>



<li>Switch: Cisco C3750G PoE</li>



<li>2 VLANs</li>
</ul>



<h2 class="wp-block-heading">Method 1: router-on-a-stick</h2>



<pre class="wp-block-code"><code>Topology: C3750G (GigabitEthernet3/0/1) -- CISCO2951(GigabitEthernet0/1) -- INTERNET(GigabitEthernet0/0)</code></pre>



<h4 class="wp-block-heading">On CISCO2951:</h4>



<pre class="wp-block-code"><code>CISCO2951(config)#interface GigabitEthernet 0/0
CISCO2951(config-if)#no shutdown
CISCO2951(config-if)#speed 1000
CISCO2951(config-if)#duplex full
CISCO2951(config-if)#exit

CISCO2951(config)#interface GigabitEthernet 0/0.10
CISCO2951(config-subif)#encapsulation dot1Q 10
CISCO2951(config-subif)#ip address 192.168.10.1 255.255.255.0
CISCO2951(config-subif)#exit

CISCO2951(config)#interface GigabitEthernet 0/0.20
CISCO2951(config-subif)#encapsulation dot1Q 20                 
CISCO2951(config-subif)#ip address 192.168.20.1 255.255.255.0</code></pre>



<h4 class="wp-block-heading">On C3750G:</h4>



<pre class="wp-block-code"><code>C3750G(config)#interface GigabitEthernet 3/0/1
C3750G(config-if)#switchport mode trunk
C3750G(config-if)#switchport trunk encapsulation dot1q
C3750G(config-if)#no shutdown
C3750G(config-if)#speed 1000
C3750G(config-if)#duplex full
C3750G(config-if)#exit

C3750G(config)#vlan 10
C3750G(config-vlan)#name VLAN10
C3750G(config-vlan)#exit
C3750G(config)#vlan 20
C3750G(config-vlan)#name VLAN20
C3750G(config-vlan)#exit

# Assign ports to the VLANs as needed:
C3750G(config)#interface GigabitEthernet 3/0/2
C3750G(config-if)#switchport mode access
C3750G(config-if)#switchport access vlan 10
C3750G(config-if)#no shutdown
C3750G(config-if)#speed 1000
C3750G(config-if)#duplex full
C3750G(config-if)#exit

C3750G(config)#interface GigabitEthernet 3/0/3
C3750G(config-if)#switchport mode access
C3750G(config-if)#switchport access vlan 20
C3750G(config-if)#no shutdown
C3750G(config-if)#speed 1000
C3750G(config-if)#duplex full
C3750G(config-if)#exit</code></pre>



<h2 class="wp-block-heading">Method 2: SVI (Switch Virtual Interface) and InterVLAN routing on C3750G switch.</h2>



<pre class="wp-block-code"><code>Topology: C3750G (GigabitEthernet3/0/1) -- CISCO2951(GigabitEthernet0/1) -- INTERNET(GigabitEthernet0/0)</code></pre>



<h4 class="wp-block-heading">CISCO2951 Configs:</h4>



<pre class="wp-block-code"><code># Configure GigabitEthernet 0/0 (connected to ISP's device for internet access) to use DHCP.
CISCO2951(config)#interface GigabitEthernet 0/0
CISCO2951(config-if)#ip address dhcp
CISCO2951(config-if)#ip nat outside
CISCO2951(config-if)#ip virtual-reassembly in
CISCO2951(config-if)#no shutdown
CISCO2951(config-if)#speed 1000
CISCO2951(config-if)#duplex full
CISCO2951(config-if)#exit

# Configure GigabitEthernet0/1 (connected to C3750G).
CISCO2951(config)#interface GigabitEthernet 0/1
CISCO2951(config-if)#ip address 192.168.0.1 255.255.255.0
CISCO2951(config-if)#ip access-group NAT_ACL in
CISCO2951(config-if)#ip nat inside
CISCO2951(config-if)#ip virtual-reassembly in
CISCO2951(config-if)#no shutdown
CISCO2951(config-if)#speed 1000
CISCO2951(config-if)#duplex full
CISCO2951(config-if)#exit

# Configure ACL and NAT.
CISCO2951(config)#ip dns server
CISCO2951(config)#ip name-server 1.1.1.1
CISCO2951(config)#ip access-list extended NAT_ACL
CISCO2951-K9(config-ext-nacl)#permit ip 192.168.0.0 0.0.0.255 any
CISCO2951-K9(config-ext-nacl)#exit
CISCO2951(config)#ip nat inside source list NAT_ACL interface GigabitEthernet0/0 overload

# Enable routing and configure EIGRP (optional, depending on your configs)
CISCO2951(config)#ip routing
CISCO2951(config)#router eigrp 100
CISCO2951(config-router)#network 192.168.0.0 0.0.0.255</code></pre>



<h4 class="wp-block-heading">C3750G Configs:</h4>



<pre class="wp-block-code"><code># Enable routing:
C3750G(config)#ip routing

# Configure cef (Cisco Express Forwarding
) for better performance:
C3750G(config)#ip cef distributed
C3750G(config)#ip cef optimize neighbor resolution

#Configure DNS
C3750G(config)#ip domain-lookup
C3750G(config)#ip name-server 192.168.0.1

# Enable spanning-tree protocol.
C3750G(config)#spanning-tree mode rapid-pvst

# Configure VLANs
C3750G(config)#vlan 10
C3750G(config-vlan)#name VLAN10
C3750G(config-vlan)#exit
C3750G(config)#vlan 20
C3750G(config-vlan)#name VLAN20
C3750G(config-vlan)#exit

C3750G(config)#interface vlan 10
C3750G(config-if)#ip address 192.168.10.1 255.255.255.0
C3750G(config-if)#ip helper-address 192.168.0.1
C3750G(config)#interface vlan 20
C3750G(config-if)#ip address 192.168.20.1 255.255.255.0
C3750G(config-if)#ip helper-address 192.168.0.1

# Configure trunk port
C3750G(config)#interface GigabitEthernet 3/0/1
C3750G(config-if)#no switchport
C3750G(config-if)#ip address 192.168.0.2 255.255.255.0
C3750G(config-if)#no shutdown
C3750G(config-if)#speed 1000
C3750G(config-if)#duplex full

# Configure default route.
C3750G(config)#ip route 0.0.0.0 0.0.0.0 GigabitEthernet 3/0/1

# Assign ports to VLANs
C3750G(config)#interface range GigabitEthernet 3/0/2 - 5
C3750G(config-if-range)#switchport access vlan 10
C3750G(config-if-range)#switchport mode access
C3750G(config-if-range)#speed 1000
C3750G(config-if-range)#duplex full
C3750G(config-if-range)#no shut

C3750G(config)#interface range GigabitEthernet 3/0/6 - 12
C3750G(config-if-range)#switchport access vlan 20
C3750G(config-if-range)#switchport mode access
C3750G(config-if-range)#speed 1000
C3750G(config-if-range)#duplex full
C3750G(config-if-range)#no shut</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Network Administration: Update Cisco IOS on C3750G</title>
		<link>https://jameswsullivan.github.io/network-administration-flash-cisco-ios-on-c3750g/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Sun, 18 Jun 2023 00:01:28 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Cisco]]></category>
		<category><![CDATA[Cisco C3750G]]></category>
		<category><![CDATA[Cisco IOS]]></category>
		<category><![CDATA[Network Administration]]></category>
		<category><![CDATA[Networking]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2570</guid>

					<description><![CDATA[Flash Cisco IOS firmware on C3750G switch.]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading">Prerequisites:</h2>



<ul>
<li>Switch Model: WS-C3750G-24PS-S</li>



<li>Old firmware: c3750-advipservicesk9-mz.122-44.SE4.bin</li>



<li>New firmware: c3750-ipservicesk9-mz.150-2.SE11.bin</li>



<li>A TFTP Server at 192.168.0.100 . (I used SolarWinds TFTP Server here.)</li>
</ul>



<p>Related article: <a href="https://jameswsullivan.github.io/network-administration-ssh-connection-errors-when-connecting-to-older-cisco-devices/">Network Administration: SSH connection errors when connecting to older Cisco devices</a></p>



<h2 class="wp-block-heading">IOS Commands:</h2>



<pre class="wp-block-code"><code># Verify current IOS version, view current IOS bin file.
show version
show switch
dir flash:
# Assuming that your switch only have one flash.

# Delete old IOS firmware file.
delete /f /r flash:c3750-advipservicesk9-mz.122-44.SE4.bin

# Copy new IOS firmware from TFTP server.
copy tftp flash
# Follow the prompts and provide server IP and file name.

# Configure and verify boot file.
show boot

config t
boot system switch all flash:/c3750-ipservicesk9-mz.150-2.SE11.bin
exit
show boot

# Apply changes and reload switch.
write memory
reload</code></pre>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
