<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>archive &#8211; howdy</title>
	<atom:link href="https://jameswsullivan.github.io/category/archive/feed/" rel="self" type="application/rss+xml" />
	<link>https://jameswsullivan.github.io/</link>
	<description></description>
	<lastBuildDate>Tue, 22 Aug 2023 15:46:02 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.1</generator>
	<item>
		<title>MediaWiki Initial Config</title>
		<link>https://jameswsullivan.github.io/mediawiki-initial-config/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Sun, 08 Jan 2012 04:57:00 +0000</pubDate>
				<category><![CDATA[archive]]></category>
		<category><![CDATA[DevOps]]></category>
		<category><![CDATA[MediaWiki]]></category>
		<category><![CDATA[php]]></category>
		<category><![CDATA[Software Development]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2688</guid>

					<description><![CDATA[MediaWiki initial config.]]></description>
										<content:encoded><![CDATA[
<p>此文系早年博客的备份，仅用于参考学习。<br>This article is an archival copy of my early years&#8217; blog posts.</p>



<h4 class="wp-block-heading">Enable File Upload Function:</h4>



<p>Edit file <code>LocalSettings.php</code> in the Mediawiki root directory, change <code>$wgEnableUploads</code> to <code>true</code>, then you&#8217;ll see that a <code>Upload File</code> link appear under <code>Toolbox</code> on the sidebar. You also have to change the properties of the default upload directory &#8220;image&#8221; to allow it to be read/write.</p>



<h4 class="wp-block-heading">Edit php.ini file:</h4>



<p>Edit your <code>php.ini</code> file to make sure the file size limit fits your needs. If you have full access to your hosting server, you can just edit it yourself, if not, you can simply ask your technical support to change it for you.</p>



<h4 class="wp-block-heading">Make Mediawiki allow more file extensions:</h4>



<p>Edit <code>includes/DefaultSettings.php</code>, add more file extensions in the array:</p>



<pre class="wp-block-code"><code>$wgFileExtensions = array( 'png', 'gif', 'jpg', 'jpeg','xls' );</code></pre>



<p>Also, change <code>$wgVerifyMimeType= false;</code> to <code>true</code>.</p>



<p></p>



<h4 class="wp-block-heading">Edit sidebar:</h4>



<p>Search for <code>mediawiki:sidebar</code> and edit it.</p>



<h4 class="wp-block-heading">Change mediawiki&#8217;s default logo:</h4>



<p>The logo&#8217;s default file path is at: <code>/skins/common/images/wiki.png</code></p>



<h4 class="wp-block-heading">Limit anonymous users&#8217; rights:</h4>



<p>Change the following configs to <code>false</code>:</p>



<pre class="wp-block-code"><code>$wgGroupPermissions&#91;'<em>']&#91;'createaccount'] = false;</em>
$wgGroupPermissions&#91;'']&#91;'edit'] = false;</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>How to calculate your Internet connection speed and your hard drive capacity</title>
		<link>https://jameswsullivan.github.io/how-to-calculate-your-internet-connection-speed-and-your-hard-drive-capacity/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Thu, 03 Mar 2011 23:31:00 +0000</pubDate>
				<category><![CDATA[archive]]></category>
		<category><![CDATA[DevOps]]></category>
		<category><![CDATA[System Administration]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2685</guid>

					<description><![CDATA[How to calculate your real internet speed and hard drive capacity.]]></description>
										<content:encoded><![CDATA[
<blockquote class="wp-block-quote">
<p>此文系早年博客的备份，仅用于参考学习。<br>This article is an archival copy of my early years&#8217; blog posts.</p>
</blockquote>



<p>I write those two issues here in the same article because they share a similarity, which is the conversion between the units used in computer system. To be specific, it is a matter of converting bit, Byte, KB, MB, GB, etc, to each other. Now let&#8217;s see the problems.</p>



<h2 class="wp-block-heading">Internet Connection Speed</h2>



<p>We often find that the connection speed of our broadband which the service provider tells us is not as fast as we think, for example, we setup a 2M ADSL broadband at home and only find that the maximum download speed is just around 250 KB/s, far less than 2MB.</p>



<p>Before I explain why, I have to say that there is a misunderstanding in this issue, that is, we just take it for granted that the &#8220;2M&#8221; here is equivalent to the &#8220;2MB (2M Byte)&#8221; which we use to describe the size of an ordinary file, such as JPG or DOC.</p>



<p>However, this is not the case here. When it comes to the speed of the broadband, &#8220;2M&#8221; actually means 2M bit/s, not 2M Byte/s. So if you know some essentials of how our computers work, you may already know that the two units are different and it needs a calculation to convert 2M Bit to Byte. Here I give you some information on this and how to calculate it right:</p>



<pre class="wp-block-code"><code>8bit = 1Byte ==> 1024Byte = 1KB ==> 1024KB = 1MB ==> 1024MB = 1GB, and so forth.</code></pre>



<p>so,</p>



<pre class="wp-block-code"><code>2M bit/s = 2,000,000 bit/s = 2,000,000/8 Byte/s = 2,000,000/(8*1024) KB/s = 244.14 KB/s</code></pre>



<p>(This calculation is just theoretically correct, but the real speed will be a little bit faster/slower than the number you calculate.)</p>



<p>So, next time you setup a broadband, you just do the calculation yourself and you&#8217;ll know how fast your broadband is.</p>



<h2 class="wp-block-heading">The real capacity of your Hard Drive</h2>



<p>Similar to the speed of your broadband, the printed capacity of your hard drive is also not the real capacity than you can actually use. The actual capacity will be a little bit less than the printed one.</p>



<p>This is because the manufacturer uses &#8220;1000&#8221; instead of &#8220;1024&#8221; to convert Byte, KB, MB, etc, to each other, which means &#8220;1KB&#8221; here is not &#8220;1024 Byte&#8221; but &#8220;1000 Byte&#8221;. However, our computers still use &#8220;1024&#8221; to calculate the capacity, so the actual capacity you can use need to be re-calculated like this (take a 320G hard drive as an example):</p>



<pre class="wp-block-code"><code>320,000,000,000 Byte = 320,000,000,000 / (1024 * 1024 * 1024) GB = 298.02 GB</code></pre>



<p>So, here you know why your actual hard drive capacity is always less than the one printed outside its cover.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>用Google App Engine部署OPM镜像</title>
		<link>https://jameswsullivan.github.io/deploy-opera-mini-server-mirror-with-google-app-engine/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Tue, 24 Aug 2010 23:20:00 +0000</pubDate>
				<category><![CDATA[archive]]></category>
		<category><![CDATA[DevOps]]></category>
		<category><![CDATA[Google App Engine]]></category>
		<category><![CDATA[Java]]></category>
		<category><![CDATA[Proxy]]></category>
		<category><![CDATA[Software Development]]></category>
		<category><![CDATA[VPN]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2612</guid>

					<description><![CDATA[用Google App Engine部署OPM(Opera Mini Server Mirror)镜像用于翻墙]]></description>
										<content:encoded><![CDATA[
<blockquote class="wp-block-quote">
<p>此文系早年博客的备份，仅用于参考学习。<br>This article is an archival copy of my early years&#8217; blog posts.</p>
</blockquote>



<p>这个教程网上已经有很多了，写在这里一来为了方便大众，二来给自己当作笔记。</p>



<p>下载文后的opm压缩包和 Google App Engine SDK for Java 1.3.5 ，将二者解压至某目录。如，将解压后的java-sdk文件夹命名为sdk放在D盘根目录下，然后将解压后的opm文件夹放入<code>d:\sdk</code>。</p>



<p>用任何文本编辑器打开&nbsp; <code>opm/war/WEB-INF/appengine-web.xml</code>&nbsp; 文件，找到一行<code>your-application-id</code>把<code>your-application-id</code>改成你对应的Google App的名称，修改后保存。</p>



<p>进入命令行（运行cmd）</p>



<p>进入刚才的d:\sdk目录，再cd进入bin目录，在提示符下输入如下命令：</p>



<p><code>appcfg.cmd update d:\sdk\opm\war</code></p>



<p>其中update之后即为刚才的opm文件夹。</p>



<p>接下来会有提示输入Gmail地址和密码，注意，输入密码时屏幕上什么都不提示。</p>



<p>最后，等待上传完成，当出现下面一行提示时则上传成功：<code>Update completed successfully</code></p>



<p>上传好后测试一下，浏览</p>



<pre class="wp-block-code"><code>http:&#47;&#47;your-application-id.appspot.com/opm
http://your-application-id.appspot.com/ucweb</code></pre>



<p>如果跳到Google首页，表示成功了。</p>



<p>接下来若有需要请参照此教程修改Android版的Opera Mini的服务器地址为上面的地址（UCWeb修改方法请自行Google）。</p>



<p>这里下载opm镜像文件包：<a rel="noreferrer noopener" href="https://code.google.com/archive/p/opm-server-mirror/" target="_blank">opm-mirror</a></p>



<p>关键字：用Google app engine搭建opm服务器，用GAE搭建opera mini镜像服务器</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>HTC G3 Hero 5键工程机刷Recovery，Radio和ROM</title>
		<link>https://jameswsullivan.github.io/flash-recovery-radio-and-rom-on-an-htc-g3-hero-5-key-engineering-prototype/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Tue, 24 Aug 2010 03:25:00 +0000</pubDate>
				<category><![CDATA[archive]]></category>
		<category><![CDATA[Android]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[System Administration]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2680</guid>

					<description><![CDATA[HTC G3 Hero - 5键工程机刷Recovery，Radio和ROM.]]></description>
										<content:encoded><![CDATA[
<blockquote class="wp-block-quote">
<p>此文系早年博客的备份，仅用于参考学习。<br>This article is an archival copy of my early years&#8217; blog posts.</p>
</blockquote>



<p>其实这种教程已经遍地都是了，虽然大多数针对的是G3的上市版机型，但是因为5键工程机和上市机的配置基本一样，所以流程也一样。这篇文章是为了帮助群里的两个兄弟刷机。</p>



<p>1 &#8211; 安装Android SDK。不过貌似Android的官网被墙了，而且对于只想刷机的同志们，安装SDK有点儿浪费，所以请点击这里下载这个压缩包，解压到任何一个文件夹即可，我这里以<code>d:\sdk</code>为例。</p>



<p>2 &#8211; <s>到这里</s>下载<code>Recovery-1.6.2</code>，解压出img文件，名字随便命，比如recovery.img，然后将之拷入SD卡。</p>



<p>3 &#8211; <s>到这里</s>下载Radio，下载完后不用解包，直接将zip文件命名为radio.zip，放入SD卡根目录。要想顺便刷ROM的话，也把ROM的zip文件拷贝到SD卡根目录，命名为rom.zip。（名字都是可以随便命的）</p>



<p>4 &#8211; 打开命令行，进入<code>d:\sdk</code>。按下图命令执行：（在执行下述命令前，手机不要处于“装载”状态）</p>



<figure class="wp-block-image size-full"><img fetchpriority="high" decoding="async" width="677" height="442" src="https://jameswsullivan.github.io/wp-content/uploads/2023/08/htc-g3-hero-flashrom-01.png" alt="" class="wp-image-2681" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/08/htc-g3-hero-flashrom-01.png 677w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/htc-g3-hero-flashrom-01-300x196.png 300w" sizes="(max-width: 677px) 100vw, 677px" /></figure>



<p>6 &#8211; 如果上述过程执行无误，关机，按 小房子+开机 键开机，即可进入Recovery界面了。</p>



<p>7 &#8211; 再下一步，无论是刷Radio还是rom，进入recovery后选择<code>Flash zip from sdcard</code>即可，下一个界面里会列出所有的zip文件，所以不必非得命名成<code>update.zip</code>。</p>



<p>8 &#8211; 最后，在5键工程机的recovery界面里，音量键是上下，拨号键是确定；此刷机过程也可以用手机上的超级终端来完成，方法与本文类似，若遇到问题请自行Google。</p>



<p>关键字：HTC G3 Hero 工程机 刷机 刷recovery 刷radio</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>修改Android版Opera Mini的服务器实现翻墙</title>
		<link>https://jameswsullivan.github.io/modify-opera-mini-android-apk-to-use-with-your-own-opm-mirror-on-gae/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Sat, 14 Aug 2010 04:28:00 +0000</pubDate>
				<category><![CDATA[archive]]></category>
		<category><![CDATA[DevOps]]></category>
		<category><![CDATA[Java]]></category>
		<category><![CDATA[Proxy]]></category>
		<category><![CDATA[Software Development]]></category>
		<category><![CDATA[VPN]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2616</guid>

					<description><![CDATA[修改Android版Opera Mini的服务器以实现用自搭建的GAE OPM服务器来翻墙]]></description>
										<content:encoded><![CDATA[
<blockquote class="wp-block-quote">
<p>此文系早年博客的备份，仅用于参考学习。<br>This article is an archival copy of my early years&#8217; blog posts.</p>
</blockquote>



<h2 class="wp-block-heading">修改Android版Opera Mini 4.2:</h2>



<p>注：本文所用文本编辑器为UltraEdit。</p>



<ol>
<li>先此处下载并安装JRE：<br><code>http://www.java.com/en/download/index.jsp<br></code>如果你已经安装了<code>JRE</code>或者<code>JDK</code>，请跳过此步。</li>



<li>点击此处下载我打包的<code>opm4</code>修改包，将其解压至某目录，这里以D盘根目录为例，解压后的目录为：<code>D:\opm4</code>。</li>



<li>用文本编辑器打开<code>D:\opm4\opm\Code.smali</code>，将 <code>http://server4.operamini.com:80/</code> 和 <code>socket://server4.operamini.com:1080</code> 都改成你自己架设的OPM服务器地址，<a href="https://jameswsullivan.github.io/deploy-opera-mini-server-mirror-with-google-app-engine/">如这篇文章介绍的利用GAE搭建的Opera Mini服务器地址</a>。修改后保存。（用UltraEdit编辑的话，保存后删除自动生成的bak文件，否则一会儿影响编译）</li>



<li>打开命令行<code>cmd</code>，进入<code>D:\opm4</code>，执行如下命令：<code>java -jar smali.jar -o D:\opm4\classes.dex D:\opm4\opm</code>（此行命令的意思是将<code>opm</code>文件夹打包成<code>classes.dex</code>文件）</li>
</ol>



<ol start="5">
<li>到此处下载Android版OPM的安装包：<br><code>http://opm-server-mirror.googlecode.com/files/opm4.apk<br></code>下载后放入<code>opm4</code>文件夹。</li>



<li>将<code>opm4.apk</code>改名为<code>opm4.zip</code>，用任意压缩工具打开（是打开，不是解包），删除里面的<code>META-INF</code>文件夹，并把刚刚生成好的 <code>D:\opm4\classes.dex</code> 拖进<code>opm4.zip</code>替换掉原始的<code>classes.dex</code>。</li>



<li>把修改过的<code>opm4.zip</code>放入修改包中的<code>Auto-Sign</code>的目录下，运行里面的<code>sign.bat</code>。</li>



<li>如果你在<code>Auto-Sign</code>的目录里面看见<code>your_app_signed.apk</code>的话，则证明已经修改工作已经完成了。在手机中安装前记得卸载先前的版本。</li>



<li>若修改包中有文件出现异样，请到如下网址下载：<br>下载smali： <code>http://smali.googlecode.com/files/smali.jar</code><br>下载反编译过的的Android版OPM源代码： <code>http://opm-server-mirror.googlecode.com/files/android_opera_classes.zip</code></li>
</ol>



<h2 class="wp-block-heading">修改Android版Opera mini 5.1：</h2>



<ol>
<li>点击这里下载修改包，解压至某目录，这里以<code>D:\opm5</code>为例。</li>



<li>打开命令行<code>cmd</code>，进入<code>D:\opm5</code>，执行<code>apktool d opera-mini-51.apk opm</code>（此命令意思是将你的<code>apk</code>文件解包到<code>opm</code>目录下，<code>apk</code>文件名和<code>opm</code>目录名是随意的）</li>
</ol>



<ol start="3">
<li>用文本编辑工具修改修改 <code>opm\smali\f.smali</code> 中的<br><code>http://mini5.opera-mini.net:80/<br>socket://mini5.opera-mini.net:1080</code></li>



<li>为自己搭建的Opera mini服务器地址，比如这里所示的用GAE搭建的镜像服务器。修改后保存。若用UltraEdit编辑，同样请删掉生成的<code>bak</code>文件。再在同目录下运行：<code>apktool b opm opm51.apk</code>（此命令意思是将<code>opm</code>文件夹打包成<code>opm51.apk</code>文件，同样，目录名和文件名可以随意）</li>
</ol>



<ol start="5">
<li>将得到的<code>opm51.apk</code>重命名为<code>opm51.zip</code>，并拖放到<code>Auto-Sign</code>文件夹内，运行<code>sign.bat</code>来签名，得到<code>your_app_signed.apk</code>，即可以拷入手机安装了。</li>
</ol>



<p></p>



<p>关键字：自定义Android版opera mini服务器，android版opera mini翻墙，自定义安卓版opera mini服务器，安卓版opera mini翻墙</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>制作了一个建筑平面图</title>
		<link>https://jameswsullivan.github.io/drafting-house-layout-with-autocad/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Fri, 13 Aug 2010 04:15:00 +0000</pubDate>
				<category><![CDATA[archive]]></category>
		<category><![CDATA[AutoCAD]]></category>
		<category><![CDATA[CAD]]></category>
		<category><![CDATA[Drafting]]></category>
		<category><![CDATA[Engineering]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2774</guid>

					<description><![CDATA[用AutoCAD制作建筑平面图。]]></description>
										<content:encoded><![CDATA[
<blockquote class="wp-block-quote">
<p>此文系早年博客的备份，仅用于参考学习。<br>This article is an archival copy of my early years&#8217; blog posts.</p>
</blockquote>



<p>由于所学专业在将来不可避免的要用到AutoCAD建模，所以利用假期时间做几个实例练练手，这是第一个工程——建筑平面图。下一个工程是绘制机械图。</p>



<figure class="wp-block-image size-large"><img decoding="async" width="1024" height="724" src="https://jameswsullivan.github.io/wp-content/uploads/2023/08/house-layout-autocad-01-1024x724.png" alt="" class="wp-image-2776" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/08/house-layout-autocad-01-1024x724.png 1024w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/house-layout-autocad-01-300x212.png 300w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/house-layout-autocad-01-768x543.png 768w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/house-layout-autocad-01-1536x1086.png 1536w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/house-layout-autocad-01-2048x1448.png 2048w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/house-layout-autocad-01-700x495.png 700w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<figure class="wp-block-image size-large"><img decoding="async" width="1024" height="724" src="https://jameswsullivan.github.io/wp-content/uploads/2023/08/house-layout-autocad-02-1024x724.png" alt="" class="wp-image-2777" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/08/house-layout-autocad-02-1024x724.png 1024w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/house-layout-autocad-02-300x212.png 300w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/house-layout-autocad-02-768x543.png 768w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/house-layout-autocad-02-1536x1086.png 1536w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/house-layout-autocad-02-2048x1448.png 2048w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/house-layout-autocad-02-700x495.png 700w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h4 class="wp-block-heading">后记：</h4>



<p>在生成A4纸最终图像的时候，怎样将背景色打印为黑色的问题困扰了我很长时间，其间试过改变编辑界面背景色，用黑色方框衬托图形等方法均不奏效，最后在使用PS将生成的白色背景的图片进行“反向”操作时想到，何不在编辑时先将个图层对应的颜色设置为执行白 &#8212; 黑反向操作后所对应的颜色，再将生成的白色背景的图片执行反向操作，不就得到了我们最初所希望的黑色背景和图形颜色了么。</p>



<p>AutoCAD可以直接输出图纸，但是我在本地操作，就将其打印为Adobe PDF格式了，要想得到图片文件，只需在Adobe PDF里导出为图片格式即可。</p>



<p>关键字：AutoCAD建筑平面图，AutoCAD黑色背景建筑平面图</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Dell Latitude D830拆机清灰</title>
		<link>https://jameswsullivan.github.io/dell-latitude-d830-teardown-and-cleaning/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Mon, 09 Aug 2010 03:41:00 +0000</pubDate>
				<category><![CDATA[archive]]></category>
		<category><![CDATA[Repair]]></category>
		<category><![CDATA[Teardown]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2665</guid>

					<description><![CDATA[Dell Latitude D830拆机清灰。]]></description>
										<content:encoded><![CDATA[
<blockquote class="wp-block-quote">
<p>此文系早年博客的备份，仅用于参考学习。<br>This article is an archival copy of my early years&#8217; blog posts.</p>
</blockquote>



<p>我的D830散热不良已经有好长一段时间了，每次若不加散热器使用一个小时左右，风扇便全功率运行，而机器底面依旧烫手。早先一直想拆机清理下，一来没时间，二来本子没过保修期不敢乱拆，现在机子已经过保，假期也正好有时间，就大干一场了。</p>



<p>因为没有摄像机，所以我只在这里简单叙述一下拆机过程，再附上几个我拆机过程中用以记录接线位置的照片。</p>



<ol>
<li>用起子（我直接用的螺丝刀）从电源、硬盘、Wi-Fi指示灯旁的缺口处开始，起下这一排按钮和指示灯的面板。</li>



<li>卸下左中右三颗固定键盘的螺丝，注意键盘左右两侧靠近音箱的地方有卡扣，用起子轻轻别一下将键盘掀起，注意键盘底部有排线，将排线插头从主板上垂直拔起，取下键盘。</li>



<li>拔下显示器与主板的两根连接线，其中有两根线与Wi-Fi卡相连，可以直接将卡拔下，拔时注意Wi-Fi卡后方有两个小的金属卡扣。然后即可将屏幕整个取下。</li>



<li>拧下固定机壳的螺丝，正面有三四个螺丝，底面有N个螺丝，全都拧下后即可掀起正面的机壳。同样，四周都有卡扣，用起子轻轻掀起，并注意触摸板的连线，最后将机壳向左方抽拉一下即可取下（右侧音箱处有两个横向卡扣）。</li>



<li>此时风扇和散热片已经一目了然了，拧下相应的螺丝即可取下风扇和散热片进行清理了。这里需要注意，CPU和显卡芯片与散热片的接触面均涂有导热硅脂，若之前的硅脂已经完全硬化，不妨将其取下，将散热片与芯片擦净（注意不要划伤芯片），在装回散热片时再均匀涂上新的导热硅脂即可。若对于导热硅脂方面的问题有疑问，请自行Google，已经有很多现成的教程了。</li>
</ol>



<p>下面是一些图片，和我拆机过程中借鉴的D630拆机清灰的视频。</p>



<p>Dell Latitude D630拆机清灰视频：</p>



<ul>
<li>http://v.youku.com/v_show/id_XMTI1Mzc4Mzgw.html</li>



<li>http://v.youku.com/v_show/id_XMTcyNzkwMDEy.html</li>
</ul>



<figure class="wp-block-gallery has-nested-images columns-4 is-cropped wp-block-gallery-1 is-layout-flex wp-block-gallery-is-layout-flex">
<figure class="wp-block-image size-full"><a href="https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-01.jpg"><img loading="lazy" decoding="async" width="2560" height="1712" data-id="2666" src="https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-01.jpg" alt="" class="wp-image-2666" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-01.jpg 2560w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-01-300x201.jpg 300w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-01-1024x685.jpg 1024w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-01-768x514.jpg 768w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-01-1536x1027.jpg 1536w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-01-2048x1370.jpg 2048w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-01-450x300.jpg 450w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-01-700x468.jpg 700w" sizes="(max-width: 2560px) 100vw, 2560px" /></a></figure>



<figure class="wp-block-image size-full"><a href="https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-02.jpg"><img loading="lazy" decoding="async" width="2560" height="1712" data-id="2667" src="https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-02.jpg" alt="" class="wp-image-2667" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-02.jpg 2560w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-02-300x201.jpg 300w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-02-1024x685.jpg 1024w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-02-768x514.jpg 768w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-02-1536x1027.jpg 1536w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-02-2048x1370.jpg 2048w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-02-450x300.jpg 450w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-02-700x468.jpg 700w" sizes="(max-width: 2560px) 100vw, 2560px" /></a></figure>



<figure class="wp-block-image size-full"><a href="https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-03.jpg"><img loading="lazy" decoding="async" width="1712" height="2560" data-id="2669" src="https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-03.jpg" alt="" class="wp-image-2669" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-03.jpg 1712w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-03-201x300.jpg 201w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-03-685x1024.jpg 685w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-03-768x1148.jpg 768w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-03-1027x1536.jpg 1027w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-03-1370x2048.jpg 1370w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-03-401x600.jpg 401w" sizes="(max-width: 1712px) 100vw, 1712px" /></a></figure>



<figure class="wp-block-image size-full"><a href="https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-04.jpg"><img loading="lazy" decoding="async" width="2560" height="1712" data-id="2670" src="https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-04.jpg" alt="" class="wp-image-2670" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-04.jpg 2560w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-04-300x201.jpg 300w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-04-1024x685.jpg 1024w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-04-768x514.jpg 768w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-04-1536x1027.jpg 1536w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-04-2048x1370.jpg 2048w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-04-450x300.jpg 450w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-04-700x468.jpg 700w" sizes="(max-width: 2560px) 100vw, 2560px" /></a></figure>



<figure class="wp-block-image size-full"><a href="https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-05.jpg"><img loading="lazy" decoding="async" width="1712" height="2560" data-id="2668" src="https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-05.jpg" alt="" class="wp-image-2668" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-05.jpg 1712w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-05-201x300.jpg 201w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-05-685x1024.jpg 685w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-05-768x1148.jpg 768w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-05-1027x1536.jpg 1027w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-05-1370x2048.jpg 1370w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-05-401x600.jpg 401w" sizes="(max-width: 1712px) 100vw, 1712px" /></a></figure>



<figure class="wp-block-image size-full"><a href="https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-06.jpg"><img loading="lazy" decoding="async" width="2560" height="1712" data-id="2671" src="https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-06.jpg" alt="" class="wp-image-2671" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-06.jpg 2560w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-06-300x201.jpg 300w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-06-1024x685.jpg 1024w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-06-768x514.jpg 768w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-06-1536x1027.jpg 1536w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-06-2048x1370.jpg 2048w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-06-450x300.jpg 450w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-06-700x468.jpg 700w" sizes="(max-width: 2560px) 100vw, 2560px" /></a></figure>



<figure class="wp-block-image size-full"><a href="https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-07.jpg"><img loading="lazy" decoding="async" width="2560" height="1712" data-id="2673" src="https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-07.jpg" alt="" class="wp-image-2673" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-07.jpg 2560w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-07-300x201.jpg 300w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-07-1024x685.jpg 1024w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-07-768x514.jpg 768w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-07-1536x1027.jpg 1536w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-07-2048x1370.jpg 2048w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-07-450x300.jpg 450w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-07-700x468.jpg 700w" sizes="(max-width: 2560px) 100vw, 2560px" /></a></figure>



<figure class="wp-block-image size-full"><a href="https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-08.jpg"><img loading="lazy" decoding="async" width="2560" height="1712" data-id="2672" src="https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-08.jpg" alt="" class="wp-image-2672" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-08.jpg 2560w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-08-300x201.jpg 300w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-08-1024x685.jpg 1024w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-08-768x514.jpg 768w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-08-1536x1027.jpg 1536w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-08-2048x1370.jpg 2048w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-08-450x300.jpg 450w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-08-700x468.jpg 700w" sizes="(max-width: 2560px) 100vw, 2560px" /></a></figure>



<figure class="wp-block-image size-full"><a href="https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-09.jpg"><img loading="lazy" decoding="async" width="1712" height="2560" data-id="2674" src="https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-09.jpg" alt="" class="wp-image-2674" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-09.jpg 1712w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-09-201x300.jpg 201w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-09-685x1024.jpg 685w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-09-768x1148.jpg 768w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-09-1027x1536.jpg 1027w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-09-1370x2048.jpg 1370w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-09-401x600.jpg 401w" sizes="(max-width: 1712px) 100vw, 1712px" /></a></figure>



<figure class="wp-block-image size-full"><a href="https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-10.jpg"><img loading="lazy" decoding="async" width="1712" height="2560" data-id="2675" src="https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-10.jpg" alt="" class="wp-image-2675" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-10.jpg 1712w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-10-201x300.jpg 201w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-10-685x1024.jpg 685w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-10-768x1148.jpg 768w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-10-1027x1536.jpg 1027w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-10-1370x2048.jpg 1370w, https://jameswsullivan.github.io/wp-content/uploads/2023/08/d830-teardown-10-401x600.jpg 401w" sizes="(max-width: 1712px) 100vw, 1712px" /></a></figure>
</figure>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Windows7引导修复</title>
		<link>https://jameswsullivan.github.io/windows-7-boot-repair/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Wed, 04 Aug 2010 00:57:00 +0000</pubDate>
				<category><![CDATA[archive]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2662</guid>

					<description><![CDATA[Windows 7引导修复。]]></description>
										<content:encoded><![CDATA[
<blockquote class="wp-block-quote">
<p>此文系早年博客的备份，仅用于参考学习。<br>This article is an archival copy of my early years&#8217; blog posts.</p>
</blockquote>



<p>其实这已经不是一个什么新问题了，之前也遇到过，只不过为了省时间，直接Ghost恢复系统 了。这次则不然，一开始打算安装Windows7 + Android X86 + Ubuntu Netbook Edition三系统，所以调整了系统分区，结果后来发现Android X86对于1024×600的分辨率不能默认支持，而修正这个问题又比较费时费力（主要是我根本不会Android编程-_-!!），所以最终再次调整分区，只安装Ubuntu和Win7。可是，由于Win7PE启动U盘中的分区工具不太好，导致首次分区失败，待二次分区修复问题之后，用Ghost将 Win7恢复至新分的C盘后出现系统无法引导的状况，开机提示<code>Error 15</code>。而这次如果再全新安装Win7纯属舍近求远，于是Google了一下修复Windows7引导的相关内容，将三个命令记录如下（注意空格）：（其实对于这三个命令，还有很多其他的参数可用，熟练的兄弟们直接参看help，或者自行Google即可，我只记录这三个命令的最常用形式）：</p>



<pre class="wp-block-code"><code>bootrec /fixmbr<br>bootsect /nt60 sys /mbr<br>bcdboot c:\windows /s c:</code></pre>



<p>其中这三个命令对应的可执行文件可以从Windows7的安装光盘中得到，若使用Win7PE的话，通常其PE启动U盘内会自带。</p>



<p><br>关键字：Windows 7 引导修复，Windows7开机错误Error 15，Windows7启动修复</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>在Latitude 2100上安装Ubuntu Netbook 10.04</title>
		<link>https://jameswsullivan.github.io/install-ubuntu-netbook-10-04-on-latitude-2100/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Tue, 03 Aug 2010 03:28:00 +0000</pubDate>
				<category><![CDATA[archive]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[System Administration]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2658</guid>

					<description><![CDATA[在Dell Latitude 2100上安装Ubuntu Netbook 10.04.]]></description>
										<content:encoded><![CDATA[
<blockquote class="wp-block-quote">
<p>此文系早年博客的备份，仅用于参考学习。<br>This article is an archival copy of my early years&#8217; blog posts.</p>
</blockquote>



<p>最近刚在Latitude 2100上安装了Ubuntu Netbook版本，打算继续研究一下它。鉴于我也是新手，有关Ubuntu的技巧啊经验啊我都说不上，这里简单记录一下安装过程：</p>



<h4 class="wp-block-heading">分区：</h4>



<ul>
<li>/: 10G ext4</li>



<li>Swap: 1G</li>



<li>/home: 10G ext4</li>
</ul>



<h4 class="wp-block-heading">U盘安装：</h4>



<p>官网对U盘安装Ubuntu有一个教程，当中需要下载一个Usb-Installer，然后通过它来写入镜像。但是不知是我的U盘有问题，还是运行过程的问题，我用它来写入之后的U盘尽管能在Windows下顺利读取和安装，但却并不能进行USB引导启动。根据以前的经验，这通常是由于U盘的存储方式不同引起的无法启动，所以后来我直接用UltraISO将镜像以USB-HDD+方式写入U盘，则可以顺利从U盘引导。</p>



<h4 class="wp-block-heading">无线网卡驱动：</h4>



<p>刚装完的系统启动后，除了无线网卡之外的硬件都能被准确识别，唯独无线网卡驱动不可用。后来查询了ubuntuforum，里面有人和我遇到相同的问题，解决方法是：</p>



<p>先用网线联网，然后它会自动搜索各种更新，若没有运行驱动更新，执行以下步骤（我的系统是英文版，中文版请自行对应翻译）：<code>System -- Administration -- Hardware Drivers</code></p>



<p>然后它会自动查询硬件驱动更新，略等片刻，可能会比较慢，完毕后会出现两个安装驱动的选项：</p>



<ul>
<li>Broadcom B43 wireless driver(free)</li>



<li>Broadcom STA wireless driver(proprietary)</li>
</ul>



<p>我不知道二者有什么区别，我用的是下面的，点击Activate，等待安装完毕，问题解决。如果无线依旧不可用的话尝试重启。</p>



<h4 class="wp-block-heading">触摸屏：</h4>



<p>现在在Latitude 2100上安装Ubuntu 10.04遇到的唯一一个问题是触摸屏无法同Windows下一样进行校准，虽然它是可用的，并且在Dell官网上也提供了针对Ubuntu9.04的驱动，但是安装并执行校正操作后依然无果，出现的问题是点击不准及无法点击屏幕四周靠近边缘的区域。</p>



<p>参考文章：http://ubuntuforums.org/showthread.php?t=1343414</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>在HTC G3 Hero上配置OpenVPN</title>
		<link>https://jameswsullivan.github.io/configure-openvpn-on-htc-g3-hero/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Mon, 02 Aug 2010 19:44:00 +0000</pubDate>
				<category><![CDATA[archive]]></category>
		<category><![CDATA[Android]]></category>
		<category><![CDATA[DevOps]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[OpenVPN]]></category>
		<category><![CDATA[Proxy]]></category>
		<category><![CDATA[Software Development]]></category>
		<category><![CDATA[System Administration]]></category>
		<category><![CDATA[VPN]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2651</guid>

					<description><![CDATA[在HTC G3 Hero工程样机上配置OpenVPN。]]></description>
										<content:encoded><![CDATA[
<blockquote class="wp-block-quote">
<p>此文系早年博客的备份，仅用于参考学习。<br>This article is an archival copy of my early years&#8217; blog posts.</p>
</blockquote>



<p>前阵子从<a href="http://shop62214290.taobao.com/?asker=wangwang">小毛球</a>手里买到了一个HTC G3 Hero的工程样机，此机器与<a href="http://detail.zol.com.cn/191/190896/param.shtml">零售版的Hero</a>略有不同，它没有轨迹球，ROM和RAM的容量也比零售版要小，并且只支持Android1.5版的ROM，俗称“5键版”（还有一种工程机为3键版）。</p>



<p>好了，回归正题。我的设备，只要是能联网的，都免不了要为其添加翻墙的功能。起初在网上看到很多朋友是下载了各种必须的文件之后，通过命令行一步步 手动执行的，可是我执行了多次都没能奏效，可能是手机系统的个体差异，再加上我对Android命令行操作也不太了解，所以最总没有成功。后来搜到一个可 以直接通过软件安装的方法，再借助<a href="http://forum.xda-developers.com/">xda-developers</a>论坛和<a href="http://code.google.com/p/android-openvpn-installer/">android-openvpn-installer</a>项目里外国大牛们的指点，最后成功解决，下面是详细的步骤：</p>



<ul>
<li>我的ROM版本是：3.2-update-hero-modacocustomrom-core-signed.zip （1.5固件）</li>



<li>Recovery 版本是： Recovery-RA-hero-v1.6.2-blue</li>
</ul>



<p>1 &#8211; 你需要有一个Google账户，用来登录Android Market。</p>



<p>2 &#8211; 在Market里面搜索<code>OpenVPN</code>，找到<code>OpenVPN Installer</code>和<code>OpenVPN Settings</code>，安装之（最好是用WiFi来装，快，省流量）。</p>



<p>3 &#8211; 安装完毕后，运行<code>OpenVPN Installer</code>，在第一个画面选择Install ，路径选择<code>/system/bin/</code>，下一个弹出界面，路径选择<code>/system/xbin/bb</code>。</p>



<p>4 &#8211; 将手机用USB连接电脑（G3 Hero用USB连接如果出现问题，通常插上USB线再重启即可，若还有其它问题，请自行Google解决），打开提示栏，选择“装载”。</p>



<p>5 &#8211; 在SD卡根目录创建<code>openvpn</code>文件夹，拷入<code>OpenVPN</code>的四个必须的文件（通常收费的VPN会有两个<code>.crt</code>，一个<code>.key</code>，一个<code>.ovpn</code>）。</p>



<p>6 &#8211; 若你的电脑上还没有Android SDK，<s>下载下面的压缩包</s>，将<code>adb.exe</code>和<code>AdbWinApi.dll</code>放入<code>c:\Windows\system32\</code>下，然后用<code>Win+R</code>组合键打开运行<code>cmd</code>打开命令行，便可执行下述命令。</p>



<p>7 &#8211; 下述命令比较重要，与网上多数版本命令略有不同，请根据自己的情况仔细输入：</p>



<pre class="wp-block-code"><code>确保手机连接正常，并且最好不处于“装载”状态，输入（注意空格）

adb remount
adb shell mkdir /system/xbin/bb
adb shell ln -s /system/xbin/ifconfig /system/xbin/bb/ifconfig
adb shell ln -s /system/xbin/route /system/xbin/bb/route</code></pre>



<p>8 &#8211; 然后，运行 adb shell 命令，在 # 提示符下，输入cd /sdcard/openvpn/进入SD卡中存有OpenVPN文件的目录，再执行openvpn –config xxxx.ovpn以测试连接是否成功。此过程必须保证你的手机联网正常（我测试过WiFi，GPRS和3G我没测试，但应该好用），其中xxxx为你的.ovpn文件名。</p>



<p>如果最终出现<code>Initialization Sequence Completed</code>则表明连接成功，以后的操作即可直接在OpenVPN Settings中连接了。</p>



<p>9 &#8211; 如果出现错误<code>Linux ifconfig failed: could not execute external program</code>，在其他步骤都执行正确的情况下，通常是ifconfig和route的路径问题，请参照第7步自行修改。当然，ifconfig的路径可以通过命令which来查看，我的路径如下：</p>



<pre class="wp-block-code"><code>D:\android&gt;adb shell
# which ifconfig
which ifconfig
/system/xbin/ifconfig
#</code></pre>



<p>所以第7步所对应的路径便如上所示。我不知道是不是在所有的Android手机中路径都如此，大家在使用的时候根据自己的情况更改第7步中后两个命令的第一个路径即可，第二个路径<code>/system/xbin/bb/ifconfig</code>和<code>/system/xbin/bb/route</code>）应该都是相同的，因为<code>OpenVPN Installer</code>就是这么安装的。</p>



<p>10 &#8211; 最后，再说说<code>OpenVPN Settings</code>。如果初次运行<code>OpenVPN Settings</code>时在主界面看不到你的<code>.ovpn</code>文件名，一般重启后即可解决。另外，如果有连接不上的问题，可能属于DNS污染，需要做如下操作：<br><code>MENU键 –&nbsp; Fix DNS &nbsp;–&nbsp; Reset DNS</code>，等一会儿，如果弹出需要root权限则点击Allow，完成后它会自动将DNS设置为8.8.8.8，再次打开Fix DNS即可看见Current DNS已经被修改。最后，相继勾选OpenVPN和你的.ovpn文件名，等待一会儿之后应该就会提示链接成功了，在你的<code>.ovpn</code>下面显示<code>connected to xx.xx.xx.xx as xx.xx.xx.xx</code>。<br>&nbsp;<br>补充：要想成功配置OpenVPN，还跟一个名叫<code>tun.ko</code>的底层驱动有关，我之前刷的一个ROM需要手动安装驱动，而这个驱动似乎又有版本之 分，或者跟ROM的版本相关，我弄不太明白，也没弄成功。另外还需要安装<code>busybox</code>，我起初也弄得不明不白，当然，还有手机取得ROOT权限等等琐碎的问题。所以我推荐大家如果希望避免后期的麻烦，在前期刷ROM的阶段，不妨参照下ROM发布者提供的reference，找一个已经安装好<code>tun.ko</code>和<code>busybox</code>的ROM，并且参照论坛里的刷机和ROOT教程，将自己的手机配置好，这样能给后期的操作省很多力气。</p>



<p>注：由于我自己的工程机只能支持1.5的ROM版本，其它版本我也无从测试，所以使用其他版本的系统的朋友请自行“随机应变”。若在操作过程中遇到什么问题，或者我有哪一步写的有问题，欢迎留言讨论。以下是操作过程中可能用到的文件打包：<br><s>工具包：HTC-Hero-Package<br>ROM:&nbsp; Modaco 3.2</s><br>&nbsp;<br>参考资料：<br>中文：<br>http://14551.org/2010/05/g3-connect-to-openvpn.html<br>http://www.hiapk.com/bbs/thread-214667-1-1.html<br>http://bbs.gfan.com/android-39617-1-1.html<br>http://www.xinlogs.com/HTC-Hero-Openvpn/<br>英文：<br>http://code.google.com/p/android-openvpn-installer/issues/detail?id=2<br>http://forum.xda-developers.com/showpost.php?p=7132889&amp;postcount=56<br>&nbsp;<br>关键字：Android手机配置OpenVPN，HTC手机安装OpenVPN，HTC G3 Hero安装OpenVPN</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
