<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Ubuntu &#8211; howdy</title>
	<atom:link href="https://jameswsullivan.github.io/tag/ubuntu/feed/" rel="self" type="application/rss+xml" />
	<link>https://jameswsullivan.github.io/</link>
	<description></description>
	<lastBuildDate>Fri, 29 Dec 2023 21:00:18 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.2</generator>
	<item>
		<title>Linux Administration: Expand LVM</title>
		<link>https://jameswsullivan.github.io/linux-administration-expand-lvm/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Sat, 05 Aug 2023 16:06:41 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Docker]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[System Administration]]></category>
		<category><![CDATA[Ubuntu]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2710</guid>

					<description><![CDATA[Expand LVM in Ubuntu 22.04 LTS.]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading">Background:</h2>



<p>This Ubuntu server (Hyper-V VM) in question is a Docker host that was partitioned using the default layout (50/50 split of available disk space) when Ubuntu was installed. After a few month one of the logic volumes <code>/dev/mapper/ubuntu--vg-ubuntu--lv</code> ran out of space. Since there is no GUI for partition management, a few steps will be needed to properly expand the volume size.</p>



<p>Related article:</p>



<ul>
<li><a href="https://jameswsullivan.github.io/linux-administration-install-docker-on-ubuntu-server-and-mount-disks/">Linux Administration: Install Docker on Ubuntu Server and mount disks</a></li>
</ul>



<h2 class="wp-block-heading">Solution:</h2>



<p>1. Expand the virtual disk size in Hyper-V manager.</p>



<p>2. On the Ubuntu server, use <code>fdisk -l</code> to identify the disk and <code>df -h</code> to check the disk usage, here we use <code>/dev/sdf</code> (disk) and <code>/dev/mapper/ubuntu--vg-ubuntu--lv</code> (logic volume) as an example.</p>



<p>3. Run <code>parted /dev/sdf print</code> to view partition layout. You&#8217;ll probably get a warning message like the following. Which one you choose doesn&#8217;t really matter because we&#8217;ll be doing the process manually.</p>



<pre class="wp-block-code"><code>Warning: Not all of the space available to /dev/sdf appears to be used, you can fix the GPT to use all of the space (an extra ______ blocks) or continue with the current setting?
Fix/Ignore?</code></pre>



<p>4. After you see the list of partitions, run this command on the partition that you need to expand to resize the partition to use the additional space, here we use partition 3 as an example: <code>parted /dev/sdf resizepart 3 100%</code></p>



<p>5. Resize the Physical Volume using command: <code>pvresize /dev/sdf3</code></p>



<p>6. Now that if you run <code>vgdisplay</code> , you should see the free space listed under <code>Free PE / Size</code>. And make sure you have your volume group name <code>ubuntu-vg</code> ready.</p>



<p>7. Run <code>lvdisplay</code> to identify the logical volume we need to expand, as we discussed above, the one needs expanding is the <code>/dev/ubuntu-vg/ubuntu-lv</code> volume.</p>



<p>8. Run <code>lvextend -l +100%FREE -r /dev/ubuntu-vg/ubuntu-lv</code> to expand the volume.</p>



<p>9. Now run <code>vgdisplay</code> , <code>lvdisplay</code>, and <code>df -h</code> again to verify that the <code>/dev/mapper/ubuntu--vg-ubuntu--lv</code> volume has been successfully expanded. Reboot the system if needed.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Linux Administration: Install Docker on Ubuntu Server and mount disks</title>
		<link>https://jameswsullivan.github.io/linux-administration-install-docker-on-ubuntu-server-and-mount-disks/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Tue, 11 Apr 2023 02:19:44 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Docker]]></category>
		<category><![CDATA[Hosting]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[Self-Hosting]]></category>
		<category><![CDATA[System Administration]]></category>
		<category><![CDATA[Ubuntu]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2307</guid>

					<description><![CDATA[Install Docker on a Ubuntu Server, attach disks to the Docker host VM and configure mounts.]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading">Environment:</h2>



<ul>
<li>Windows Server 2019 with Hyper-V for running VMs.</li>



<li>Ubuntu Server 20.04.3 LTS.</li>



<li>Physical or virtual disks that you want to mount to the Ubuntu Server.</li>
</ul>



<h2 class="wp-block-heading">Configurations:</h2>



<h2 class="wp-block-heading">Install Docker:</h2>



<blockquote class="wp-block-quote">
<p>Related article: <a href="https://jameswsullivan.github.io/linux-administration-install-docker-on-ubuntu-server/">Linux Administration: Install Docker on Ubuntu Server</a></p>
</blockquote>



<p>First, if you have installed Docker or any packages along during the installation process of the Ubuntu Server OS, they&#8217;re likely installed using <code>snap</code>. There is nothing wrong with using snap, but most of the directory paths will be different and it makes it harder to tweak certain configs in the future, so it&#8217;s recommended to remove them before the rest of the steps.</p>



<pre class="wp-block-code"><code># Remove docker that was installed via snap:

snap remove docker
reboot 

# NOTE: A reboot is needed after uninstallation, otherwise you'll get a "bash: /snap/bin/docker: No such file or directory" error.</code></pre>



<p>Install Docker using <code>apt-get</code> :</p>



<pre class="wp-block-code"><code># Install using the apt repository:
# https://docs.docker.com/engine/install/ubuntu/

apt-get update -y
apt-get upgrade -y
apt-get install ca-certificates curl gnupg lsb-release -y

mkdir -m 0755 -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg \
    | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

echo "deb &#91;arch=$(dpkg --print-architecture) \
    signed-by=/etc/apt/keyrings/docker.gpg] \
    https://download.docker.com/linux/ubuntu \
    $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

apt-get update -y
apt-get upgrade -y
apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

# After installing docker-ce, other dependencies are usually automatically installed.

# OPTIONAL: List and verify installed packages.

apt list --installed</code></pre>



<h2 class="wp-block-heading">Mount disks:</h2>



<p>It&#8217;s recommended to mount the physical or virtual disks one by one to the Docker host VM so that it&#8217;s easier to identify the disks by their UUID and get the mounts configured correctly one at a time, especially when you have multiple disks of the same size (because the devices are usually not attached in order when booting/rebooting).</p>



<pre class="wp-block-code"><code># List devices:

fdisk -l


# Cross reference with:

blkid
blkid | grep /dev/sd


# Use lsscsi if needed:

apt-get install lsscsi -y


# Create partition:

gdisk /dev/sda

# Enter ? for help. Enter n and accept all default parameters to use the entire disk capacity.
# Enter w to write changes to disk.


# Format disk to ext4 file system.

mkfs.ext4 /dev/sda


# Then run:

fdisk -l
blkid | grep /dev/sd

# again to grab the device name and UUID.


# Create mount locations:

mkdir /mnt/directory_name
mount /dev/sda /mnt/directory_name


# Copy the UUID and add entries in /etc/fstab to configure mounts at boot time.

nano /etc/fstab


# Add entries, e.g., mount 100GB to /mnt/my_folder:

UUID="dcd8c5ac-db76-435e-ab3c-48570190c7d8" /mnt/my_folder ext4 defaults 0 1


# Verify the mounts after a reboot.</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Self-host Nextcloud – Part 4 – Use Docker</title>
		<link>https://jameswsullivan.github.io/self-host-nextcloud-part-4-use-docker/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Tue, 11 Apr 2023 01:24:00 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Docker]]></category>
		<category><![CDATA[Hosting]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[Nextcloud]]></category>
		<category><![CDATA[Self-Hosting]]></category>
		<category><![CDATA[Ubuntu]]></category>
		<category><![CDATA[Web Hosting]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2303</guid>

					<description><![CDATA[Spin up self-hosted Nextcloud with MySQL using Docker.]]></description>
										<content:encoded><![CDATA[
<p>My previous attempt with self-hosting Nextcloud involved using VMs and a lot of manual installation and configurations, it works fine but: 1. its virtual disks were not configured in a way that&#8217;s easily expandable as data grows; 2. the entire setup is not very portable and convenient to manage and update. Using Docker effectively solves the issues.</p>



<p>Related articles:</p>



<ul>
<li><a href="https://jameswsullivan.github.io/self-host-nextcloud-part-1-installation/">Self-host Nextcloud – Part 1 – Installation</a></li>



<li><a href="https://jameswsullivan.github.io/self-host-nextcloud-part-2-self-signed-ssl-certificate/">Self-host Nextcloud – Part 2 – Self-signed SSL Certificate</a></li>



<li><a href="https://jameswsullivan.github.io/self-host-nextcloud-part-3-performance/">Self-host Nextcloud – Part 3 – Performance</a></li>



<li><a href="https://jameswsullivan.github.io/linux-administration-install-docker-on-ubuntu-server/">Linux Administration: Install Docker on Ubuntu Server</a></li>



<li><a href="https://jameswsullivan.github.io/configure-docker-mysql-server/">Docker Administration: MySQL Server</a></li>



<li><a href="https://jameswsullivan.github.io/create-storage-pools-and-virtual-disks-via-powershell/">Create Storage Pools and Virtual Disks via PowerShell</a></li>
</ul>



<h2 class="wp-block-heading">Components:</h2>



<ul>
<li>The Docker host is a dedicated Hyper-V VM running Ubuntu Server in Windows Server 2022.</li>



<li><a href="https://hub.docker.com/_/nextcloud" target="_blank" rel="noreferrer noopener">Nextcloud</a> Docker image.</li>



<li><a href="https://hub.docker.com/r/ubuntu/mysql" target="_blank" rel="noreferrer noopener">Ubuntu/MySQL</a> Docker image.</li>



<li>A storage pool consisting of 6 x 500GB 2.5&#8221; HDDs and a virtual disk in Parity mode with 2 disks set as redundant, bringing its total capacity to 1.35TB. This virtual disk will be mounted to Nextcloud&#8217;s <code>/var/www/html</code> path to store persistent data.</li>



<li>An 100GB virtual disk for MySQL persistent data (<code>/var/lib/mysql</code>).</li>



<li>[Optional] <a href="https://github.com/jameswsullivan/selfhosted/blob/main/nextcloud.dockerfile" target="_blank" rel="noreferrer noopener">My custom Dockerfile</a>.</li>



<li>[Optional] <a href="https://github.com/jameswsullivan/selfhosted/blob/main/mysql.dockerfile">My custom MySQL Dockerfile</a>.</li>
</ul>



<h2 class="wp-block-heading">Configurations:</h2>



<pre class="wp-block-code"><code># Build Nextcloud image

docker build --file nextcloud.dockerfile --tag nextcloud:1.0 --progress plain --no-cache . 2&gt;&amp;1 | tee build.log

# Start the Nextcloud container.
# The drive for Nextcloud's persistent data is mounted to /mnt/nextcloud_data .

docker run -dit --name MY-NEXTCLOUD-CONTAINER --ip IP-ADDRESS --network NAME-OF-DOCKER-NETWORK --restart=unless-stopped --hostname=MY-NEXTCLOUD-CONTAINER-HOSTNAME -v /mnt/nextcloud_data:/var/www/html nextcloud:1.0

# Start a MySQL container for Nextcloud.
# The virtual disk for MySQL's persistent data is mounted to /mnt/nextcloud_db .

docker run -dit --name MY-NEXTCLOUD-DB-CONTAINER --ip IP-ADDRESS --network DOCKER-NETWORK --hostname=MY-NEXTCLOUD-DB-CONTAINER-HOSTNAME --restart=unless-stopped -v /mnt/nextcloud_db:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=MY-ROOT-PASSWORD ubuntu/mysql</code></pre>



<p></p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Linux Administration: Troubleshooting Apache Web Server and Name-based Virtual Hosting with WordPress</title>
		<link>https://jameswsullivan.github.io/linux-administration-troubleshooting-apache-web-server-and-name-based-virtual-hosting-with-wordpress/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Sat, 25 Mar 2023 23:26:42 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Apache]]></category>
		<category><![CDATA[Docker]]></category>
		<category><![CDATA[Hosting]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[Self-Hosting]]></category>
		<category><![CDATA[Ubuntu]]></category>
		<category><![CDATA[Web Hosting]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2185</guid>

					<description><![CDATA[This troubleshooting note wraps up the Name-based Virtual Hosting Series.]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading">Background:</h2>



<p>I use a locally hosted WordPress site draft my GitHub pages articles and then convert to static pages using Simply Static. During the process I ran into the following issues with WordPress:</p>



<ul>
<li>WordPress Site Health check has three critical issues:
<ul>
<li>The required module, gd, is not installed, or has been disabled.</li>



<li>The REST API encountered an error.</li>



<li>Your site could not complete a loopback request.</li>
</ul>
</li>



<li><em>Updating failed. The response is not a valid JSON response.</em> when creating and updating posts.</li>



<li>Simply Static&#8217;s failed diagnostics:
<ul>
<li>Checking if WordPress can make requests to itself from YOUR_IP  FAIL</li>



<li>Checking for cURL support  FAIL</li>
</ul>
</li>
</ul>



<p>Related article: <a href="https://jameswsullivan.github.io/linux-administration-configure-apache-web-server-and-name-based-virtual-hosting/">Linux Administration: Configure Apache Web Server and Name-based Virtual Hosting</a></p>



<h2 class="wp-block-heading">Solutions:</h2>



<h2 class="wp-block-heading">Issue 1: Updating failed. The response is not a valid JSON response.</h2>



<p>I started getting this error only after setting the <strong>Permalinks</strong> setting to anything else other than the default setting <strong>Plain</strong>. When <strong>Permalinks</strong> is not set to <strong>Plain</strong>, the URLs need to be rewritten, and that&#8217;s when this error occurs. It turned out to be that I forgot to add the &lt;Directory> tag in the virtual host configuration file. As you can see in <a href="https://jameswsullivan.github.io/linux-administration-configure-apache-web-server-and-name-based-virtual-hosting/">this post</a>, my original configuration file looks like this:</p>



<pre class="wp-block-code"><code>&lt;VirtualHost *:80>
    ServerAdmin webmaster@example1.mydomain.com
    ServerName example1.mydomain.com
    DocumentRoot /var/www/html/example1.mydomain.com
    DirectoryIndex index.php
    ErrorLog ${APACHE_LOG_DIR}/example1.mydomain.com_error.log
    CustomLog ${APACHE_LOG_DIR}/example1.mydomain.com_access.log combined
&lt;/VirtualHost></code></pre>



<p>But the correct configs for rewrite to work need to look like this:</p>



<pre class="wp-block-code"><code>&lt;VirtualHost *:80>
    ServerAdmin webmaster@example1.mydomain.com
    ServerName example1.mydomain.com
    DocumentRoot /var/www/html/example1.mydomain.com

        &lt;Directory /var/www/html/example1.mydomain.com>
                Options Indexes FollowSymLinks
                AllowOverride All
                Require all granted
                DirectoryIndex index.php
        &lt;/Directory>

    ErrorLog ${APACHE_LOG_DIR}/example1.mydomain.com_error.log
    CustomLog ${APACHE_LOG_DIR}/example1.mydomain.com_access.log combined
&lt;/VirtualHost></code></pre>



<p>Without the <strong>&lt;Directory&gt;</strong> element, the <strong>.htaccess</strong> file is unable to override the rewrite rules.</p>



<h2 class="wp-block-heading">Issue 2: WordPress Site Health Critical Issues</h2>



<p><strong>1. The required module, gd, is not installed, or has been disabled.</strong></p>



<pre class="wp-block-code"><code># Install the php8.1-gd module

apt-get install php8.1-gd -y
service apache2 restart</code></pre>



<p><strong>2. The REST API encountered an error.</strong></p>



<pre class="wp-block-code"><code>The REST API is one way that WordPress and other applications communicate with the server. For example, the block editor screen relies on the REST API to display and save your posts and pages.

When testing the REST API, an error was encountered:

REST API Endpoint: http://example1.mydomain.com/wp-json/wp/v2/types/post?context=edit
REST API Response: (http_request_failed) cURL error 6: Could not resolve host: example1.mydomain.com</code></pre>



<p>Or:</p>



<pre class="wp-block-code"><code>The REST API is one way that WordPress and other applications communicate with the server. For example, the block editor screen relies on the REST API to display and save your posts and pages.

When testing the REST API, an unexpected result was returned:

REST API Endpoint: http://example1.mydomain.com/wp-json/wp/v2/types/post?context=edit
REST API Response: (404) Not Found</code></pre>



<p><strong>3. Your site could not complete a loopback request.</strong></p>



<pre class="wp-block-code"><code>Loopback requests are used to run scheduled events, and are also used by the built-in editors for themes and plugins to verify code stability.

The loopback request to your site failed, this means features relying on them are not currently working as expected.
Error: cURL error 6: Could not resolve host: example1.mydomain (http_request_failed)</code></pre>



<p><strong>To resolve issues 2 and 3, edit the /etc/hosts file:</strong></p>



<pre class="wp-block-code"><code>nano /etc/hosts

# Add a new line: IP hostname. e.g. 192.168.0.4 website1.example.com</code></pre>



<p>Additionally, you might need to install the curl package and double check to see if the <code>rewrite</code> module is properly enabled:</p>



<pre class="wp-block-code"><code># Install curl:

apt-get install php8.1-curl curl -y

# Verify curl version:

curl --version

# Verify curl is enabled in php.ini

nano /etc/php/8.1/apache2/php.ini

# Uncomment this line:

extension=curl

# Enable the rewrite module.

a2enmod rewrite
service restart apache2</code></pre>



<p>This also resolves Simply Static&#8217;s <code><em>"Checking if WordPress can make requests to itself from your_IP"</em> FAIL</code> issue.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Linux Administration: Configure Apache Web Server and Name-based Virtual Hosting</title>
		<link>https://jameswsullivan.github.io/linux-administration-configure-apache-web-server-and-name-based-virtual-hosting/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Fri, 03 Feb 2023 20:19:00 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Apache]]></category>
		<category><![CDATA[Docker]]></category>
		<category><![CDATA[Hosting]]></category>
		<category><![CDATA[Self-Hosting]]></category>
		<category><![CDATA[Ubuntu]]></category>
		<category><![CDATA[Web Hosting]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=18</guid>

					<description><![CDATA[Configure Apache Web Server and Name-based Virtual Hosting]]></description>
										<content:encoded><![CDATA[
<blockquote class="wp-block-quote">
<p>Update: this project has been optimized and containerized. See this <a href="https://github.com/jameswsullivan/selfhosted/tree/main/UbuntuLAMP" target="_blank" rel="noreferrer noopener">UbuntuLAMP project</a> on my github.</p>
</blockquote>



<p>Related Articles:</p>



<ul>
<li><a href="https://jameswsullivan.github.io/linux-administration-install-docker-on-ubuntu-server/">A Docker host</a>.</li>



<li><a href="https://jameswsullivan.github.io/docker-administration-docker-networking-ipvlan/">An ipvlan docker network</a>.</li>



<li>[Optional] <a href="https://jameswsullivan.github.io/docker-administration-smb-share-and-docker-volumes/">SMB shares and Docker volumes</a> for persistent files (<code>/var/www/html</code>).</li>



<li>[Troubleshooting] <a href="https://jameswsullivan.github.io/linux-administration-troubleshooting-apache-web-server-and-name-based-virtual-hosting-with-wordpress/">Linux Administration: Troubleshooting Apache Web Server and Name-based Virtual Hosting with WordPress</a></li>
</ul>



<h2 class="wp-block-heading">Configure the web server:</h2>



<pre class="wp-block-code"><code># Start a Ubuntu container:
docker run -dit --name web-server --network docker_dev_net --ip 192.168.1.103 --mount source=my_smb_vol,destination=/var/www/html ubuntu

# NOTE: Originally, I used underscores in my container names and hostnames, but it was causing issues in some scenarios where underscores are considered invalid or get misinterpreted. So hyphens are used instead.

# Enter the container's shell prompt:
docker exec -it web-server bash

# Install network utilities for troubleshooting:
apt-get install iputils-ping iproute2 traceroute -y

# Install SSH:
apt-get install openssh-client openssh-server -y

# Install sudo and other utilities:
apt-get install sudo nano -y

# Install apache, php, and php-mysql:
apt-get install apache2 php8.1 php-mysql libapache2-mod-php -y</code></pre>



<p>Verify that the services are running and start the them if not:</p>



<pre class="wp-block-code"><code># ssh and apache2 service status
service ssh status
service apache2 status

# start the services:
service ssh start
service apache2 start</code></pre>



<p>Configure hostname and name server (optional):</p>



<pre class="wp-block-code"><code># Depending on your setup, you might need to specify the --hostname when creating your container:

--hostname=&lt;your-hostname&gt;</code></pre>



<p>Verify PHP version:</p>



<pre class="wp-block-code"><code># Create a info.php file under the /var/www/html directory with the following content:

&lt;?php phpinfo();?&gt;</code></pre>



<p>Now that you should be able to visit the Apache server&#8217;s default landing page to verify that the Apache server is running and the info.php page to view your PHP version.</p>



<h2 class="wp-block-heading">Configure name-based virtual hosting:</h2>



<pre class="wp-block-code"><code># The example websites I'm using are: example.mydomain.com, example1.mydomain.com, example2.mydomain.com.

# Create directories:

mkdir /var/www/html/example1.mydomain.com
mkdir /var/www/html/example2.mydomain.com

# example.mydomain.com will reside under /var/www/html as the "main" website.

# Change ownership of the directories accordingly. Here I changed the entire html directory and its subdirectories' ownership to www-data for convenience.

chown -R www-data:www-data /var/www/html

# Create Virtual Host configuration files for your sites.

touch /etc/apache2/sites-available/example.mydomain.com.conf
touch /etc/apache2/sites-available/example1.mydomain.com.conf
touch /etc/apache2/sites-available/example2.mydomain.com.conf

# example.mydomain.com.conf or use the 000-default.conf:
&lt;VirtualHost *:80&gt;
    ServerAdmin webmaster@example.mydomain
    ServerName example.mydomain.com
    DocumentRoot /var/www/html
    DirectoryIndex index.html
    ErrorLog ${APACHE_LOG_DIR}/example.mydomain.com_error.log
    CustomLog ${APACHE_LOG_DIR}/example.mydomain.com_access.log combined
&lt;/VirtualHost&gt;

# example1.mydomain.com.conf and example2.mydomain.com.conf:
&lt;VirtualHost *:80&gt;
    ServerAdmin webmaster@example1.mydomain.com
    ServerName example1.mydomain.com
    DocumentRoot /var/www/html/example1.mydomain.com
    DirectoryIndex index.php
    ErrorLog ${APACHE_LOG_DIR}/example1.mydomain.com_error.log
    CustomLog ${APACHE_LOG_DIR}/example1.mydomain.com_access.log combined
&lt;/VirtualHost&gt;

&lt;VirtualHost *:80&gt;
    ServerAdmin webmaster@example2.mydomain.com
    ServerName example2.mydomain.com
    DocumentRoot /var/www/html/example2.mydomain.com
    DirectoryIndex index.php
    ErrorLog ${APACHE_LOG_DIR}/example2.mydomain.com_error.log
    CustomLog ${APACHE_LOG_DIR}/example2.mydomain.com_access.log combined
&lt;/VirtualHost&gt;

# Enable the configuration files for the sites:

a2ensite example1.mydomain.com
a2ensite example2.mydomain.com

# Restart apache2 service and verify that apache2 is running:

service apache2 reload
service apache2 status

# Of course, you will need to add your own index.html or index.php file under the sites' directories.</code></pre>



<h2 class="wp-block-heading">Configure DNS records:</h2>



<pre class="wp-block-code"><code># I'm using my Cisco router as an example:

ip host example.mydomain.com 192.168.1.103
ip host example1.mydomain.com 192.168.1.103
ip host example2.mydomain.com 192.168.1.103</code></pre>



<p>Now that you should be able to visit the sites by going to:</p>



<pre class="wp-block-code"><code>http:&#47;&#47;example.mydomain.com
http://example1.mydomain.com/
http://example2.mydomain.com/</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Docker Administration: MySQL Server</title>
		<link>https://jameswsullivan.github.io/configure-docker-mysql-server/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Fri, 03 Feb 2023 17:14:00 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Apache]]></category>
		<category><![CDATA[Database Administration]]></category>
		<category><![CDATA[Docker]]></category>
		<category><![CDATA[Hosting]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[Self-Hosting]]></category>
		<category><![CDATA[Ubuntu]]></category>
		<guid isPermaLink="false">https://www.alexchen.net/?p=2124</guid>

					<description><![CDATA[Set up a Docker MySQL server with ipvlan, SMB share and Docker volume for persistent data.]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading">Prerequisites:</h2>



<ul>
<li><a href="https://jameswsullivan.github.io/linux-administration-install-docker-on-ubuntu-server/">A Docker host</a>.</li>



<li><a href="https://jameswsullivan.github.io/docker-networking-ipvlan/">An ipvlan Docker network</a>.</li>



<li><a href="https://jameswsullivan.github.io/docker-administration-smb-share-and-docker-volumes/">Docker volumes configured with SMB share</a>.</li>



<li><a href="https://hub.docker.com/r/ubuntu/mysql" target="_blank" rel="noreferrer noopener">ubuntu/mysql</a> image.</li>
</ul>



<h2 class="wp-block-heading">Configurations:</h2>



<p>Create a ubuntu/mysql container:</p>



<pre class="wp-block-code"><code>docker run -dit --name MySQL_DEV --network docker_dev_net --ip 192.168.1.101 --mount source=my_smb_vol,destination=/SharedVolume -p 3306:3306 -p 22:22 -e MYSQL_ROOT_PASSWORD=password ubuntu/mysql</code></pre>



<p>Create users and databases:</p>



<pre class="wp-block-code"><code># Connect to mysql instance:
mysql -u root -p

# Show databases:
SHOW DATABASES;

# Describe a table:
USE mysql;
DESC user;

# Show all the users:
SELECT user, host FROM mysql.user;

# Create databases (assuming that we'll be creating the databases for some WordPress sites):
CREATE DATABASE my_wordpress_db;

# Create users:
CREATE USER 'wordpress_user'@'192.168.1.103' IDENTIFIED BY 'password';
CREATE USER 'wordpress_user'@'localhost' IDENTIFIED BY 'password';

# Grant privileges to the user:
GRANT ALL ON my_wordpress_db.* TO 'wordpress_user'@'192.168.1.103' WITH GRANT OPTION;
FLUSH PRIVILEGES;

# Verify privileges:
SHOW GRANTS FOR 'wordpress_user'@'192.168.1.103';</code></pre>



<p>Allow remote connection to the MySQL server:</p>



<pre class="wp-block-code"><code># You will have to modify one of the .cnf files to allow remote connection to your mysql instance, if you list the files under /etc/mysql/, you'll find the following files and directories listed:

ls -al /etc/mysql/

conf.d
my.cnf
my.cnf.fallback

# View the content of my.cnf:
cat /etc/mysql/my.cnf

# On the last two lines of the output, you should see:

# Custom config should go here
!includedir /etc/mysql/conf.d/

# List files under the conf.d directory:
ls -al /etc/mysql/conf.d/

docker.cnf
mysql.cnf
mysqldump.cnf

# The mysql.cnf is what you're going to edit:
nano /etc/mysql/conf.d/mysql.cnf

# By default, the mysql.cnf file might only contain one line: &#91;mysql]. Add a new line below it so it looks like the following:

&#91;mysql]
bind-address = 0.0.0.0</code></pre>



<p>Test connection to the mysql instance from the remote machine/container using the newly created <em>wordpress_user</em> user.</p>



<pre class="wp-block-code"><code># I'm performing these steps on the Ubuntu Apache web server, 192.168.1.103:
# Install the mysql-client package if it's not been installed.

apt-get install -y mysql-client

# Connect to the mysql instance at 192.168.1.101:
mysql -h 192.168.1.101 -u wordpress_user -p</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Docker Administration: SMB share and Docker volumes</title>
		<link>https://jameswsullivan.github.io/docker-administration-smb-share-and-docker-volumes/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Fri, 03 Feb 2023 16:52:00 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Docker]]></category>
		<category><![CDATA[Hosting]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[Self-Hosting]]></category>
		<category><![CDATA[Ubuntu]]></category>
		<category><![CDATA[Web Hosting]]></category>
		<guid isPermaLink="false">https://www.alexchen.net/?p=2122</guid>

					<description><![CDATA[Use SMB shares with Docker volumes.]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading">Background:</h2>



<p>Recently I&#8217;ve been setting up a Docker lab environment to run some applications and needed some data to persist and be shared across my lab network. Since most of the computers run Windows, using SMB shares seems to be the easiest solution.</p>



<p>Related articles:</p>



<ul>
<li><a href="https://jameswsullivan.github.io/linux-administration-install-docker-on-ubuntu-server/">Docker host</a>.</li>



<li><a href="https://jameswsullivan.github.io/docker-administration-docker-networking-ipvlan/">ipvlan Docker network</a>.</li>
</ul>



<h2 class="wp-block-heading">Configurations:</h2>



<p>Create a <a href="https://docs.docker.com/storage/volumes/#create-cifssamba-volumes" target="_blank" rel="noreferrer noopener">Docker CIFS/Samba volume</a>:</p>



<pre class="wp-block-code"><code># Assuming that the network share is at:
\\main_server\DockerShare

# Create a docker volume:
docker volume create --driver local --opt type=cifs --opt device=//main_server/DockerShare --opt o=addr=main_server,username=your_username,password=your_password,file_mode=0777,dir_mode=0777 --name my_smb_vol</code></pre>



<p>Run a container with a volume mount:</p>



<pre class="wp-block-code"><code># List all volumes
docker volume ls

# Run a container with the volume that's been created:
docker run -dit --name WEB_SERVER --network docker_dev_net --ip 192.168.1.103 --mount source=my_smb_vol,destination=/SharedVolume -p 443:443 -p 80:80 -p 22:22 ubuntu</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Linux Administration: Install Docker on Ubuntu Server</title>
		<link>https://jameswsullivan.github.io/linux-administration-install-docker-on-ubuntu-server/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Tue, 21 Sep 2021 06:14:07 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Docker]]></category>
		<category><![CDATA[Hosting]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[Self-Hosting]]></category>
		<category><![CDATA[Standard Notes]]></category>
		<category><![CDATA[Ubuntu]]></category>
		<guid isPermaLink="false">https://www.alexchen.net/?p=1638</guid>

					<description><![CDATA[Setting up Ubuntu Server, SSH, UFW, Nginx, and Docker.]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading">Environment:</h2>



<ul>
<li>Windows Server 2019</li>



<li>Hyper-V</li>



<li>Ubuntu Server 20.04.3 LTS.</li>
</ul>



<h2 class="wp-block-heading">Configurations:</h2>



<p>1. After Ubuntu Server is installed on a VM (with a clean and minimum installation without any preloaded packages), set up Docker and OpenSSH.</p>



<pre class="wp-block-code"><code># Install OpenSSH
apt update -y
apt upgrade -y
apt install openssh-server -y

# Check SSH Status
systemctl status ssh

# Allow ssh over UFW firewall
ufw allow ssh</code></pre>



<p>2. Enable UFW, check status, and configure rules.</p>



<pre class="wp-block-code"><code># Enable UFW
ufw enable

# Check status and rules
ufw status

# Check status and make results numbered
ufw status numbered

# Disable UFW
ufw disable

# Block IP
ufw deny from IP-Address

# Block by subnet
ufw deny from IP/CIDR

# Block connections on interface
ufw deny in on eth0 from IP-Address

# Allow commands:
ufw allow from IP-Address
ufw allow in on eth0 from IP-Address

# Delete rule
ufw status numbered
ufw delete &#91;number]

# Allow by protocol
ufw allow from IP-Address proto tcp to any port 22
ufw allow from IP/CIDR proto tcp to any port 22
ufw allow proto tcp from any to any port 80,443</code></pre>



<p>3. Disable ipv6 on Ubuntu Server.</p>



<pre class="wp-block-code"><code># Add
net.ipv6.conf.all.disable_ipv6=1
net.ipv6.conf.default.disable_ipv6=1
net.ipv6.conf.lo.disable_ipv6=1
# to file /etc/sysctl.conf</code></pre>



<p>4. Reduce Ubuntu shutdown time.</p>



<pre class="wp-block-code"><code># Edit /etc/systemd/system.conf and uncomment DefaultTimeoutStopSec=90s and set it to a desired value

DefaultTimeoutStopSec=15s</code></pre>



<p>5. Install Docker</p>



<pre class="wp-block-code"><code># Remove existing Docker installations, if any
apt remove docker docker-engine docker.io containerd runc

# Install using the repository
apt update -y
apt install -y apt-transport-https ca-certificates curl gnupg lsb-release

# Add Docker's official GPG key
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

# Set up stable repository
echo \
"deb &#91;arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
$(lsb_release -cs) stable" \
| sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

# Install Docker engine
apt update -y
apt install -y docker-ce docker-ce-cli containerd.io

# Verify that Docker Engine is correctly installed
docker version</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Self-host Nextcloud &#8211; Part 3 &#8211; Performance</title>
		<link>https://jameswsullivan.github.io/self-host-nextcloud-part-3-performance/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Mon, 20 Sep 2021 07:28:07 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Apache]]></category>
		<category><![CDATA[Hosting]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[Nextcloud]]></category>
		<category><![CDATA[Self-Hosting]]></category>
		<category><![CDATA[System Administration]]></category>
		<category><![CDATA[Ubuntu]]></category>
		<category><![CDATA[Web Hosting]]></category>
		<guid isPermaLink="false">https://www.alexchen.net/?p=1633</guid>

					<description><![CDATA[Nextcloud performance optimization.]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading">Background:</h2>



<p>After about two days&#8217; troubleshooting and and testing, Nextcloud is successfully running in my homelab. This article documents a few performance tweaking.</p>



<h2 class="wp-block-heading">Issues:</h2>



<ul>
<li>504 Gateway Timeout when uploading larger files.</li>



<li>Disable file locking.</li>
</ul>



<h2 class="wp-block-heading">Solutions:</h2>



<p>1. Modify PHP <code>max_input_time</code> and <code>max_execution_time</code> to get rid of the 504 Gateway Timeout error when uploading large files.</p>



<pre class="wp-block-code"><code># Modify php.ini under /etc/php/8.0/fpm/ and /etc/php/8.0/apache2/
max_input_time 86400
max_execution_time 86400

upload_max_filesize 50G
post_max_size 50G

# Restart PHP and Apache
service apache2 restart
service php8.0-fpm restart</code></pre>



<p>2. Disable file locking.</p>



<p>This might cause potential problems when you have multiple users collaborating on file editing/syncing, but in my single-user setup this was not a concern. I needed to do this when I was syncing some large files and the client froze, and after a force restart/resync, the Nextcloud client reported <code>423 Locked</code> errors to <code>PUT https://...../</code> .</p>



<pre class="wp-block-code"><code># Add
'filelocking.enabled' =&gt; false,
# to nextcloud's config.php, and clear the locked files.

# Add
'maintenance' =&gt; true,
# to config.php

# Get into MariaDB and run the following
DELETE FROM oc_file_locks WHERE 1;

# Revert maintenance mode
'maintenance' =&gt; false,

# Restart PHP and Apache
service apache2 restart
service php8.0-fpm restart</code></pre>



<h4 class="wp-block-heading">Overall performance.</h4>



<p>Nextcloud&#8217;s overall syncing speed has a lot to do with your Nextcloud server&#8217;s performance, the more smooth your server runs the better syncing performance you&#8217;ll get (more RAM, use SSD instead of HDD, etc.). I was able to get roughly 25MB upload speed and 65MB download speed with a Hyper-V VM running Ubuntu Desktop.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Self-host Nextcloud &#8211; Part 2 &#8211; Self-signed SSL Certificate</title>
		<link>https://jameswsullivan.github.io/self-host-nextcloud-part-2-self-signed-ssl-certificate/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Sun, 19 Sep 2021 20:58:07 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Apache]]></category>
		<category><![CDATA[Docker]]></category>
		<category><![CDATA[Hosting]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[Nextcloud]]></category>
		<category><![CDATA[Self-Hosting]]></category>
		<category><![CDATA[SSL]]></category>
		<category><![CDATA[Ubuntu]]></category>
		<guid isPermaLink="false">https://www.alexchen.net/?p=1622</guid>

					<description><![CDATA[Perfecting SSL configuration on Nextcloud server.]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading">Background:</h2>



<p>In <a href="https://jameswsullivan.github.io/self-host-nextcloud-part-1-installation/">Part 1 of the Nextcloud series</a> we&#8217;ve discussed how to bring up a self-hosted Nextcloud instance. In this article I&#8217;d like to discuss the SSL troubleshooting process. Reference articles: <a href="https://stackoverflow.com/questions/46349459/chrome-neterr-cert-authority-invalid-error-on-self-signing-certificate-at-loca?rq=1" data-type="URL" data-id="https://stackoverflow.com/questions/46349459/chrome-neterr-cert-authority-invalid-error-on-self-signing-certificate-at-loca?rq=1" target="_blank" rel="noreferrer noopener">article 1</a>, <a href="https://alexanderzeitler.com/articles/Fixing-Chrome-missing_subjectAltName-selfsigned-cert-openssl/" data-type="URL" data-id="https://alexanderzeitler.com/articles/Fixing-Chrome-missing_subjectAltName-selfsigned-cert-openssl/" target="_blank" rel="noreferrer noopener">article 2</a>, <a href="https://superuser.com/questions/1631692/why-is-chrome-not-trusting-imported-self-signed-root-ca" data-type="URL" data-id="https://superuser.com/questions/1631692/why-is-chrome-not-trusting-imported-self-signed-root-ca" target="_blank" rel="noreferrer noopener">article 3</a>, <a href="https://www.youtube.com/watch?v=e8vMTlobW3c" data-type="URL" data-id="https://www.youtube.com/watch?v=e8vMTlobW3c" target="_blank" rel="noreferrer noopener">video</a>.</p>



<h2 class="wp-block-heading">Issues<strong>:</strong></h2>



<ul>
<li>SSL/HTTPS won&#8217;t go into effect even if I&#8217;ve enabled SSL in Apache, generated the certs, and configured the config files.</li>



<li>HTTPS goes into effect in Firefox but always said &#8220;Not Secure&#8221; or &#8220;Invalid&#8221; cert in Chrome.</li>



<li>Chrome errors: &#8220;NET::ERR_CERT_AUTHORITY_INVALID&#8221;, &#8220;NET::ERR_CERT_COMMON_NAME_INVALID&#8221;</li>
</ul>



<h2 class="wp-block-heading">Solutions:</h2>



<p>1. Originally, I followed this article to generate my certs, but the cert won&#8217;t get accepted by Chrome even if I&#8217;ve imported it into Trusted Root Certification Authorities store. The certificate generation procedures that worked are:</p>



<pre class="wp-block-code"><code># Generate a Certificate Authority (CA)

openssl genrsa -des3 -out nextcloudCA.key 2048
# A password needs to be created after this command is run.

openssl req -x509 -new -nodes -key nextcloudCA.key -sha256 -days 365 -out nextcloudCA.pem
# A series of information will be asked after this command is run. You can customize your own or just follow whatever is in the &#91;dn] section below.

openssl x509 -outform pem -in nextcloudCA.pem -out nextcloudCA.crt
# Generate a crt file for future import. The pem file can also be used for import.

# Prepare the v3.ext and config files.
# cert.csr.cnf file
&#91;req]
default_bits = 2048
prompt = no
default_md = sha256
distinguished_name = dn

&#91;dn]
C=Replace-with-Your-Info
ST=Replace-with-Your-Info
L=Replace-with-Your-Info
O=Replace-with-Your-Info
OU=Replace-with-Your-Info
emailAddress=Replace-with-Your-Info
CN=Replace-with-Your-Info

# v3.ext file
authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
subjectAltName = @alt_names

&#91;alt_names]
DNS.1 = Replace-with-Your-Info-Or-Delete-Line
DNS.2 = Replace-with-Your-Info-Or-Delete-Line
DNS.3 = Replace-with-Your-Info-Or-Delete-Line
IP.1 = Replace-with-Your-Info-Or-Delete-Line
IP.2 = Replace-with-Your-Info-Or-Delete-Line

# Generate the domain name cert
openssl req -new -sha256 -nodes -out nextcloudDNCert.csr -newkey rsa:2048 -keyout nextcloudDNCert.key -config cert.csr.cnf

openssl x509 -req -in nextcloudDNCert.csr -CA nextcloudCA.crt -CAkey nextcloudCA.key -CAcreateserial -out nextcloudDNCert.crt -days 365 -sha256 -extfile v3.ext</code></pre>



<p>2. Put your cert files (<strong>nextcloudDNCert.crt</strong> and <strong>nextcloudDNCert.key</strong>) in the directories that&#8217;s suitable for your setup, and modify your SSL config file or the nextcloud.conf file to point to the cert files. Sample config files can be downloaded here: <a rel="noreferrer noopener" href="https://github.com/jameswsullivan/blog-file-share/blob/main/sample.nextcloud.conf" target="_blank">sample.nextcloud.conf</a> .</p>



<pre class="wp-block-code"><code># Under /etc/apache2/sites-available, modify nextcloud.conf .

SSLCertificateFile Your-Cert-File-Path
SSLCertificateKeyFile Your-Cert-Key-File-Path</code></pre>



<p>3. Restart Apache service</p>



<pre class="wp-block-code"><code>service apache2 restart</code></pre>



<p>4. Import <strong>nextcloudCA.crt</strong> into your Trusted Root Certification Authorities store, clear your browser&#8217;s cookies, restart the browser and access your Nextcloud server again, this time the HTTPS padlock should be solid grey, no &#8220;Not Secure&#8221; and other errors.</p>



<h2 class="wp-block-heading">Explanation about the certificate errors:</h2>



<p>&#8220;NET::ERR_CERT_AUTHORITY_INVALID&#8221;</p>



<p>This is due to how the certs were generated, when using <a href="https://betterprogramming.pub/how-to-create-trusted-ssl-certificates-for-your-local-development-13fd5aad29c6" data-type="URL" data-id="https://betterprogramming.pub/how-to-create-trusted-ssl-certificates-for-your-local-development-13fd5aad29c6" target="_blank" rel="noreferrer noopener">this method</a> to generate, I always got the error, but after I switched to the method written in step #1 and the certs were properly imported, this error was gone.</p>



<p>&#8220;NET::ERR_CERT_COMMON_NAME_INVALID&#8221;</p>



<p>Assuming you already put in the Common Name (which is your FQDN, e.g. nextcloud.mydomain.com) correctly when generating the certs and it still gave this error, check the <code>alt_names</code> section above, make sure all the DNS.x and IP.x entries cover all your <code>alt_name</code> variants. Once I configured all the stuff under the <code>alt_names</code> section correctly (for me it&#8217;s &#8220;localhost&#8221;, my server&#8217;s IP, and the &#8220;subdomain&#8221; URL I&#8217;m using), the error was gone.</p>



<h2 class="wp-block-heading">Other:</h2>



<ul>
<li>Some mentioned that Chrome versions played a role in accepting self-signed certs. But my issues were resolved without dealing with Chrome versions.</li>



<li>I&#8217;ve seen posts mentioning the <code>chrome://flags/#allow-insecure-localhost</code> flag, but it didn&#8217;t apply to my scenario.</li>



<li>Some articles say that self-signed certs won&#8217;t be deemed secure and valid by browsers/OSs/Chrome, which is not true if the certs are generated and imported correctly.</li>



<li>Security hardening &#8211; forcing HTTPS, Strict-Transport-Security, and URL redirections. See <a href="https://github.com/jameswsullivan/blog-file-share/blob/main/sample.nextcloud.conf" data-type="URL" data-id="https://drive.google.com/file/d/1QQRGrROpZhrnDc-ET8mDUfj2EjtHzAnK/view?usp=sharing" target="_blank" rel="noreferrer noopener">sample.nextcloud.conf</a> and its comments for details.</li>
</ul>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
