<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Network Administration &#8211; howdy</title>
	<atom:link href="https://jameswsullivan.github.io/tag/network-administration/feed/" rel="self" type="application/rss+xml" />
	<link>https://jameswsullivan.github.io/</link>
	<description></description>
	<lastBuildDate>Sat, 30 Dec 2023 17:44:24 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.2</generator>
	<item>
		<title>Network Administration: Split DNS</title>
		<link>https://jameswsullivan.github.io/network-administration-split-dns/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Sat, 30 Dec 2023 17:38:32 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Cisco]]></category>
		<category><![CDATA[Cisco 2951]]></category>
		<category><![CDATA[Cisco IOS]]></category>
		<category><![CDATA[DNS]]></category>
		<category><![CDATA[Network Administration]]></category>
		<category><![CDATA[Networking]]></category>
		<category><![CDATA[Self-Hosting]]></category>
		<category><![CDATA[Split DNS]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2982</guid>

					<description><![CDATA[Configure Split DNS on Cisco 2951 router for internal and external traffic.]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading">Background:</h2>



<p>Recently I experimented with Split DNS on a Cisco 2951 router using two DNS views to separately resolve DNS lookups to internal and external sites. The internal view will resolve DNS lookups to my self-hosted services within the lab using the Domain Controllers, and the external view will serve regular traffic to the Internet. The configuration works as intended, however for some unknown reason the DNS lookups for external traffic took quite a bit longer than usual, while internal traffic works fine. It could be due to some glitch with a specific IOS firmware version or the router itself, but before I have other devices to compare, it remains a mystery for now. (Note: I did experiment with different combinations of the configurations during the troubleshooting to try to narrow things down, but unfortunately it was always slower on the internet side.)</p>



<p>Eventually, for better performance I reverted the changes back to using the basic single view DNS setting on the router and set it to use the DCs&#8217; IPs as the name servers, and then on the DCs I set CloudFlare&#8217;s 1.1.1.1 as the DNS forwarder. And there was no slow DNS lookups anymore.</p>



<h2 class="wp-block-heading">Configure Split DNS:</h2>



<pre class="wp-block-code"><code># Configure a separate DNS view for internal traffic:
ip dns view internal-view
domain name-server &lt;DC-01s-IP-Address&gt;
domain name-server &lt;DC-02s-IP-Address&gt;
exit

# Configure the default view to use for general internet traffic:
ip dns view default
domain name-server 1.1.1.1
domain name-server 8.8.8.8
exit
# or, use your ISP's DNS servers.

# Define a DNS name-list for your internal network's domain (e.g. mydomain.local):
ip dns name-list 100 permit .*.mydomain.local

# Define a DNS view-list called SPLITDNS, and assign the views with their appropriate evaluation order (10 and 99):
ip dns view-list SPLITDNS
view internal-view 10
restrict name-group 100
view default 99

# Enable DNS server:
ip dns server
ip dns server view-group SPLITDNS</code></pre>



<h2 class="wp-block-heading">Troubleshooting:</h2>



<p>To view debug messages and see if the correct views are being used for different traffic, enable the following debugging options accordingly:</p>



<pre class="wp-block-code"><code>debug ip dns view
debug ip dns view-list
debug ip dns name-list

terminal monitor</code></pre>



<p>Test name resolution with <code>nslookup</code> :</p>



<pre class="wp-block-code"><code>nslookup -type=ns myapp.mydomain.local
nslookup -type=ns www.google.com</code></pre>



<p>View configured DNS views:</p>



<pre class="wp-block-code"><code>show ip dns view
show ip dns view-list
show ip dns name-list</code></pre>



<p>Reference article: <a href="https://notalwaysthenetwork.com/2014/09/09/split-dns-with-cisco-routers/" target="_blank" rel="noreferrer noopener">Split DNS with Cisco Routers</a></p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Network Administration: Configure VLAN and InterVLAN Routing</title>
		<link>https://jameswsullivan.github.io/network-administration-configure-vlan-and-intervlan-routing/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Tue, 20 Jun 2023 15:25:19 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Cisco]]></category>
		<category><![CDATA[Cisco 2951]]></category>
		<category><![CDATA[Cisco C3750G]]></category>
		<category><![CDATA[InterVLAN Routing]]></category>
		<category><![CDATA[Network Administration]]></category>
		<category><![CDATA[Networking]]></category>
		<category><![CDATA[router-on-a-stick]]></category>
		<category><![CDATA[SVI]]></category>
		<category><![CDATA[Switch Virtual Interface]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2574</guid>

					<description><![CDATA[Configure VLAN and InterVLAN routing on Cisco router and switch using router-on-a-stick and SVI.]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading">Lab Environment:</h2>



<ul>
<li>Router: Cisco 2951</li>



<li>Switch: Cisco C3750G PoE</li>



<li>2 VLANs</li>
</ul>



<h2 class="wp-block-heading">Method 1: router-on-a-stick</h2>



<pre class="wp-block-code"><code>Topology: C3750G (GigabitEthernet3/0/1) -- CISCO2951(GigabitEthernet0/1) -- INTERNET(GigabitEthernet0/0)</code></pre>



<h4 class="wp-block-heading">On CISCO2951:</h4>



<pre class="wp-block-code"><code>CISCO2951(config)#interface GigabitEthernet 0/0
CISCO2951(config-if)#no shutdown
CISCO2951(config-if)#speed 1000
CISCO2951(config-if)#duplex full
CISCO2951(config-if)#exit

CISCO2951(config)#interface GigabitEthernet 0/0.10
CISCO2951(config-subif)#encapsulation dot1Q 10
CISCO2951(config-subif)#ip address 192.168.10.1 255.255.255.0
CISCO2951(config-subif)#exit

CISCO2951(config)#interface GigabitEthernet 0/0.20
CISCO2951(config-subif)#encapsulation dot1Q 20                 
CISCO2951(config-subif)#ip address 192.168.20.1 255.255.255.0</code></pre>



<h4 class="wp-block-heading">On C3750G:</h4>



<pre class="wp-block-code"><code>C3750G(config)#interface GigabitEthernet 3/0/1
C3750G(config-if)#switchport mode trunk
C3750G(config-if)#switchport trunk encapsulation dot1q
C3750G(config-if)#no shutdown
C3750G(config-if)#speed 1000
C3750G(config-if)#duplex full
C3750G(config-if)#exit

C3750G(config)#vlan 10
C3750G(config-vlan)#name VLAN10
C3750G(config-vlan)#exit
C3750G(config)#vlan 20
C3750G(config-vlan)#name VLAN20
C3750G(config-vlan)#exit

# Assign ports to the VLANs as needed:
C3750G(config)#interface GigabitEthernet 3/0/2
C3750G(config-if)#switchport mode access
C3750G(config-if)#switchport access vlan 10
C3750G(config-if)#no shutdown
C3750G(config-if)#speed 1000
C3750G(config-if)#duplex full
C3750G(config-if)#exit

C3750G(config)#interface GigabitEthernet 3/0/3
C3750G(config-if)#switchport mode access
C3750G(config-if)#switchport access vlan 20
C3750G(config-if)#no shutdown
C3750G(config-if)#speed 1000
C3750G(config-if)#duplex full
C3750G(config-if)#exit</code></pre>



<h2 class="wp-block-heading">Method 2: SVI (Switch Virtual Interface) and InterVLAN routing on C3750G switch.</h2>



<pre class="wp-block-code"><code>Topology: C3750G (GigabitEthernet3/0/1) -- CISCO2951(GigabitEthernet0/1) -- INTERNET(GigabitEthernet0/0)</code></pre>



<h4 class="wp-block-heading">CISCO2951 Configs:</h4>



<pre class="wp-block-code"><code># Configure GigabitEthernet 0/0 (connected to ISP's device for internet access) to use DHCP.
CISCO2951(config)#interface GigabitEthernet 0/0
CISCO2951(config-if)#ip address dhcp
CISCO2951(config-if)#ip nat outside
CISCO2951(config-if)#ip virtual-reassembly in
CISCO2951(config-if)#no shutdown
CISCO2951(config-if)#speed 1000
CISCO2951(config-if)#duplex full
CISCO2951(config-if)#exit

# Configure GigabitEthernet0/1 (connected to C3750G).
CISCO2951(config)#interface GigabitEthernet 0/1
CISCO2951(config-if)#ip address 192.168.0.1 255.255.255.0
CISCO2951(config-if)#ip access-group NAT_ACL in
CISCO2951(config-if)#ip nat inside
CISCO2951(config-if)#ip virtual-reassembly in
CISCO2951(config-if)#no shutdown
CISCO2951(config-if)#speed 1000
CISCO2951(config-if)#duplex full
CISCO2951(config-if)#exit

# Configure ACL and NAT.
CISCO2951(config)#ip dns server
CISCO2951(config)#ip name-server 1.1.1.1
CISCO2951(config)#ip access-list extended NAT_ACL
CISCO2951-K9(config-ext-nacl)#permit ip 192.168.0.0 0.0.0.255 any
CISCO2951-K9(config-ext-nacl)#exit
CISCO2951(config)#ip nat inside source list NAT_ACL interface GigabitEthernet0/0 overload

# Enable routing and configure EIGRP (optional, depending on your configs)
CISCO2951(config)#ip routing
CISCO2951(config)#router eigrp 100
CISCO2951(config-router)#network 192.168.0.0 0.0.0.255</code></pre>



<h4 class="wp-block-heading">C3750G Configs:</h4>



<pre class="wp-block-code"><code># Enable routing:
C3750G(config)#ip routing

# Configure cef (Cisco Express Forwarding
) for better performance:
C3750G(config)#ip cef distributed
C3750G(config)#ip cef optimize neighbor resolution

#Configure DNS
C3750G(config)#ip domain-lookup
C3750G(config)#ip name-server 192.168.0.1

# Enable spanning-tree protocol.
C3750G(config)#spanning-tree mode rapid-pvst

# Configure VLANs
C3750G(config)#vlan 10
C3750G(config-vlan)#name VLAN10
C3750G(config-vlan)#exit
C3750G(config)#vlan 20
C3750G(config-vlan)#name VLAN20
C3750G(config-vlan)#exit

C3750G(config)#interface vlan 10
C3750G(config-if)#ip address 192.168.10.1 255.255.255.0
C3750G(config-if)#ip helper-address 192.168.0.1
C3750G(config)#interface vlan 20
C3750G(config-if)#ip address 192.168.20.1 255.255.255.0
C3750G(config-if)#ip helper-address 192.168.0.1

# Configure trunk port
C3750G(config)#interface GigabitEthernet 3/0/1
C3750G(config-if)#no switchport
C3750G(config-if)#ip address 192.168.0.2 255.255.255.0
C3750G(config-if)#no shutdown
C3750G(config-if)#speed 1000
C3750G(config-if)#duplex full

# Configure default route.
C3750G(config)#ip route 0.0.0.0 0.0.0.0 GigabitEthernet 3/0/1

# Assign ports to VLANs
C3750G(config)#interface range GigabitEthernet 3/0/2 - 5
C3750G(config-if-range)#switchport access vlan 10
C3750G(config-if-range)#switchport mode access
C3750G(config-if-range)#speed 1000
C3750G(config-if-range)#duplex full
C3750G(config-if-range)#no shut

C3750G(config)#interface range GigabitEthernet 3/0/6 - 12
C3750G(config-if-range)#switchport access vlan 20
C3750G(config-if-range)#switchport mode access
C3750G(config-if-range)#speed 1000
C3750G(config-if-range)#duplex full
C3750G(config-if-range)#no shut</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Network Administration: Update Cisco IOS on C3750G</title>
		<link>https://jameswsullivan.github.io/network-administration-flash-cisco-ios-on-c3750g/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Sun, 18 Jun 2023 00:01:28 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Cisco]]></category>
		<category><![CDATA[Cisco C3750G]]></category>
		<category><![CDATA[Cisco IOS]]></category>
		<category><![CDATA[Network Administration]]></category>
		<category><![CDATA[Networking]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2570</guid>

					<description><![CDATA[Flash Cisco IOS firmware on C3750G switch.]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading">Prerequisites:</h2>



<ul>
<li>Switch Model: WS-C3750G-24PS-S</li>



<li>Old firmware: c3750-advipservicesk9-mz.122-44.SE4.bin</li>



<li>New firmware: c3750-ipservicesk9-mz.150-2.SE11.bin</li>



<li>A TFTP Server at 192.168.0.100 . (I used SolarWinds TFTP Server here.)</li>
</ul>



<p>Related article: <a href="https://jameswsullivan.github.io/network-administration-ssh-connection-errors-when-connecting-to-older-cisco-devices/">Network Administration: SSH connection errors when connecting to older Cisco devices</a></p>



<h2 class="wp-block-heading">IOS Commands:</h2>



<pre class="wp-block-code"><code># Verify current IOS version, view current IOS bin file.
show version
show switch
dir flash:
# Assuming that your switch only have one flash.

# Delete old IOS firmware file.
delete /f /r flash:c3750-advipservicesk9-mz.122-44.SE4.bin

# Copy new IOS firmware from TFTP server.
copy tftp flash
# Follow the prompts and provide server IP and file name.

# Configure and verify boot file.
show boot

config t
boot system switch all flash:/c3750-ipservicesk9-mz.150-2.SE11.bin
exit
show boot

# Apply changes and reload switch.
write memory
reload</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Network Administration: SSH connection errors when connecting to older Cisco devices</title>
		<link>https://jameswsullivan.github.io/network-administration-ssh-connection-errors-when-connecting-to-older-cisco-devices/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Tue, 23 May 2023 03:20:43 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Cisco]]></category>
		<category><![CDATA[Cisco 2951]]></category>
		<category><![CDATA[Cisco IOS]]></category>
		<category><![CDATA[Network Administration]]></category>
		<category><![CDATA[Networking]]></category>
		<category><![CDATA[System Administration]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2555</guid>

					<description><![CDATA[SSH: no matching cipher found]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading">Background:</h2>



<p>When connecting to older Cisco routers and switches (e.g. Cisco 2951, C3750G, C4948-10GE, etc.), it&#8217;s likely that you&#8217;ll encounter one or a combination of the following errors:</p>



<pre class="wp-block-code"><code>Unable to negotiate with &lt;ip-address-of-the-device> port 22: no matching key exchange method found. Their offer: diffie-hellman-group1-sha1</code></pre>



<pre class="wp-block-code"><code>Unable to negotiate with &lt;ip-address-of-the-device> port 22: no matching cipher found. Their offer: aes128-cbc,3des-cbc,aes192-cbc,aes256-cbc</code></pre>



<h2 class="wp-block-heading">Solution:</h2>



<pre class="wp-block-code"><code>For the first error, run:

ssh -c aes256-cbc username@&lt;ip-address-of-the-device></code></pre>



<p>For the second error, run:</p>



<pre class="wp-block-code"><code>ssh -oKexAlgorithms=+diffie-hellman-group1-sha1 -c aes256-cbc username@&lt;ip-address-of-the-device></code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Docker Administration: Docker Networking (ipvlan)</title>
		<link>https://jameswsullivan.github.io/docker-administration-docker-networking-ipvlan/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Fri, 03 Feb 2023 04:19:00 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Docker]]></category>
		<category><![CDATA[Hosting]]></category>
		<category><![CDATA[IPVLAN]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[Network Administration]]></category>
		<category><![CDATA[Networking]]></category>
		<category><![CDATA[Self-Hosting]]></category>
		<category><![CDATA[Web Hosting]]></category>
		<guid isPermaLink="false">https://www.alexchen.net/?p=2115</guid>

					<description><![CDATA[Create ipvlan docker networks.]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading">Background:</h2>



<p>My home lab&#8217;s network is organized and controlled by IPs, access-lists, etc., via Cisco routers and switches, so I wanted my Docker host and containers to have static IP addresses and be within the same IP segment and add custom DNS records to my DNS servers to resolve to them. The Docker networking part is fairly straightforward, but what&#8217;s inconvenient is how Docker Desktop for Windows and WSL2 handle their networking part behind the scene. WSL2 gets its own vEthernet adapter with an IP in the 172.0.0.0 range and the containers get placed in a different 172.0.0.0 network segment and assigned with dynamic IPs and depending on how the Hyper-V and WSL2 backend handles the routing and switching, it&#8217;s rather difficult (if not impossible) to easily assign static IPs to the containers within the same IP segment as the host machine and make them part of the same subnet for easy access. After a couple of hours fiddling around with different solutions I basically gave up on it as it&#8217;s really not worth the time and efforts doing so, I opted to have a dedicated <a href="https://jameswsullivan.github.io/linux-administration-install-docker-on-ubuntu-server/">Hyper-V VM running Ubuntu Server as the Docker host</a>.</p>



<h2 class="wp-block-heading">Solution:</h2>



<p>On an Ubuntu Server the networking part becomes straightforward.</p>



<p>Assuming that the Docker host VM has the IP address of 192.168.1.100/24 (this is the IP assigned to interface <strong>eth0</strong>). To find out what IP the <code>eth0</code> interface is using, run:</p>



<pre class="wp-block-code"><code>ip address show eth0</code></pre>



<p>Create an <strong><a href="https://docs.docker.com/network/ipvlan/" target="_blank" rel="noreferrer noopener">ipvlan</a></strong> network:</p>



<pre class="wp-block-code"><code>docker network create --driver ipvlan --subnet=192.168.1.0/24 --gateway=192.168.1.1 -o ipvlan_mode=l2 -o parent=eth0 docker_dev_net</code></pre>



<p>And then we can create containers using this network and assign static IPs to them:</p>



<pre class="wp-block-code"><code># Let's use ubuntu/mysql Docker image as an example:

docker run -dit --name MySQL_DEV --network docker_dev_net --ip 192.168.1.101 -p 3306:3306 -p 22:22 -e MYSQL_ROOT_PASSWORD=password ubuntu/mysql

# Make sure you add the corresponding DNS entries to your DNS server or router. e.g., on my Cisco router:

ip host MySQL_DEV.mydomain 192.168.1.101</code></pre>



<p>After the containers are running, test the connection with PowerShell:</p>



<pre class="wp-block-code"><code>Test-NetConnection -ComputerName MySQL_DEV.mydomain -Port 3306</code></pre>



<p></p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
