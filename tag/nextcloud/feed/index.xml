<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Nextcloud &#8211; howdy</title>
	<atom:link href="/tag/nextcloud/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description></description>
	<lastBuildDate>Sat, 01 Apr 2023 01:57:59 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.2</generator>
	<item>
		<title>Self-signed SSL Certificate, Apache, and Nextcloud</title>
		<link>/self-signed-ssl-certificate-apache-and-nextcloud/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Sun, 19 Sep 2021 20:58:07 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Apache]]></category>
		<category><![CDATA[Docker]]></category>
		<category><![CDATA[Hosting]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[Nextcloud]]></category>
		<category><![CDATA[Self-Hosting]]></category>
		<category><![CDATA[SSL]]></category>
		<category><![CDATA[Ubuntu]]></category>
		<guid isPermaLink="false">https://www.alexchen.net/?p=1622</guid>

					<description><![CDATA[Perfecting SSL configuration on Nextcloud server.]]></description>
										<content:encoded><![CDATA[
<p>In my last blog post about bringing up a self-hosted Nextcloud setup, everything went well until it reached the SSL cert and configuration part. The instructions I found were all somehow missing some pieces or doing things a little bit differently than what I had expected, plus my own lack of in-depth understanding of SSL, I finally had my issues resolved with the help of these resources: <a rel="noreferrer noopener" href="https://stackoverflow.com/questions/46349459/chrome-neterr-cert-authority-invalid-error-on-self-signing-certificate-at-loca?rq=1" data-type="URL" data-id="https://stackoverflow.com/questions/46349459/chrome-neterr-cert-authority-invalid-error-on-self-signing-certificate-at-loca?rq=1" target="_blank">article 1</a>, <a rel="noreferrer noopener" href="https://alexanderzeitler.com/articles/Fixing-Chrome-missing_subjectAltName-selfsigned-cert-openssl/" data-type="URL" data-id="https://alexanderzeitler.com/articles/Fixing-Chrome-missing_subjectAltName-selfsigned-cert-openssl/" target="_blank">article 2</a>, <a rel="noreferrer noopener" href="https://superuser.com/questions/1631692/why-is-chrome-not-trusting-imported-self-signed-root-ca" data-type="URL" data-id="https://superuser.com/questions/1631692/why-is-chrome-not-trusting-imported-self-signed-root-ca" target="_blank">article 3</a>, <a rel="noreferrer noopener" href="https://www.youtube.com/watch?v=e8vMTlobW3c" data-type="URL" data-id="https://www.youtube.com/watch?v=e8vMTlobW3c" target="_blank">video</a>.</p>



<h2 class="wp-block-heading">Issues<strong>:</strong></h2>



<ul>
<li>SSL/HTTPS won&#8217;t go into effect even if I&#8217;ve enabled SSL in Apache, generated the certs, and configured the config files.</li>



<li>HTTPS goes into effect in Firefox but always said &#8220;Not Secure&#8221; or &#8220;Invalid&#8221; cert in Chrome.</li>



<li>Chrome errors: &#8220;NET::ERR_CERT_AUTHORITY_INVALID&#8221;, &#8220;NET::ERR_CERT_COMMON_NAME_INVALID&#8221;</li>
</ul>



<h2 class="wp-block-heading">Solutions:</h2>



<p>1. Originally, I followed this article to generate my certs, but the cert won&#8217;t get accepted by Chrome even if I&#8217;ve imported it into Trusted Root Certification Authorities store. The certificate generation procedures that worked are:</p>



<pre class="wp-block-code"><code># Generate a Certificate Authority (CA)

openssl genrsa -des3 -out nextcloudCA.key 2048
# A password needs to be created after this command is run.

openssl req -x509 -new -nodes -key nextcloudCA.key -sha256 -days 365 -out nextcloudCA.pem
# A series of information will be asked after this command is run. You can customize your own or just follow whatever is in the &#91;dn] section below.

openssl x509 -outform pem -in nextcloudCA.pem -out nextcloudCA.crt
# Generate a crt file for future import. The pem file can also be used for import.

# Prepare the v3.ext and config files.
# cert.csr.cnf file
&#91;req]
default_bits = 2048
prompt = no
default_md = sha256
distinguished_name = dn

&#91;dn]
C=Replace-with-Your-Info
ST=Replace-with-Your-Info
L=Replace-with-Your-Info
O=Replace-with-Your-Info
OU=Replace-with-Your-Info
emailAddress=Replace-with-Your-Info
CN=Replace-with-Your-Info

# v3.ext file
authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
subjectAltName = @alt_names

&#91;alt_names]
DNS.1 = Replace-with-Your-Info-Or-Delete-Line
DNS.2 = Replace-with-Your-Info-Or-Delete-Line
DNS.3 = Replace-with-Your-Info-Or-Delete-Line
IP.1 = Replace-with-Your-Info-Or-Delete-Line
IP.2 = Replace-with-Your-Info-Or-Delete-Line

# Generate the domain name cert
openssl req -new -sha256 -nodes -out nextcloudDNCert.csr -newkey rsa:2048 -keyout nextcloudDNCert.key -config cert.csr.cnf

openssl x509 -req -in nextcloudDNCert.csr -CA nextcloudCA.crt -CAkey nextcloudCA.key -CAcreateserial -out nextcloudDNCert.crt -days 365 -sha256 -extfile v3.ext</code></pre>



<p>2. Put your cert files (<strong>nextcloudDNCert.crt</strong> and <strong>nextcloudDNCert.key</strong>) in the directories that&#8217;s suitable for your setup, and modify your SSL config file or the nextcloud.conf file to point to the cert files. Sample config files can be downloaded here: <a rel="noreferrer noopener" href="https://github.com/jameswsullivan/blog-file-share/blob/main/sample.nextcloud.conf" target="_blank">sample.nextcloud.conf</a> .</p>



<pre class="wp-block-code"><code># Under /etc/apache2/sites-available, modify nextcloud.conf .

SSLCertificateFile Your-Cert-File-Path
SSLCertificateKeyFile Your-Cert-Key-File-Path</code></pre>



<p>3. Restart Apache service</p>



<pre class="wp-block-code"><code>service apache2 restart</code></pre>



<p>4. Import <strong>nextcloudCA.crt</strong> into your Trusted Root Certification Authorities store, clear your browser&#8217;s cookies, restart the browser and access your Nextcloud server again, this time the HTTPS padlock should be solid grey, no &#8220;Not Secure&#8221; and other errors.</p>



<p>5. Explanation about the &#8220;NET::ERR_CERT_AUTHORITY_INVALID&#8221; and &#8220;NET::ERR_CERT_COMMON_NAME_INVALID&#8221; errors.</p>



<p>&#8220;NET::ERR_CERT_AUTHORITY_INVALID&#8221; is due to how the certs were generated, when using <a rel="noreferrer noopener" href="https://betterprogramming.pub/how-to-create-trusted-ssl-certificates-for-your-local-development-13fd5aad29c6" data-type="URL" data-id="https://betterprogramming.pub/how-to-create-trusted-ssl-certificates-for-your-local-development-13fd5aad29c6" target="_blank">this method</a> to generate, I always got the error, but after I switched to the method written in #1 and the certs were properly imported, this error was gone.</p>



<p>&#8220;NET::ERR_CERT_COMMON_NAME_INVALID&#8221; . Assuming you already put in the Common Name (which is your FQDN, e.g. nextcloud.mydomain.com) correctly when generating the certs and it still gave this error, check the @alt_names section above, make sure all the DNS.x and IP.x entries cover all your alt_name variants. Once I added stuff under the alt_names section correctly (for me it&#8217;s &#8220;localhost&#8221;, my server&#8217;s IP, and the &#8220;subdomain&#8221; URL I&#8217;d like to use in my own environment), the error was gone.</p>



<p>6. Other issues and thoughts that emerged during the troubleshooting process.</p>



<ol>
<li>Some mentioned that Chrome versions played a role in accepting self-signed certs. But my issues were resolved without dealing with Chrome versions.</li>



<li>I&#8217;ve seen posts mentioning the <code>chrome://flags/#allow-insecure-localhost</code> flag, but it didn&#8217;t apply to my scenario.</li>



<li>Some articles say that self-signed certs won&#8217;t be deemed secure and valid by browsers/OSs/Chrome, which is not true if the certs are generated imported and generated correctly.</li>
</ol>



<p>7. Security hardening &#8211; forcing HTTPS, Strict-Transport-Security, and URL redirections. See <a href="https://github.com/jameswsullivan/blog-file-share/blob/main/sample.nextcloud.conf" data-type="URL" data-id="https://drive.google.com/file/d/1QQRGrROpZhrnDc-ET8mDUfj2EjtHzAnK/view?usp=sharing" target="_blank" rel="noreferrer noopener">sample.nextcloud.conf</a> and its comments for details.</p>



<p>8. Apache&#8217;s SSL config files, which to use?</p>



<p>Assuming your installation is very similar to mine, you&#8217;d now have 3 files under /etc/apache2/sites-available : 000-default.conf, default-ssl.conf, and nextcloud.conf . </p>



<ul>
<li>000-default.conf is a template for you to start with, not a live file to use.</li>



<li>default-ssl.conf is the default Apache SSL config file.</li>



<li>nextcloud.conf is the config file for Nextcloud.</li>
</ul>



<p>You can choose either to use default-ssl.conf or nextcloud.conf, or a combination of both and use them for different purposes. I disabled default-ssl.conf by renaming it to default-ssl.conf.bak, and left nextcloud.conf active which has all my configs.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Self-host Nextcloud</title>
		<link>/self-host-nextcloud/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Sat, 18 Sep 2021 11:43:43 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Apache]]></category>
		<category><![CDATA[Docker]]></category>
		<category><![CDATA[Hosting]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[Nextcloud]]></category>
		<category><![CDATA[Self-Hosting]]></category>
		<category><![CDATA[Ubuntu]]></category>
		<category><![CDATA[Web Hosting]]></category>
		<guid isPermaLink="false">https://www.alexchen.net/?p=1597</guid>

					<description><![CDATA[Take back control of your privacy with self-hosted Nextcloud.]]></description>
										<content:encoded><![CDATA[
<p><em>I used to trust Google more when they were under the leadership of Larry Page and Sergey Brin and held up their &#8220;Don&#8217;t Do Evil&#8221; motto, and I used to admire them more when they had the balls to stand up against China&#8217;s censorship. But nowadays Google has become more of a censorship giant itself by implementing the radical left&#8217;s communist political agenda, and its ever increasing intrusion to our privacy is just too concerning. Luckily, there are plenty open source alternatives.</em></p>



<h2 class="wp-block-heading">Installation:</h2>



<p><strong>Environment:</strong> Windows Server 2019 + Hyper-V</p>



<p><strong>Linux version:</strong> Ubuntu 20.04 LTS</p>



<p><strong>LAMP Stack:</strong> PHP8.0, MariaDB, Apache</p>



<p>My main reference sources are from <a rel="noreferrer noopener" href="https://docs.nextcloud.com/server/latest/admin_manual/installation/example_ubuntu.html" data-type="URL" data-id="https://docs.nextcloud.com/server/latest/admin_manual/installation/example_ubuntu.html" target="_blank">this article</a> and <a rel="noreferrer noopener" href="https://www.itzgeek.com/how-tos/linux/debian/how-to-install-apache-mariadb-php-lamp-stack-on-debian-11.html" data-type="URL" data-id="https://www.itzgeek.com/how-tos/linux/debian/how-to-install-apache-mariadb-php-lamp-stack-on-debian-11.html" target="_blank">this article</a>, however, some commands are slightly modified to fit my needs.</p>



<pre class="wp-block-code"><code># Become root
sudo -i

# Install Apache
apt-get update -y
apt-get install -y apache2 apache2-utils
systemctl status apache2
# After installation, visit http://localhost/ to verify that Apache is running.

# Install MariaDB
apt-get install -y mariadb-server mariadb-client
systemctl status mariadb
mysql_secure_installation

# Install PHP8.0 (the default PHP version might be PHP7.4, I completely skipped what was in the original article and went with PHP8.0)
apt-get install software-properties-common -y
add-apt-repository ppa:ondrej/php
apt-get update -y
apt-get install php8.0 libapache2-mod-php8.0 -y
systemctl restart apache2

apt-get update -y
apt-get install php8.0-fpm libapache2-mod-fcgid -y
a2enmod proxy_fcgi setenvif
a2enconf php8.0-fpm
systemctl restart apache2

# Install other modules for Nextcloud
apt-get install -y php8.0-gd php8.0-mysql php8.0-curl php8.0-mbstring php8.0-intl
apt-get install -y php8.0-gmp php8.0-bcmath php-imagick php8.0-xml php8.0-zip


# Create MySQL database
sudo /etc/init.d/mysql start
mysql -u root -p

CREATE USER 'username'@'localhost' IDENTIFIED BY 'password';

# In the next query, you'll need to remove all the dashes because WordPress's code block editor has problems with the the charset portion of the query by giving a "Publishing failed. The response is not a valid JSON response." error.

CREATE DATABASE IF NOT EXISTS nextcloud CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;

GRANT ALL PRIVILEGES ON nextcloud.* TO 'username'@'localhost';
FLUSH PRIVILEGES;

quit;</code></pre>



<p>Download Nextcloud server package from <a rel="noreferrer noopener" href="https://nextcloud.com/install/" target="_blank" data-type="URL" data-id="https://nextcloud.com/install/">here</a>.</p>



<pre class="wp-block-code"><code># My Downloads folder path is /home/*username*/Downloads, and the current version Nextcloud build I use is nextcloud-22.1.1.zip .
cd /home/*username*/Downloads
unzip nextcloud-22.1.1.zip

# Copy to Apache document root
cp -r nextcloud /var/www/html</code></pre>



<p>Next, configure the Apache web server. <a rel="noreferrer noopener" href="https://docs.nextcloud.com/server/latest/admin_manual/installation/source_installation.html#apache-configuration-label" data-type="URL" data-id="https://docs.nextcloud.com/server/latest/admin_manual/installation/source_installation.html#apache-configuration-label" target="_blank">Reference article</a>.</p>



<pre class="wp-block-code"><code># Use your favorite text editor in Linux to create the nextcloud.conf file under /etc/apache2/sites-available/nextcloud.conf .

# I used directory based installation, so I added the following in nextcloud.conf

Alias /nextcloud "/var/www/html/nextcloud/"

&lt;Directory /var/www/html/nextcloud/>
  Require all granted
  AllowOverride All
  Options FollowSymLinks MultiViews

  &lt;IfModule mod_dav.c>
    Dav off
  &lt;/IfModule>
&lt;/Directory>


# Enable modules and sites
a2ensite nextcloud.conf
a2enmod rewrite
a2enmod headers
a2enmod env
a2enmod dir
a2enmod mime
a2enmod setenvif
systemctl reload apache2


# Enable SSL
a2enmod ssl
a2ensite default-ssl
systemctl reload apache2

# Change directory permission
chown -R www-data:www-data /var/www/html/nextcloud/</code></pre>



<p>Now, Nextcloud should be working, the next few steps are very straightforward through Nextcloud&#8217;s setup page.</p>



<h2 class="wp-block-heading">Post-setup configs and troubleshooting:</h2>



<ol>
<li>Add Trusted Domain in Nextcloud&#8217;s config files. <a rel="noreferrer noopener" href="https://help.nextcloud.com/t/howto-add-a-new-trusted-domain/26" data-type="URL" data-id="https://help.nextcloud.com/t/howto-add-a-new-trusted-domain/26" target="_blank">Ref.</a></li>



<li>Increase PHP memory_limit.</li>



<li>View phpinfo.</li>
</ol>



<pre class="wp-block-code"><code># 1. In your nextcloud directory, /var/www/html/nextcloud/config , find the config.php file and edit the line with 'trusted_domain'. Assuming you'll access your nextcloud using 'localhost', '192.168.0.2', and 'my_nextcloud' , write the trusted_domain like below.

  'trusted_domains' =&gt;
  array (
    0 =&gt; 'localhost',
    1 =&gt; '192.168.0.29',
    2 =&gt; 'my_nextcloud',
  ),

# 2. Change line memory_limit to a desired value in both /etc/php/8.0/fpm/php.ini and /etc/php/8.0/apache2/php.ini , e.g. memory_limit=512M, and then restart the services.

service php8.0-fpm restart
service apache2 restart

# 3. Create a info.php file in document root to verify php info.

cd /var/www/html/
touch info.php

# Add the following to info.php using your favorite text editor.

&lt;?php phpinfo(); ?&gt;

# Visit info.php in a browser to view phpinfo.</code></pre>



<p>Useful MariaDB/MySQL commands:</p>



<pre class="wp-block-code"><code># Find out usernames, databases, ports
mysql -u root -p
SELECT User FROM mysql.user;
SHOW GLOBAL VARIABLES IKE 'PORT';
SHOW DATABASES;</code></pre>



<p>Disable (to not enforce) 2FA in Nextcloud:</p>



<pre class="wp-block-code"><code># In file /var/www/html/nextcloud/config/config.php, change the following.

‘twofactor_enforced’ =&gt; ‘false’</code></pre>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
