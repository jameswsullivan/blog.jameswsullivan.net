<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Software Development &#8211; howdy</title>
	<atom:link href="https://jameswsullivan.github.io/tag/software-development/feed/" rel="self" type="application/rss+xml" />
	<link>https://jameswsullivan.github.io/</link>
	<description></description>
	<lastBuildDate>Tue, 20 Jun 2023 17:40:18 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.2.2</generator>
	<item>
		<title>Skip Ctrl+P and Ctrl+Q in VS Code Shell/Terminal</title>
		<link>https://jameswsullivan.github.io/vs-code-commands-to-skip-shell/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Sat, 17 Jun 2023 19:25:17 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Software Development]]></category>
		<category><![CDATA[Visual Studio Code]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2564</guid>

					<description><![CDATA[Skip Ctrl+P and Ctrl+Q in VS Code Shell/Terminal using terminal.integrated.commandsToSkipShell in defaultSettings.json.]]></description>
										<content:encoded><![CDATA[
<p>Refer to this issue: <a href="https://github.com/microsoft/vscode/issues/94268">VS Code eats terminal keyboard shortcuts</a></p>



<h2 class="wp-block-heading">Solution:</h2>



<pre class="wp-block-code"><code>Go to VS Code - Manage - Settings (Ctrl + ,) - Features - Terminal - Integrated: commands To Skip Shell

Or, open VS Code - Manage - Settings - Search settings - search for:

terminal.integrated.commandsToSkipShell
or 
open the default settings JSON (defaultSettings.json)

And modify the corresponding section as follows:

"terminal.integrated.commandsToSkipShell": &#91;
      "-workbench.action.quickOpen",
      "-workbench.action.quickOpenView"
]</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Code Signing Certificate for your application</title>
		<link>https://jameswsullivan.github.io/code-signing-certificate-for-your-application/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Sat, 17 Jun 2023 18:56:18 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Code Signing]]></category>
		<category><![CDATA[CodeSigningCert]]></category>
		<category><![CDATA[Software Development]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2561</guid>

					<description><![CDATA[Sign your self-made applications with self-signed code signing certificate.]]></description>
										<content:encoded><![CDATA[
<p>Some organizations have self-made applications they use internally that are not signed with well-known code signing certificates, which Windows will prompt the follow Security Warning when the apps are being opened:</p>



<pre class="wp-block-code"><code>Open File - Security Warning
The publisher could not be verified. Are you sure you want to run this software?</code></pre>



<p>This warning is typically benign and most sys admins know what they are doing when running such applications, but if an app is being distributed to client workstations and end users see this message, they might be deterred (which is a good thing) or cause unnecessary complaints to the help desk.</p>



<p>Here is how you can generate self-signed code signing certificates and sign your application. After the cert is generated and signed, all you need to do is deploy the cert to your client machines (using GPO or other RMM tools).</p>



<h2 class="wp-block-heading">Steps:</h2>



<p>1 &#8211; Either use Visual Studio or install the <a href="https://developer.microsoft.com/en-us/windows/downloads/windows-sdk/">Windows SDK</a> which includes the <a href="https://learn.microsoft.com/en-us/windows/win32/seccrypto/signtool">Microsoft SignTool</a>.</p>



<p>2 &#8211; Generate a certificate:</p>



<pre class="wp-block-code"><code>$cert = New-SelfSignedCertificate -DNSName "www.yourdomain.com" -CertStoreLocation Cert:\LocalMachine\My -Type CodeSigningCert -Subject "YOUR_APPLICATION_NAME"</code></pre>



<p>3 &#8211; Export the certificate into a .pfx certificate file using &#8220;Manage computer certificates&#8221; or the <a href="https://learn.microsoft.com/en-us/powershell/module/pki/export-pfxcertificate?view=windowsserver2022-ps">Export-PfxCertificate</a> cmdlet.</p>



<p>4 &#8211; Use the SignTool to sign the exe file with the exported .pfx certificate.</p>



<pre class="wp-block-code"><code>signtool sign /f YOUR_CERT_FILE.pfx /p YOUR_CERT_PASS /fd SHA256 "YOUR .EXE"


If you encounter the following error, set the PATH to your signtool.exe file using the following command:

<em>'Signtool' is not recognized as an internal or external command, operable program or batch file.</em>

set PATH=&lt;full-path-to-your-signtool.exe>;%PATH%</code></pre>



<p>5 &#8211; Deploy the certificate and the signed exe file to client workstations.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Docker Commands</title>
		<link>https://jameswsullivan.github.io/docker-commands/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Wed, 29 Mar 2023 02:18:34 +0000</pubDate>
				<category><![CDATA[notes]]></category>
		<category><![CDATA[Docker]]></category>
		<category><![CDATA[Software Development]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2249</guid>

					<description><![CDATA[Docker commands study note.]]></description>
										<content:encoded><![CDATA[
<pre class="wp-block-code"><code># Docker Swarm
docker swarm init
docker service create --name webapp1 --replicas=6 nginx
docker swarm update --autolock=true
docker swarm unlock-key
docker node update --availability drain &lt;NODE&gt;

docker service ls
docker swarm visualizer
docker inspect

# Docker Stack
docker stack deploy --compose-file docker-stack.yml NAME_OF_STACK
docker stack ls
docker stack ps
docker stack services NAME_OF_STACK
docker service update 
docker service update --publish-add published=8080,target-8080 SERVICE_NAME
docker service update --mount-add type=volume, source=web-vol,target=/web-vol-dir SERVICE_NAME
docker service create --mode global --name global-service nginx
docker node update --label-add LABEL_NAME NODE_NAME
docker node inspect NODE_NAME

# MISC Commands
docker image inspect
docker image history

docker build --squash -f dockerfile_name .
docker container run -d nginx
docker container export CONTAINER_NAME &gt; nginx.tar
docker image import nginx.tar

docker save 
docker image prune
docker system prune

docker commit CONTAINER_ID repo:tag

docker attach CONTAINER_NAME
docker logs CONTAINER_NAME
docker kill CONTAINER_ID or CONTAINER_NAME
docker stop CONTAINER_ID or CONTAINER_NAME
docker run --memory MAXIMUM_ALLOWED_MEMORY
docker run --cpu-shares

docker run -it -p HOST_PORT_NUMBER:CONTAINER_PORT_NUMBER/PROTOCOL --name CONTAINER_NAME IMAGE_NAME

docker port CONTAINER_NAME

docker rmi IMAGE_NAME:TAG
docker rmi IMAGE_ID

docker run -it -v PATH_ON_HOST:MOUNT_POINT_IN_CONTAINER IMAGE_NAME bash

docker search IMAGE_NAME
docker login
docker tag
docker push

docker inspect --format '{{.State.Pid}}' CONTAINER_NAME
docker run -it --rm --priviledged=true --pid=host ubuntu bash

docker run -d -p 5000:5000 --restart=always --name registry registry:2


docker exec -it MySQL mysql --local-infile=1 -u root -p
</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>用Google App Engine部署OPM镜像</title>
		<link>https://jameswsullivan.github.io/deploy-opera-mini-server-mirror-with-google-app-engine/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Tue, 24 Aug 2010 23:20:00 +0000</pubDate>
				<category><![CDATA[archive]]></category>
		<category><![CDATA[DevOps]]></category>
		<category><![CDATA[Google App Engine]]></category>
		<category><![CDATA[Java]]></category>
		<category><![CDATA[Proxy]]></category>
		<category><![CDATA[Software Development]]></category>
		<category><![CDATA[VPN]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2612</guid>

					<description><![CDATA[用Google App Engine部署OPM(Opera Mini Server Mirror)镜像用于翻墙]]></description>
										<content:encoded><![CDATA[
<blockquote class="wp-block-quote">
<p>此文系早年博客的备份，仅用于参考学习。<br>This article is an archival copy of my early years&#8217; blog posts.</p>
</blockquote>



<p>这个教程网上已经有很多了，写在这里一来为了方便大众，二来给自己当作笔记。</p>



<p>下载文后的opm压缩包和 Google App Engine SDK for Java 1.3.5 ，将二者解压至某目录。如，将解压后的java-sdk文件夹命名为sdk放在D盘根目录下，然后将解压后的opm文件夹放入<code>d:\sdk</code>。</p>



<p>用任何文本编辑器打开&nbsp; <code>opm/war/WEB-INF/appengine-web.xml</code>&nbsp; 文件，找到一行<code>your-application-id</code>把<code>your-application-id</code>改成你对应的Google App的名称，修改后保存。</p>



<p>进入命令行（运行cmd）</p>



<p>进入刚才的d:\sdk目录，再cd进入bin目录，在提示符下输入如下命令：</p>



<p><code>appcfg.cmd update d:\sdk\opm\war</code></p>



<p>其中update之后即为刚才的opm文件夹。</p>



<p>接下来会有提示输入Gmail地址和密码，注意，输入密码时屏幕上什么都不提示。</p>



<p>最后，等待上传完成，当出现下面一行提示时则上传成功：<code>Update completed successfully</code></p>



<p>上传好后测试一下，浏览</p>



<pre class="wp-block-code"><code>http:&#47;&#47;your-application-id.appspot.com/opm
http://your-application-id.appspot.com/ucweb</code></pre>



<p>如果跳到Google首页，表示成功了。</p>



<p>接下来若有需要请参照此教程修改Android版的Opera Mini的服务器地址为上面的地址（UCWeb修改方法请自行Google）。</p>



<p>这里下载opm镜像文件包：<a rel="noreferrer noopener" href="https://code.google.com/archive/p/opm-server-mirror/" target="_blank">opm-mirror</a></p>



<p>关键字：用Google app engine搭建opm服务器，用GAE搭建opera mini镜像服务器</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>修改Android版Opera Mini的服务器实现翻墙</title>
		<link>https://jameswsullivan.github.io/modify-opera-mini-android-apk-to-use-with-your-own-opm-mirror-on-gae/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Sat, 14 Aug 2010 04:28:00 +0000</pubDate>
				<category><![CDATA[archive]]></category>
		<category><![CDATA[DevOps]]></category>
		<category><![CDATA[Java]]></category>
		<category><![CDATA[Proxy]]></category>
		<category><![CDATA[Software Development]]></category>
		<category><![CDATA[VPN]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2616</guid>

					<description><![CDATA[修改Android版Opera Mini的服务器以实现用自搭建的GAE OPM服务器来翻墙]]></description>
										<content:encoded><![CDATA[
<blockquote class="wp-block-quote">
<p>此文系早年博客的备份，仅用于参考学习。<br>This article is an archival copy of my early years&#8217; blog posts.</p>
</blockquote>



<h2 class="wp-block-heading">修改Android版Opera Mini 4.2:</h2>



<p>注：本文所用文本编辑器为UltraEdit。</p>



<ol>
<li>先此处下载并安装JRE：<br><code>http://www.java.com/en/download/index.jsp<br></code>如果你已经安装了<code>JRE</code>或者<code>JDK</code>，请跳过此步。</li>



<li>点击此处下载我打包的<code>opm4</code>修改包，将其解压至某目录，这里以D盘根目录为例，解压后的目录为：<code>D:\opm4</code>。</li>



<li>用文本编辑器打开<code>D:\opm4\opm\Code.smali</code>，将 <code>http://server4.operamini.com:80/</code> 和 <code>socket://server4.operamini.com:1080</code> 都改成你自己架设的OPM服务器地址，<a href="https://jameswsullivan.github.io/deploy-opera-mini-server-mirror-with-google-app-engine/">如这篇文章介绍的利用GAE搭建的Opera Mini服务器地址</a>。修改后保存。（用UltraEdit编辑的话，保存后删除自动生成的bak文件，否则一会儿影响编译）</li>



<li>打开命令行<code>cmd</code>，进入<code>D:\opm4</code>，执行如下命令：<code>java -jar smali.jar -o D:\opm4\classes.dex D:\opm4\opm</code>（此行命令的意思是将<code>opm</code>文件夹打包成<code>classes.dex</code>文件）</li>
</ol>



<ol start="5">
<li>到此处下载Android版OPM的安装包：<br><code>http://opm-server-mirror.googlecode.com/files/opm4.apk<br></code>下载后放入<code>opm4</code>文件夹。</li>



<li>将<code>opm4.apk</code>改名为<code>opm4.zip</code>，用任意压缩工具打开（是打开，不是解包），删除里面的<code>META-INF</code>文件夹，并把刚刚生成好的 <code>D:\opm4\classes.dex</code> 拖进<code>opm4.zip</code>替换掉原始的<code>classes.dex</code>。</li>



<li>把修改过的<code>opm4.zip</code>放入修改包中的<code>Auto-Sign</code>的目录下，运行里面的<code>sign.bat</code>。</li>



<li>如果你在<code>Auto-Sign</code>的目录里面看见<code>your_app_signed.apk</code>的话，则证明已经修改工作已经完成了。在手机中安装前记得卸载先前的版本。</li>



<li>若修改包中有文件出现异样，请到如下网址下载：<br>下载smali： <code>http://smali.googlecode.com/files/smali.jar</code><br>下载反编译过的的Android版OPM源代码： <code>http://opm-server-mirror.googlecode.com/files/android_opera_classes.zip</code></li>
</ol>



<h2 class="wp-block-heading">修改Android版Opera mini 5.1：</h2>



<ol>
<li>点击这里下载修改包，解压至某目录，这里以<code>D:\opm5</code>为例。</li>



<li>打开命令行<code>cmd</code>，进入<code>D:\opm5</code>，执行<code>apktool d opera-mini-51.apk opm</code>（此命令意思是将你的<code>apk</code>文件解包到<code>opm</code>目录下，<code>apk</code>文件名和<code>opm</code>目录名是随意的）</li>
</ol>



<ol start="3">
<li>用文本编辑工具修改修改 <code>opm\smali\f.smali</code> 中的<br><code>http://mini5.opera-mini.net:80/<br>socket://mini5.opera-mini.net:1080</code></li>



<li>为自己搭建的Opera mini服务器地址，比如这里所示的用GAE搭建的镜像服务器。修改后保存。若用UltraEdit编辑，同样请删掉生成的<code>bak</code>文件。再在同目录下运行：<code>apktool b opm opm51.apk</code>（此命令意思是将<code>opm</code>文件夹打包成<code>opm51.apk</code>文件，同样，目录名和文件名可以随意）</li>
</ol>



<ol start="5">
<li>将得到的<code>opm51.apk</code>重命名为<code>opm51.zip</code>，并拖放到<code>Auto-Sign</code>文件夹内，运行<code>sign.bat</code>来签名，得到<code>your_app_signed.apk</code>，即可以拷入手机安装了。</li>
</ol>



<p></p>



<p>关键字：自定义Android版opera mini服务器，android版opera mini翻墙，自定义安卓版opera mini服务器，安卓版opera mini翻墙</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>修改WordPress主题手记</title>
		<link>https://jameswsullivan.github.io/wordpress-theming/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Thu, 30 Jul 2009 00:29:00 +0000</pubDate>
				<category><![CDATA[archive]]></category>
		<category><![CDATA[blog]]></category>
		<category><![CDATA[Apache]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[php]]></category>
		<category><![CDATA[Software Development]]></category>
		<category><![CDATA[Web Hosting]]></category>
		<category><![CDATA[WordPress]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2590</guid>

					<description><![CDATA[自定义WordPress主题。
WordPress Theming.]]></description>
										<content:encoded><![CDATA[
<blockquote class="wp-block-quote">
<p>此文系早年博客的备份，仅用于参考学习。<br>This article is an archival copy of my early years&#8217; blog posts.</p>
</blockquote>



<p>使用Wordpress做博客已经一年多了，印象中自建博以来就一直在使用Studiopress主题，只是中间因为少许习惯的原因和对某项功能的扩展而对其略微做过一些修改。这次着手写这篇文章，源于最近将主题代码全都重写为XHTML Strict、为Studiopress主题增添嵌套评论功能和对Feed进行优化等的一系列更改，为了能让和我一样不懂php、略懂CSS和XHTML的博主也能按自己的喜好对Wordpress主题进行修改，我将修改过程总结于此，以Studiopress主题为例，供读者参考。</p>



<h2 class="wp-block-heading">1. 为不支持嵌套评论的主题添加嵌套评论。</h2>



<p>WordPress从2.7版开始便原生支持嵌套评论，用户不必再借助插件来实现这个功能了。可是，有时自己使用的主题却并不支持嵌套评论，而往往博主又都不太愿意仅仅因此就更换一个使用已久的主题。这时，对主题文件做一点小小的改动来让它支持嵌套评论不失为一个好办法。以下代码可以直接拷贝使用。</p>



<p>打开<code>comments.php</code>，找到原先的显示评论部分的代码：</p>



<pre class="wp-block-code"><code>&lt;?php if ($comments) : ?&gt;
	&lt;h3 id="comments"&gt;&lt;?php comments_number('No Comments', 'One Comment', '% Comments' );?&gt; on &amp;#8220;&lt;?php the_title(); ?&gt;&amp;#8221;&lt;/h3&gt;

	&lt;ol class="commentlist"&gt;

	&lt;?php foreach ($comments as $comment) : ?&gt;
		&lt;li &lt;?php echo $oddcomment; ?&gt;id="comment-&lt;?php comment_ID() ?&gt;"&gt;

			&lt;a href="http://gravatar.com/" rel="external nofollow" class="gravatar"&gt;
			&lt;?php  if (function_exists('get_avatar')) { echo get_avatar( $comment, 69); } else { 
			//alternate gravatar code for &lt; 2.5
				$grav_url = "http://www.gravatar.com/avatar.php?gravatar_id=" . md5($email) . "&amp;default=" . urlencode($default) . "&amp;size=" . $size;
				echo "&lt;img src='$grav_url'/&gt;";}
			?&gt;
			&lt;/a&gt;

			&lt;div class="commentbody"&gt;
			&lt;cite&gt;&lt;?php comment_author_link() ?&gt;&lt;/cite&gt;
			&lt;?php if ($comment-&gt;comment_approved == '0') : ?&gt;
			&lt;em&gt;Your comment is awaiting moderation.&lt;/em&gt;
			&lt;?php endif; ?&gt;
			&lt;br /&gt;

			&lt;small class="commentmetadata"&gt;&lt;a href="#comment-&lt;?php comment_ID() ?&gt;" title=""&gt;&lt;?php comment_date('F jS, Y') ?&gt; at &lt;?php comment_time() ?&gt;&lt;/a&gt; &lt;?php edit_comment_link('edit','&amp;nbsp;&amp;nbsp;',''); ?&gt;&lt;/small&gt;
			&lt;?php comment_text() ?&gt;
			&lt;/div&gt;
		&lt;/li&gt;
		&lt;div class="cleared"&gt;&lt;/div&gt;

	&lt;?php
		/* Changes every other comment to a different class */
		$oddcomment = ( empty( $oddcomment ) ) ? 'class="alt" ' : '';
	?&gt;

	&lt;?php endforeach; /* end for each comment */ ?&gt;

	&lt;/ol&gt;

 	&lt;?php else : // this is displayed if there are no comments so far ?&gt;

		&lt;?php if ('open' == $post-&gt;comment_status) : ?&gt;
			&lt;!-- If comments are open, but there are no comments. --&gt;

	 	&lt;?php else : // comments are closed ?&gt;
			&lt;!-- If comments are closed. --&gt;
			&lt;p class="nocomments"&gt;Comments are closed.&lt;/p&gt;

	&lt;?php endif; ?&gt;
&lt;?php endif; ?&gt;</code></pre>



<p>将上述部分用下面的代码替换掉：</p>



<pre class="wp-block-code"><code>&lt;?php if ( have_comments() ) : ?&gt;
	&lt;h3 id="comments"&gt;&lt;?php comments_number('No Responses', 'One Response', '% Responses' );?&gt; to &amp;#8220;&lt;?php the_title(); ?&gt;&amp;#8221;&lt;/h3&gt;
 
	&lt;ol class="commentlist"&gt;
	&lt;?php wp_list_comments(); ?&gt;
	&lt;/ol&gt;
	&lt;div class="navigation"&gt;
		&lt;div class="alignleft"&gt;&lt;?php previous_comments_link() ?&gt;&lt;/div&gt;
		&lt;div class="alignright"&gt;&lt;?php next_comments_link() ?&gt;&lt;/div&gt;
	&lt;/div&gt;
 &lt;?php else : // this is displayed if there are no comments so far ?&gt;
 
	&lt;?php if ('open' == $post-&gt;comment_status) : ?&gt;
		&lt;!-- If comments are open, but there are no comments. --&gt;
 
	 &lt;?php else : // comments are closed ?&gt;
		&lt;!-- If comments are closed. --&gt;
		&lt;p class="nocomments"&gt;Comments are closed.&lt;/p&gt;
 
	&lt;?php endif; ?&gt;
&lt;?php endif; ?&gt;</code></pre>



<p>仅从代码量上来看，嵌套评论的代码比原先要少了很多。当然这还没完，还需要在下方提交评论的表单中加入：</p>



<pre class="wp-block-code"><code>&lt;?php comment_id_fields(); ?&gt; ，如下：

	&lt;p&gt;
	&lt;input name="submit" type="submit" id="submit" tabindex="5" value="Submit Comment" /&gt;
	&lt;?php comment_id_fields(); ?&gt;
	&lt;input type="hidden" name="comment_post_ID" value="&lt;?php echo $id; ?&gt;" /&gt;
&lt;/p&gt;</code></pre>



<p>以及需要在Wordpress后台的 <code>Settings &gt;&gt; Discussion</code> 中将</p>



<figure class="wp-block-image size-full"><img decoding="async" width="364" height="30" src="https://jameswsullivan.github.io/wp-content/uploads/2023/06/BlogWordPressTheming01.jpg" alt="" class="wp-image-2591" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/06/BlogWordPressTheming01.jpg 364w, https://jameswsullivan.github.io/wp-content/uploads/2023/06/BlogWordPressTheming01-300x25.jpg 300w" sizes="(max-width: 364px) 100vw, 364px" /></figure>



<p>选中，并选择嵌套层数，最多可以支持10层。</p>



<p>做完以上的更改，嵌套评论已经可以实现了。但通常情况下默认样式的嵌套评论很不美观，这时可以通过修改CSS来加以装饰，以下是我的嵌套评论样式，写法很容易看懂，读者即使不懂CSS，也可以仿照下列代码进行修改。</p>



<pre class="wp-block-code"><code>/* Begin Comments*/
.commentlist {
	padding:5px 1px;
	overflow:hidden;
	height:100%;
	}
	
.commentlist ul.parents {
	background:#FFFFEF;
	}
	
.commentlist li.depth-1{
	border-top:1px solid #a8c4d3;
	border-bottom:1px solid #a8c4d3;
	background:#F9FDFF;
	margin-bottom:12px;
	padding:6px 8px;
	} 
	
.commentlist .commenttext {
	margin-left:42px;
	padding-top:8px;
	}
	
.commentlist ul.children {
	overflow:hidden;
	height:100%;
	margin:6px;
	}
	
.commentlist li ul.children li.depth-2,
.commentlist li ul.children li.depth-3,
.commentlist li ul.children li.depth-4,
.commentlist li ul.children li.depth-5,
.commentlist li ul.children li.depth-6,
.commentlist li ul.children li.depth-7,
.commentlist li ul.children li.depth-8,
.commentlist li ul.children li.depth-9,
.commentlist li ul.children li.depth-10 {
 	background:#EDF8FF;
 	border:1px dashed #C7E1EF;
 	padding:8px;
 	margin-bottom:8px;
 	}
 
.commentlist li ul.children li.depth-3,
.commentlist li ul.children li.depth-5,
.commentlist li ul.children li.depth-7,
.commentlist li ul.children li.depth-9 {
	background:#FFFFFF;
	}
	
.commentlist li ul.children li dl {
	background-image:none;
	}
/* End Comments */</code></pre>



<h2 class="wp-block-heading">2. 让Wordpress的RSS Feed真正实现全文输出</h2>



<p>虽然Wordpress的设置里有关于Feed全文输出的选项，安装ozh-better-feed后插件设置项里也有不在Feed中截断文章的选项，可是当文章使用了<code>&lt;!--more--&gt;</code>签之后，Feed中的文章依然随之变成了摘要输出，而且通过调整后台设置无法改变这一状况。既然如此，我们还得依靠修改代码来实现，最简单的修改方式如下：</p>



<p>打开<code>wp-includes/post-template.php</code>文件，找到</p>



<pre class="wp-block-code"><code>if( preg_match(’//’, $content, $matches) ){<br>$content = explode($matches&#91;0], $content, 2);<br>…………</code></pre>



<p>将第一行改为：</p>



<pre class="wp-block-code"><code>if ( preg_match(’//’, $content, $matches) &amp;&amp; !is_feed() ){</code></pre>



<p>最后，再到你的托管商那里重新同步一下Feed，你的Feed就会显示全文输出了。</p>



<h2 class="wp-block-heading">3. 在博客侧边栏上添加delicious和豆瓣代码，与网友共享你的资源</h2>



<h4 class="wp-block-heading">delicious代码：</h4>



<p>登录你的delicious账户，定位到 <code>settings &gt;&gt; Blogging &gt;&gt; Link Rolls</code> ，先在下面的 <code>Display options</code> 里面设置相应的参数，填写要显示的书签数目，最后拷贝代码，到WordPress后台中以Widgets方式或自行修改<code>sidebar.php</code>的方式添加至主题中即可。</p>



<h4 class="wp-block-heading">豆瓣代码：</h4>



<p>登录豆瓣主页，在右下角的地方找到“豆瓣服务（API）”，然后选择“豆瓣秀代码生成器”，一般的Blog选择Javascript代码即可，在下一个页面设置你希望显示的内容，最后拷贝代码至你的博客即可。</p>



<h2 class="wp-block-heading">4. 给文章添加分享&amp;收藏功能</h2>



<p>在浏览其他人的博客时，你是否经常看到文章底部都会有一排链接，可以让你将本文添加至delicious、Googlemarks等地方，方便进行收藏或分享？添加分享&amp;收藏工具栏有几种方法，可以借助插件、手动添加收藏代码以及使用addtoany提供的工具。插件和addtoany都易于使用，因此笔者在这里只提供几个常用的收藏代码。</p>



<pre class="wp-block-code"><code>Del.icio.us:
&lt;a target="_blank" href="http://del.icio.us/post?url=&lt;?php the_permalink() ?&gt;&amp;amp;title=&lt;?php the_title(); ?&gt;"&gt;Del.icio.us&lt;/a&gt;

百度搜藏:
&lt;a target="_blank" href="http://cang.baidu.com/do/add?it=&lt;?php the_title(); ?&gt;&amp;amp;iu=&lt;?php the_permalink() ?&gt;"&gt;百度搜藏&lt;/a&gt;

QQ书签:
&lt;a target="_blank" href="http://shuqian.qq.com/post?from=3&amp;amp;title=&lt;?php the_title(); ?&gt;&amp;amp;uri=&lt;?php the_permalink() ?&gt;"&gt;QQ书签&lt;/a&gt;

Google书签:
&lt;a target="_blank" href="http://google.com/bookmarks/mark?op=edit&amp;amp;bkmk=&lt;?php the_permalink() ?&gt;&amp;amp;title=&lt;?php the_title(); ?&gt;"&gt;Google书签&lt;/a&gt;
</code></pre>



<p>相关文章请参考：<a href="http://l-wy.cn/post/make-the-wordpress-social-bookmark-tool.html">http://l-wy.cn/post/make-the-wordpress-social-bookmark-tool.html</a></p>



<h2 class="wp-block-heading">5. 将主题按照XHTML Strict标准改写</h2>



<p>现在的Wordpress主题大都是以XHTML Transitional的标准写的，如果你希望自己的主题代码更加符合W3C规范，想把它按Strict标准改写的话，需要注意一下几个常见的问题。</p>



<p>1). 首先要将header.php的文件头部改为以下代码：</p>



<pre class="wp-block-code"><code>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
</code></pre>



<p>2). XHTML 1.0 Strict 不支持链接中的 target 属性（如上述收藏代码中的 target 属性），因为标准的制定者认为，是否在新窗口中打开链接应取决于浏览者的喜好，而不应是网站制作者所强制的，因此在Strict标准中取消了对这一属性的支持。如果一定要让链接在新窗口中打开，则需要以JS代码的方式实现。</p>



<p>3). XHTML 1.0 Strict 因为要严格的实行以CSS控制排版的原则，所以它不支持对<code>&lt;p&gt;</code>等元素使用 align 属性。这个现象一般在发布文章时，从word粘贴已排过版的文本的时候发生，建议博主在使用可视化编辑文章之后还要再看一眼代码，免得因为几个不合法的属性而使得本文无法通过W3C验证。</p>



<p>4). 无论是以Transitional 还是 Strict 方式来写代码，形如<code>"&amp;"</code>的字符实体都要写成对应的实体名称或实体代码才能够通过验证，比如上文JS代码中的<code>"&amp;"</code>字符。以下是常用的字符实体及其名称和编号：</p>



<figure class="wp-block-image size-full"><img decoding="async" width="613" height="520" src="https://jameswsullivan.github.io/wp-content/uploads/2023/06/BlogWordPressTheming02.jpg" alt="" class="wp-image-2592" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/06/BlogWordPressTheming02.jpg 613w, https://jameswsullivan.github.io/wp-content/uploads/2023/06/BlogWordPressTheming02-300x254.jpg 300w" sizes="(max-width: 613px) 100vw, 613px" /></figure>



<p>5). 必须在XHTML代码中完全删除类似于<code>&lt;font&gt;</code>等用来控制显示的标签，因为Strict严格的要求以XHTML控制结构，而以CSS来控制布局和显示，所以这些在Transitional中可以被允许的元素，在这里必须以具有同等功效的CSS代码来取代。</p>



<p>最后，在对所有的主题文件、日志内容进行了检查和修改之后，就可以登录 <a href="http://validator.w3.org/">http://validator.w3.org/</a> 来对自己的页面进行验证了。</p>



<p>至此，对Wordpress主题几个部分的修改已经全部完成。</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
