<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Linux &#8211; howdy</title>
	<atom:link href="https://jameswsullivan.github.io/tag/linux/feed/" rel="self" type="application/rss+xml" />
	<link>https://jameswsullivan.github.io/</link>
	<description></description>
	<lastBuildDate>Wed, 22 Nov 2023 01:22:27 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.1</generator>
	<item>
		<title>Refurbish Mac Mini A1347 (Late 2014) &#8211; Part 5 &#8211; Install openSUSE</title>
		<link>https://jameswsullivan.github.io/refurbish-mac-mini-a1347-late-2014-part-4-install-opensuse/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Tue, 21 Nov 2023 22:21:20 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Boot Loader]]></category>
		<category><![CDATA[Kubernetes]]></category>
		<category><![CDATA[KubeSphere]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[Mac Mini]]></category>
		<category><![CDATA[Mac Mini A1347]]></category>
		<category><![CDATA[macOS]]></category>
		<category><![CDATA[openSUSE]]></category>
		<category><![CDATA[rEFInd]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2847</guid>

					<description><![CDATA[Refurbish Mac Mini A1347 (Late 2014) - Part 5 - Install openSUSE and rEFInd.]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading">Background:</h2>



<p>One of the Mac Minis will be used for KubeSphere in a lab environment and I wanted to experiment with openSUSE. However, due to Macs handles the EFI slight differently, both openSUSE&#8217;s default GRUB2 for EFI and GRUB2 Boot Loader configs fail during installation. I&#8217;ve experimented with different combination of settings and openSUSE would not boot successfully once the USB drive is removed. Eventually, <a href="https://www.rodsbooks.com/refind/" target="_blank" rel="noreferrer noopener">rEFInd</a> resolved the problems.</p>



<p>Setup:</p>



<ul>
<li>Mac Mini late-2014 (macmini7,1) with 4GB RAM, 256GB SSD.</li>



<li>openSUSE Leap 15.5, with &#8220;Server&#8221; System Role, (installed natively via USB, without macOS)
<ul>
<li>Partition layout:
<ul>
<li>/dev/sda1 at /boot/eft</li>



<li>/dev/sda2 for / with btrfs</li>



<li>/dev/sda3 at swap</li>
</ul>
</li>



<li>&#8220;Secure Boot&#8221; is disabled under Boot Loader Settings, with Secure Boot Support unchecked.</li>



<li>&#8220;Protective MBR flag&#8221; set to &#8220;remove&#8221; under Boot Loader Settings.</li>
</ul>
</li>
</ul>



<h2 class="wp-block-heading">Issue Details:</h2>



<p>Installation using <code>GRUB2 for EFI</code> fails with the following error at around 93% when Boot Loader configs are being committed:</p>



<pre class="wp-block-code"><code><strong>Error</strong>

Execution of command "&#91;&#91;"/usr/sbin/grub2-install","--target=x86_64-efi","--force","--skip-fs-probe"]]" failed.
Exit code: 1
Error output: Installing for x86_64-efi platform.
Could not prepare Boot variable: invalid argument
/usr/sbin/grub2-install: error: efibootmgr failed to register the boot entry: input/output error.</code></pre>



<p>The installation will finish successfully if &#8220;Update NVRAM Entry&#8221; is unchecked, or use GRUB2 Boot Loader (MBR). However, in both cases, openSUSE is unable to boot successfully without the help of the installation media, the Mac Mini will stuck at the following screen after power-on.</p>



<figure class="wp-block-image size-large"><img fetchpriority="high" decoding="async" width="1024" height="818" src="https://jameswsullivan.github.io/wp-content/uploads/2023/11/mac-flashing-folder-with-question-mark-1024x818.jpg" alt="" class="wp-image-2850" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/11/mac-flashing-folder-with-question-mark-1024x818.jpg 1024w, https://jameswsullivan.github.io/wp-content/uploads/2023/11/mac-flashing-folder-with-question-mark-300x240.jpg 300w, https://jameswsullivan.github.io/wp-content/uploads/2023/11/mac-flashing-folder-with-question-mark-768x614.jpg 768w, https://jameswsullivan.github.io/wp-content/uploads/2023/11/mac-flashing-folder-with-question-mark-700x559.jpg 700w, https://jameswsullivan.github.io/wp-content/uploads/2023/11/mac-flashing-folder-with-question-mark.jpg 1100w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h2 class="wp-block-heading">Solution:</h2>



<p>The solution is fairly straightforward with the help of <a href="https://www.rodsbooks.com/refind/" target="_blank" rel="noreferrer noopener">rEFInd</a>.</p>



<p>1. Install openSUSE using the following Boot Loader Settings:</p>



<ul>
<li>Boot Loader: <code>GRUB2 for EFI</code></li>



<li>Uncheck <code>Secure Boot Support</code></li>



<li>Uncheck <code>Update NVRAM Entry</code></li>



<li><code>Protective MBR flag</code> set to <code>remove</code></li>



<li>Partition layout:
<ul>
<li>/dev/sda1 at /boot/eft</li>



<li>/dev/sda2 for / with btrfs</li>



<li>/dev/sda3 at swap</li>
</ul>
</li>
</ul>



<p>2. After installation finishes, boot openSUSE using the installation media and select <code>More ... -- Boot Linux System</code> , accept default settings and boot to the shell prompt.</p>



<blockquote class="wp-block-quote">
<p>I ran into a minor issue here which my keyboard doesn&#8217;t get recognized, but you should be able to use SSH to connect to the machine and perform the remaining steps. I didn&#8217;t further troubleshoot the driver issue. Also, I had the Mac Mini hardwired for internet so that I don&#8217;t have to load any WiFi drivers, but if you&#8217;re performing the steps on a Mac that doesn&#8217;t have an RJ45 port, you might need to perform extra steps to load the drivers.</p>
</blockquote>



<p>3. Install rEFInd using the following commands:</p>



<pre class="wp-block-code"><code># become root first to make things easy.

cd /tmp

zypper refresh

zypper install -y wget unzip

wget https://phoenixnap.dl.sourceforge.net/project/refind/0.14.0.2/refind-bin-0.14.0.2.zip

unzip refind-bin-0.14.0.2.zip

cd refind-bin-0.14.0.2

./refind-install</code></pre>



<p>After the installation finishes, you might see the following message:</p>



<pre class="wp-block-code"><code>ShimSource is none
Installing rEFInd on Linux....
ESP was found at /boot/efi using vfat
Installing driver for btrfs (btrfs_x64.efi)
Copied rEFInd binary files

Copying sample configuration file as refind.conf; edit this file to configure
rEFInd.

Creating new NVRAM entry

ALERT: There were problems running the efibootmgr program! You may need to
rename the refind_x64.efi binary to the default name (EFI/BOOT/bootx64.efi
on x86-64 systems, EFI/BOOT/bootia32.efi on x86 systems, or
EFI/BOOT/bootaa64.efi on ARM64 systems) to have it run!

Creating //boot/refind_linux.conf; edit it to adjust kernel options.

ALERT:
Installation has completed, but problems were detected. Review the output for
error messages and take corrective measures as necessary. You may need to
re-run this script or install manually before rEFInd will work.</code></pre>



<p>If that&#8217;s the case, perform the following steps:</p>



<pre class="wp-block-code"><code>cd /boot/efi/EFI/

cp -a refind/ BOOT

cd BOOT/

mv refind_x64.efi bootx64.efi</code></pre>



<p>Additionally, if you need to, reset NVRAM using <code>Command/Windows Key + Option/Alt + P + R</code> keys.</p>



<p>Now that you should be able to see the rEFInd boot screen after a reboot, with openSUSE installation media removed. This method should also work for dual boot with macOS, or on other Mac models.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Expand LVM in Ubuntu (22.04 LTS)</title>
		<link>https://jameswsullivan.github.io/expand-lvm-in-ubuntu-22-04-lts/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Sat, 05 Aug 2023 16:06:41 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Docker]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[System Administration]]></category>
		<category><![CDATA[Ubuntu]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2710</guid>

					<description><![CDATA[Expand LVM in Ubuntu 22.04 LTS.]]></description>
										<content:encoded><![CDATA[
<p>This Ubuntu server (Hyper-V VM) in question is a Docker host that was partitioned using the default layout (50/50 split of available disk space) when Ubuntu was installed. After a few month one of the logic volumes <code>/dev/mapper/ubuntu--vg-ubuntu--lv</code> ran out of space. Since there is no GUI for partition management, a few steps will be needed to properly expand the volume size.</p>



<h2 class="wp-block-heading">Solution:</h2>



<p>1. Expand the virtual disk size in Hyper-V manager.</p>



<p>2. On the Ubuntu server, use <code>fdisk -l</code> to identify the disk and <code>df -h</code> to check the disk usage, here we use <code>/dev/sdf</code> (disk) and <code>/dev/mapper/ubuntu--vg-ubuntu--lv</code> (logic volume) as an example.</p>



<p>3. Run <code>parted /dev/sdf print</code> to view partition layout. You&#8217;ll probably get a warning message like this. Which one you choose doesn&#8217;t really matter because we&#8217;re doing the process manually.</p>



<pre class="wp-block-code"><code>Warning: Not all of the space available to /dev/sdf appears to be used, you can fix the GPT to use all of the space (an extra ______ blocks) or continue with the current setting?
Fix/Ignore?</code></pre>



<p>4. After you see the list of partitions, run this command on the partition that you need to expand to resize the partition to use the additional space, here we use partition 3 as an example: <code>parted /dev/sdf resizepart 3 100%</code></p>



<p>5. Resize the Physical Volume using command: <code>pvresize /dev/sdf3</code></p>



<p>6. Now that if you run <code>vgdisplay</code> , you should see the free space listed under <code>Free PE / Size</code>. And make sure you have your volume group name <code>ubuntu-vg</code> ready.</p>



<p>7. Run <code>lvdisplay</code> to identify the logical volume we need to expand, as we discussed above, the one needs expanding is the <code>/dev/ubuntu-vg/ubuntu-lv</code> volume.</p>



<p>8. Run <code>lvextend -l +100%FREE -r /dev/ubuntu-vg/ubuntu-lv</code> to expand the volume.</p>



<p>9. Now run <code>vgdisplay</code> , <code>lvdisplay</code>, and <code>df -h</code> again to verify that the <code>/dev/mapper/ubuntu--vg-ubuntu--lv</code> volume has been successfully expanded. Reboot the system if needed.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Self-host Passbolt</title>
		<link>https://jameswsullivan.github.io/self-host-passbolt/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Mon, 08 May 2023 02:57:53 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Docker]]></category>
		<category><![CDATA[Hosting]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[Nginx]]></category>
		<category><![CDATA[Passbolt]]></category>
		<category><![CDATA[Password Manager]]></category>
		<category><![CDATA[Self-Hosting]]></category>
		<category><![CDATA[Web Hosting]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2427</guid>

					<description><![CDATA[Self-host the Passbolt password manager using self-signed certificate.]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading">Background:</h2>



<ul>
<li>The Passbolt instance is locally hosted and only available in my homelab&#8217;s LAN environment. It&#8217;s not exposed to the internet.</li>



<li>The instance uses a self-signed certificate. See <a href="https://help.passbolt.com/faq/hosting/mobile-faq" target="_blank" rel="noreferrer noopener">official FAQ here</a>.</li>



<li>My test environment: Windows, Ubuntu Server 22.04 LTS, Pixel 5 phone with the Passbolt app. (<a href="https://help.passbolt.com/faq/hosting/how-to-import-ssl-certificate-on-mobile" target="_blank" rel="noreferrer noopener">Install self-signed certificate on Android</a>.)</li>
</ul>



<h2 class="wp-block-heading">Setup:</h2>



<pre class="wp-block-code"><code># Passbolt Docker image.

pull passbolt/passbolt


# Start the container.

docker run -dit \
    --name=YOUR_CONTAINER_NAME \
    --ip IP_ADDRESS --network YOUR_DOCKER_NETWORK \
    --hostname=YOUR_PASSBOLT_HOSTNAME \
    --restart=unless-stopped \
    -e DATASOURCES_DEFAULT_HOST=YOUR_DATABASE_SERVER \
    -e DATASOURCES_DEFAULT_PASSWORD=YOUR_DB_PASSWORD \
    -e DATASOURCES_DEFAULT_USERNAME=YOUR_DB_USER \
    -e DATASOURCES_DEFAULT_DATABASE=YOUR_PASSBOLT_DB_NAME \
    -e APP_FULL_BASE_URL=https://YOUR_PASSBOLT_APP_URL/ \
    passbolt/passbolt


# Generate self-signed certificate

openssl req -x509 \
    -newkey rsa:4096 \
    -days SPECIFY_YOUR_OWN \
    -subj "/C=YOUR_COUNTRY/ST=YOUR_STATE/L=YOUR_CITY/O=YOUR_ORG/OU=YOUR_OU/CN=YOUR_PASSBOLT_APP_URL/" \
    -nodes \
    -addext "subjectAltName = DNS:YOUR_PASSBOLT_APP_URL" \
    -keyout passbolt_self_signed_key.pem \
    -out passbolt_self_signed_cert.pem


# Create your first admin user

docker exec -it YOUR_CONTAINER_NAME bash

su -m -c "/usr/share/php/passbolt/bin/cake passbolt register_user -u YOUR_ADMIN_USER@YOUR_DOMAIN.COM -f YOUR_FIRSTNAME -l YOUR_LASTNAME -r admin" -s /bin/sh www-data


# Edit <em><strong>/etc/nginx/snippets/passbolt-ssl.conf</strong></em> to point to your self-generated certificates.

apt-get install nano -y
nano /etc/nginx/snippets/passbolt-ssl.conf


# Restart nginx

service nginx restart</code></pre>



<h2 class="wp-block-heading">Install the certificates:</h2>



<ul>
<li>Import the <code>passbolt_self_signed_cert.pem</code> certificate into Windows&#8217; <code>Trusted Root Certification Authorities</code>.</li>



<li>On Android devices, go to<br><code>Security &amp; privacy - Encryption &amp; credentials - Install a certificate - CA certificate - Install anyway</code><br>Browse to the passbolt_self_signed_cert.pem cert file and install it.</li>



<li><a href="https://help.passbolt.com/faq/hosting/mobile-faq">Official FAQ on generating self-signed cert.</a></li>



<li><a href="https://help.passbolt.com/faq/hosting/how-to-import-ssl-certificate-on-mobile">Official FAQ on installing cert on Android devices.</a></li>



<li>Browser&#8217;s cache &amp; cookies might need to be cleared for the new cert to take effect.</li>
</ul>



<h2 class="wp-block-heading">Troubleshooting:</h2>



<p>When generating the self-signed certificate, the <code>subjectAltName</code> must be specified, otherwise you&#8217;ll likely encounter this error when scanning the QR code. (<a href="https://community.passbolt.com/t/error-setting-up-mobile-app/5875" target="_blank" rel="noreferrer noopener">See this post.</a>)</p>



<pre class="wp-block-code"><code>There was an error during transfer update(Something went wrong!)</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Docker Containerization of Koha ILS Software</title>
		<link>https://jameswsullivan.github.io/docker-containerization-of-koha-ils-software/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Sun, 07 May 2023 20:30:25 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Apache]]></category>
		<category><![CDATA[Containerization]]></category>
		<category><![CDATA[Docker]]></category>
		<category><![CDATA[Dockerizing]]></category>
		<category><![CDATA[Hosting]]></category>
		<category><![CDATA[KOHA]]></category>
		<category><![CDATA[KOHA ILS]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[Self-Hosting]]></category>
		<category><![CDATA[Ubuntu]]></category>
		<category><![CDATA[Web Hosting]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2389</guid>

					<description><![CDATA[Docker Containerization of the Koha ILS Software using the latest Ubuntu 22.04 LTS image.]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading">Background:</h2>



<p>The majority of instructions I found so far have been installing Koha instances on VMs or standalone servers, <a rel="noreferrer noopener" href="https://bywatersolutions.com/education/koha-testing-docker" target="_blank">ByWater Solution&#8217;s solution</a> (<a rel="noreferrer noopener" href="https://gitlab.com/koha-community/koha-testing-docker" target="_blank">gitlab repo</a>) seem to be the only one out there that&#8217;s a decent attempt. I have been setting things up in my home lab recently and this was one of the test projects.</p>



<h2 class="wp-block-heading">Environment:</h2>



<ul>
<li>My homelab uses a <code>.local</code> domain. The Koha DNS entries look like this: <code>koha-opac.example.local</code> and <code>koha-staff.example.local</code> .</li>



<li>My containers have IP addresses statically assigned.</li>



<li>An <code>ipvlan</code> Docker network named the same as my homelab&#8217;s domain. ( <code>example.local</code> )</li>



<li>DNS resolution is done on both my core router (Cisco 2951) and on the two Domain Controllers.</li>
</ul>



<h2 class="wp-block-heading">Containerization</h2>



<p>This project is documented on <a rel="noreferrer noopener" href="https://github.com/jameswsullivan/KohaContainerization" target="_blank">my GitHub</a>. This is only the first iteration and still has some improvements that I want to make in the future, such as setting it to use a remote MySQL server instead of a local MySQL/MariaDB instance and mounting some volumes for persistent data.</p>



<h2 class="wp-block-heading">Troubleshooting</h2>



<p>Since a Ubuntu container is slightly different than a standalone Ubuntu installation, Koha&#8217;s automatic configurations won&#8217;t work straight out of the box and I needed to make some tweaks.</p>



<h4 class="wp-block-heading"><strong>Issue 1: MPM ITK Apache module warning</strong></h4>



<p>The container has to be run with the <code>--cap-add=SYS_NICE --cap-add=DAC_READ_SEARCH</code> flags added, otherwise you&#8217;ll get this error in the <code>/var/log/apache2/error.log</code> and a 500 server error. (See full <a rel="noreferrer noopener" href="https://github.com/jameswsullivan/KohaContainerization" target="_blank">docker run</a> command.)</p>



<pre class="wp-block-code"><code>&#91;mpm_itk:warn] &#91;pid 746] (itkmpm: pid=746 uid=33, gid=33) itk_post_perdir_config(): setgid(1000): Operation not permitted</code></pre>



<h4 class="wp-block-heading"><strong>Issue 2: MySQL database connection problem.</strong></h4>



<p><strong>In the Koha config file</strong>, <code>/etc/koha/sites/koha/koha-conf.xml</code>, change <code>&lt;hostname&gt;localhost&lt;/hostname&gt;</code> to <code>&lt;hostname&gt;YOUR_CONTAINERS_HOSTNAME&lt;/hostname&gt;</code>. For example, in my <code>docker run</code> command I specified the hostname to be <code>--hostname=koha-opac.YOURDOMAIN.COM</code> , then I&#8217;ll change my <code>&lt;hostname&gt;</code> element to <code>&lt;hostname&gt;koha-opac.YOURDOMAIN.COM&lt;/hostname&gt;</code> or <code>&lt;hostname&gt;<code>koha-opac</code>&lt;/hostname&gt;</code> .</p>



<p><strong>In the MySQL config file</strong>, <code>/etc/mysql/mysql.conf.d/mysqld.cnf</code>, change the <code>bind-address</code> IP from 127.0.0.1 to 0.0.0.0 .</p>



<p>You can manually change these configs or <a rel="noreferrer noopener" href="https://github.com/jameswsullivan/KohaContainerization/blob/main/docker-entrypoint.sh" target="_blank">use a script to programmatically change it</a> with Docker ENTRYPOINT.</p>



<pre class="wp-block-code"><code>sed -i 's/^bind-address.*=.*/bind-address = 0.0.0.0/' /etc/mysql/mysql.conf.d/mysqld.cnf

sed -i "s|&lt;hostname&gt;localhost&lt;/hostname&gt;|&lt;hostname&gt;${current_hostname}&lt;/hostname&gt;|" /etc/koha/sites/koha/koha-conf.xml</code></pre>



<p><strong>Issue 3: Modify the database user.</strong></p>



<p>I named my instance <strong>koha</strong>, so both of the database and the database user automatically created by Koha are named as <strong>koha_koha</strong> . By default, when running inside a container the Koha application can&#8217;t use the <code>'koha_koha'@'localhost'</code> user to connect to the database. A simple workaround is to create a user and use the wildcard as its host and grant all privileges to this user for the koha database.</p>



<pre class="wp-block-code"><code>DROP USER 'koha_koha'@'localhost';

CREATE USER 'koha_koha'@'%' IDENTIFIED WITH mysql_native_password BY 'YOUR_KOHA_USER_PASSWORD';

GRANT ALL PRIVILEGES ON koha_koha.* TO 'koha_koha'@'%' WITH GRANT OPTION;

FLUSH PRIVILEGES;

SHOW GRANTS FOR 'koha_koha'@'%';</code></pre>



<p>Pay attention to the <code>WITH mysql_native_password</code> option here, without it you&#8217;ll get the an <code>Authentication plugin 'caching_sha2_password' reported error: Authentication requires secure connection.</code> error like the one below.</p>



<pre class="wp-block-code"><code>&#91;Sat May 06 15:08:46.361945 2023] &#91;cgi:error] &#91;pid 22303] &#91;client SOME_IP:4761] AH01215: DBIx::Class::Storage::DBI::catch {…} (): DBI Connection failed: DBI connect('database=koha_koha;host=YOUR_HOSTNAME;port=3306','koha_koha',…) failed: Authentication plugin 'caching_sha2_password' reported error: Authentication requires secure connection. at /usr/share/koha/lib/Koha/Database.pm line 91. at /usr/share/koha/lib/Koha/Database.pm line 139: /usr/share/koha/intranet/cgi-bin/errors/500.pl</code></pre>



<p>Again, to do this automatically and programmatically with the <a href="https://github.com/jameswsullivan/KohaContainerization/blob/main/docker-entrypoint.sh" target="_blank" rel="noreferrer noopener">docker-entrypoint.sh</a> script, add the following:</p>



<pre class="wp-block-code"><code>mysql -e "
DROP USER 'koha_koha'@'localhost';
CREATE USER 'koha_koha'@'%' IDENTIFIED WITH mysql_native_password BY '$koha_password';
GRANT ALL PRIVILEGES ON koha_koha.* TO 'koha_koha'@'%' WITH GRANT OPTION;
FLUSH PRIVILEGES;"</code></pre>



<h4 class="wp-block-heading"><strong>Issue 4: Retrieve the auto generated Koha password.</strong></h4>



<p>By default, with a manual installation you&#8217;d use the <code>koha-passwd koha</code> command to retrieve your initial password, but since we&#8217;re automating things with <a href="https://github.com/jameswsullivan/KohaContainerization/blob/main/koha_mysql_localhost.dockerfile" target="_blank" rel="noreferrer noopener">Dockerfile</a> and the <a href="https://github.com/jameswsullivan/KohaContainerization/blob/main/docker-entrypoint.sh">docker-entrypoint.sh</a> script, it would make sense to automate this one too.</p>



<p>Since the password is stored in the<code> /etc/koha/sites/koha/koha-conf.xml</code> file in plain text, we can use a script to retrieve it and print it out to the container&#8217;s logs. (<strong>Danger, Will Robinson!</strong> &#8211; You should never do this on a production, publicly accessible container.)</p>



<pre class="wp-block-code"><code>koha_password=$(grep "&lt;pass&gt;" /etc/koha/sites/koha/koha-conf.xml | awk -F'&#91;&lt;&gt;]' '{print $3}')

echo -e "\n\nKoha Password: $koha_password"</code></pre>



<p>Note that I also used this <code>$koha_password</code> variable in the SQL statements when creating the database user.</p>



<p>The password can be viewed using the <code>docker logs YOUR_CONTAINER_NAME</code> command.</p>



<h2 class="wp-block-heading">Conclusion</h2>



<p>This project is designed to be used as a turnkey testing or dev environment to quickly spin up a Koha instance. As you might have noticed my configurations practically bear no security practices in mind, its use in production environment is strongly discouraged.</p>



<p>Keywords: Install Koha ILS on Ubuntu 22.04 LTS, Install Koha ILS on Docker, Dockerizing Koha ILS, Containerizing Koha ILS</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Set up self-hosted BookStack</title>
		<link>https://jameswsullivan.github.io/set-up-self-hosted-bookstack/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Mon, 01 May 2023 00:23:40 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[BookStack]]></category>
		<category><![CDATA[Docker]]></category>
		<category><![CDATA[Hosting]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[Self-Hosting]]></category>
		<category><![CDATA[Ubuntu]]></category>
		<category><![CDATA[Web Hosting]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2353</guid>

					<description><![CDATA[Self-host BookStack with Docker.]]></description>
										<content:encoded><![CDATA[
<p>As I venture more and more into software development and homelab building, I found that I&#8217;m in need of a better way for my documentation because OneNote just doesn&#8217;t natively support all my needs. After a bit research I found BookStack to be a good choice. Since <a href="https://github.com/jameswsullivan/selfhosted/tree/main/BookStack">this project</a> is on GitHub as part of my <a href="https://github.com/jameswsullivan/selfhosted">self-hosted application suite</a>, this article only serves as a documentation.</p>



<h2 class="wp-block-heading">Dockerfile:</h2>



<pre class="wp-block-code"><code>FROM ubuntu

ARG APACHE_DIR=/var/www
ARG BOOKSTACK_DIR=/var/www/bookstack
ARG DEBIAN_FRONTEND=noninteractive

ENV LC_ALL en_US.UTF-8
ENV LANG en_US.UTF-8

RUN apt-get update -y &amp;&amp; \
    apt-get upgrade -y &amp;&amp; \
    apt-get install wget -y &amp;&amp; \
    apt-get install iproute2 -y &amp;&amp; \
    apt-get install nano -y &amp;&amp; \
    apt-get install tzdata -y &amp;&amp; \
    ln -fs /usr/share/zoneinfo/US/Central /etc/localtime &amp;&amp; \
    dpkg-reconfigure -f noninteractive tzdata &amp;&amp; \
    apt-get install locales -y &amp;&amp; \
    locale-gen en_US.UTF-8 &amp;&amp; \
    update-locale LANG=en_US.UTF-8 &amp;&amp; \
    apt-get install -y git unzip apache2 php8.1 curl php8.1-curl \
    php8.1-mbstring php8.1-ldap php8.1-xml php8.1-zip php8.1-gd \
    php8.1-mysql libapache2-mod-php8.1 &amp;&amp; \
    curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

WORKDIR $APACHE_DIR

RUN git clone https://github.com/BookStackApp/BookStack.git --branch release --single-branch &amp;&amp; \       
    mv BookStack/ bookstack/ &amp;&amp; \
    chown -R www-data:www-data $BOOKSTACK_DIR

WORKDIR $BOOKSTACK_DIR

COPY ./config.sh ./config.sh

RUN composer install --no-dev &amp;&amp; \
    mv $BOOKSTACK_DIR/public/.htaccess $BOOKSTACK_DIR/public/.htaccess.bk &amp;&amp; \
    mv /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/000-default.conf.bk &amp;&amp; \
    mv /etc/apache2/sites-available/default-ssl.conf /etc/apache2/sites-available/default-ssl.conf.bk &amp;&amp; \
    chmod +x config.sh

ENTRYPOINT &#91;"/var/www/bookstack/config.sh"]</code></pre>



<h2 class="wp-block-heading">Post-setup configuration script:</h2>



<pre class="wp-block-code"><code>#!/bin/bash
BOOKSTACK_DIR="/var/www/bookstack"

service apache2 start
a2ensite bookstack.conf
a2enmod rewrite
a2enmod headers

cd "$BOOKSTACK_DIR"

php artisan key:generate --no-interaction --force
php artisan migrate --no-interaction --force

service apache2 restart

exec "$@"
tail -f /var/log/apache2/access.log</code></pre>



<h2 class="wp-block-heading">BookStack Virtual Host file:</h2>



<pre class="wp-block-code"><code>&lt;VirtualHost *:80&gt;

        ServerName bookstack.example.com
        DocumentRoot /var/www/bookstack/public/

        &lt;Directory /var/www/bookstack/public/&gt;
                Options Indexes FollowSymLinks
                AllowOverride None
                Require all granted
                &lt;IfModule mod_rewrite.c&gt;
                        &lt;IfModule mod_negotiation.c&gt;
                                Options -MultiViews -Indexes
                        &lt;/IfModule&gt;

                        RewriteEngine On

                        # Handle Authorization Header
                        RewriteCond %{HTTP:Authorization} .
                        RewriteRule .* - &#91;E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]

                        # Redirect Trailing Slashes If Not A Folder...
                        RewriteCond %{REQUEST_FILENAME} !-d
                        RewriteCond %{REQUEST_URI} (.+)/$
                        RewriteRule ^ %1 &#91;L,R=301]

                        # Handle Front Controller...
                        RewriteCond %{REQUEST_FILENAME} !-d
                        RewriteCond %{REQUEST_FILENAME} !-f
                        RewriteRule ^ index.php &#91;L]
                &lt;/IfModule&gt;
        &lt;/Directory&gt;

        ErrorLog ${APACHE_LOG_DIR}/error.log
        CustomLog ${APACHE_LOG_DIR}/access.log combined

&lt;/VirtualHost&gt;</code></pre>



<p>BookStack .env file:</p>



<pre class="wp-block-code"><code>APP_KEY=SomeRandomString

APP_URL=http://example.com/

# Database details
DB_HOST=YOUR_DB_URL
DB_DATABASE=YOUR_DB_NAME
DB_USERNAME=YOUR_DB_USER
DB_PASSWORD=YOUR_DB_PASS

# Mail system to use
# Can be 'smtp' or 'sendmail'
MAIL_DRIVER=smtp

# Mail sender details
MAIL_FROM_NAME="BookStack"
MAIL_FROM=bookstack@example.com

# SMTP mail options
# These settings can be checked using the "Send a Test Email"
# feature found in the "Settings &gt; Maintenance" area of the system.
MAIL_HOST=localhost
MAIL_PORT=1025
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null</code></pre>



<h2 class="wp-block-heading"><em>docker image build</em> and <em>docker run</em> commands:</h2>



<pre class="wp-block-code"><code># Linux build:
docker image build --file bookstack.dockerfile --tag bookstack:1.0 --progress plain --no-cache . 2&gt;&amp;1 | tee bookstack_build.log

# Windows build using PowerShell
docker image build --file bookstack.dockerfile --tag bookstack:1.0 --progress plain --no-cache . 2&gt;&amp;1 | Tee-Object bookstack_build.log

# Start a container:
docker run -dit \
    --name MY_BOOKSTACK_CONTAINER_NAME \
    --ip IP_ADDRESS --network DOCKER_NETWORK \
    --hostname=MY_HOSTNAME \
    --restart=unless-stopped \
    --mount type=bind,source=SOURCE_DIRECTORY/.env,target=/var/www/bookstack/.env \
    --mount type=bind,source=SOURCE_DIRECTORY/bookstack.conf,target=/etc/apache2/sites-available/bookstack.conf \
    -v SOURCE_DIRECTORY:/var/www/bookstack/public/uploads \
    -v SOURCE_DIRECTORY:/var/www/bookstack/storage/uploads \
    bookstack:1.0</code></pre>



<h2 class="wp-block-heading">Default login:</h2>



<pre class="wp-block-code"><code>Default login email: admin@admin.com
Default login password: password</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Troubleshooting Apache Web Server and Name-based Virtual Hosting</title>
		<link>https://jameswsullivan.github.io/troubleshooting-apache-web-server-and-name-based-virtual-hosting/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Sat, 25 Mar 2023 23:26:42 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Apache]]></category>
		<category><![CDATA[Docker]]></category>
		<category><![CDATA[Hosting]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[Self-Hosting]]></category>
		<category><![CDATA[Ubuntu]]></category>
		<category><![CDATA[Web Hosting]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2185</guid>

					<description><![CDATA[This troubleshooting note wraps up the Name-based Virtual Hosting Series.]]></description>
										<content:encoded><![CDATA[
<p>During the process of setting up name-based virtual hosting with Apache, I ran into a few issues with the WordPress container, this post documents the steps taken to address them.</p>



<h2 class="wp-block-heading">Background:</h2>



<p>I use the locally hosted WordPress site to write documentation and blog posts and then use Simply Static to convert and get it ready for GitHub Pages. During the process I ran into the following issues:</p>



<ul>
<li>WordPress Site Health check has three critical issues:
<ul>
<li>The required module, gd, is not installed, or has been disabled.</li>



<li>The REST API encountered an error.</li>



<li>Your site could not complete a loopback request.</li>
</ul>
</li>



<li><em>Updating failed. The response is not a valid JSON response.</em> when creating and updating posts.</li>



<li>Simply Static&#8217;s failed diagnostics:
<ul>
<li>Checking if WordPress can make requests to itself from YOUR_IP  FAIL</li>



<li>Checking for cURL support  FAIL</li>
</ul>
</li>
</ul>



<h2 class="wp-block-heading">Issue 1: Updating failed. The response is not a valid JSON response.</h2>



<p>I get this error only after I&#8217;ve set the <strong>Permalinks</strong> setting to anything else other than the default <strong>Plain</strong> setting. When <strong>Permalinks</strong> is not set to <strong>Plain</strong>, the URLs need to be rewritten, and that&#8217;s when this error will occur. In my case, it turned out to be that I forgot to add the &lt;Directory&gt; tag in the virtual host configuration file. As you can see in <a href="https://jameswsullivan.github.io/configure-apache-web-server-and-name-based-virtual-hosting-with-ubuntu/">this post</a>, my configuration file looks like this:</p>



<pre class="wp-block-code"><code>&lt;VirtualHost *:80&gt;
    ServerAdmin webmaster@example1.mydomain
    ServerName example1.mydomain
    DocumentRoot /var/www/html/example1.mydomain
    DirectoryIndex index.php
    ErrorLog ${APACHE_LOG_DIR}/example1.mydomain_error.log
    CustomLog ${APACHE_LOG_DIR}/example1.mydomain_access.log combined
&lt;/VirtualHost&gt;</code></pre>



<p>But the correct configs for rewrite to work need to look like this:</p>



<pre class="wp-block-code"><code>&lt;VirtualHost *:80&gt;
    ServerAdmin webmaster@example1.mydomain
    ServerName example1.mydomain
    DocumentRoot /var/www/html/example1.mydomain

        &lt;Directory /var/www/html/example1.mydomain&gt;
                Options Indexes FollowSymLinks
                AllowOverride All
                Require all granted
                DirectoryIndex index.php
        &lt;/Directory&gt;

    ErrorLog ${APACHE_LOG_DIR}/example1.mydomain_error.log
    CustomLog ${APACHE_LOG_DIR}/example1.mydomain_access.log combined
&lt;/VirtualHost&gt;</code></pre>



<p>Without the <strong>&lt;Directory&gt;</strong> element, the <strong>.htaccess</strong> file is unable to override the rewrite rules.</p>



<h2 class="wp-block-heading">Issue 2: WordPress Site Health Critical Issues</h2>



<p><strong>The required module, gd, is not installed, or has been disabled.</strong></p>



<pre class="wp-block-code"><code># Install the php8.1-gd module
apt-get install php8.1-gd -y
service apache2 restart</code></pre>



<p><strong>The REST API encountered an error.</strong></p>



<pre class="wp-block-code"><code>The REST API is one way that WordPress and other applications communicate with the server. For example, the block editor screen relies on the REST API to display and save your posts and pages.

When testing the REST API, an error was encountered:

REST API Endpoint: http://example1.mydomain/wp-json/wp/v2/types/post?context=edit
REST API Response: (http_request_failed) cURL error 6: Could not resolve host: example1.mydomain</code></pre>



<p>Or:</p>



<pre class="wp-block-code"><code>The REST API is one way that WordPress and other applications communicate with the server. For example, the block editor screen relies on the REST API to display and save your posts and pages.

When testing the REST API, an unexpected result was returned:

REST API Endpoint: http://example1.mydomain/wp-json/wp/v2/types/post?context=edit
REST API Response: (404) Not Found</code></pre>



<p><strong>Your site could not complete a loopback request.</strong></p>



<pre class="wp-block-code"><code>Loopback requests are used to run scheduled events, and are also used by the built-in editors for themes and plugins to verify code stability.

The loopback request to your site failed, this means features relying on them are not currently working as expected.
Error: cURL error 6: Could not resolve host: example1.mydomain (http_request_failed)</code></pre>



<p>Edit the <strong>/etc/hosts</strong> file:</p>



<pre class="wp-block-code"><code>nano /etc/hosts

# Add a new line: IP hostname. e.g. 192.168.0.4 website1.example.com</code></pre>



<p>Additionally, you might need to install the curl package and double check to see if the <code>rewrite</code> module is properly enabled:</p>



<pre class="wp-block-code"><code>apt-get install php8.1-curl curl -y

# Verify curl version:
curl --version

# Verify curl is enabled in php.ini
nano /etc/php/8.1/apache2/php.ini

# Uncomment this line:
extension=curl

# Enable the rewrite module.
a2enmod rewrite
service restart apache2</code></pre>



<p>Adding this entry in <strong>/etc/hosts</strong> file also resolves Simply Static&#8217;s <em>&#8220;Checking if WordPress can make requests to itself from your_IP&#8221;</em> FAIL issue.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Docker volumes and SMB share</title>
		<link>https://jameswsullivan.github.io/docker-volumes-and-smb-share/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Fri, 03 Feb 2023 16:52:00 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Docker]]></category>
		<category><![CDATA[Hosting]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[Self-Hosting]]></category>
		<category><![CDATA[Ubuntu]]></category>
		<guid isPermaLink="false">https://www.alexchen.net/?p=2122</guid>

					<description><![CDATA[This is the second installment of the Name-based Virtual Hosting Series.]]></description>
										<content:encoded><![CDATA[
<p>I&#8217;m recently setting up a dev environment with different Docker containers running Ubuntu and database services and there are certain things I need them to persist and be shared between the containers, the host, and my other computers (mostly Windows) on the network. Since my home lab setup is a Windows house, SMB shares seem to be the most convenient solution.</p>



<p>Create a <a href="https://docs.docker.com/storage/volumes/#create-cifssamba-volumes" target="_blank" rel="noreferrer noopener">Docker CIFS/Samba volume</a>:</p>



<pre class="wp-block-code"><code># Of course, you need to create a network share first, mine is: \\main_server\DockerShare, and have a user &amp; password ready to access the share.

docker volume create --driver local --opt type=cifs --opt device=//main_server/DockerShare --opt o=addr=main_server,username=your_username,password=your_password,file_mode=0777,dir_mode=0777 --name my_smb_vol</code></pre>



<p>After the volume is created, you can start a container and mount the volume to it:</p>



<pre class="wp-block-code"><code># List all volumes

docker volume ls

# Start the WEB_SERVER container with the volume just created

docker run -dit --name WEB_SERVER --network docker_dev_net --ip 192.168.1.103 --mount source=my_smb_vol,destination=/SharedVolume -p 443:443 -p 80:80 -p 22:22 ubuntu</code></pre>



<p></p>



<p></p>



<p></p>



<p></p>



<p></p>



<p></p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Ubuntu Server Docker Host and Docker Networking</title>
		<link>https://jameswsullivan.github.io/ubuntu-server-docker-host-and-docker-networking/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Fri, 03 Feb 2023 04:19:00 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Apache]]></category>
		<category><![CDATA[Docker]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[Self-Hosting]]></category>
		<category><![CDATA[Web Hosting]]></category>
		<guid isPermaLink="false">https://www.alexchen.net/?p=2115</guid>

					<description><![CDATA[This is the first installment of the Name-based Virtual Hosting Series.]]></description>
										<content:encoded><![CDATA[
<p>Since I started with my new job late last year I have been dealing quite bit with Docker, the majority of the applications at work are hosted and developed in a Docker environment, and even for personal projects Docker has made hosting and development much easier compared to using traditional VMs. But recently I came across a rather inconvenient issue with Docker Desktop for Windows when it comes to networking.</p>



<p>The background is that my home lab&#8217;s network is well organized and controlled by IPs, access-lists, etc., via Cisco switches and routers, I needed my Docker host and dev containers to have static IP addresses and be within a specific IP range and add custom DNS records to my router to point to them. The Docker networking part is fairly straightforward, but what&#8217;s inconvenient is how Docker Desktop for Windows and WSL2 handle their networking part behind the scene. WSL2 gets its own vEthernet adapter with an IP in the 172.0.0.0 range and the containers get placed in a different 172.0.0.0 network segment and assigned with dynamic IPs and depending on how the Hyper-V and WSL2 backend handles the routing and switching, it&#8217;s rather difficult (if not impossible) to easily assign static IPs to the containers within the same IP segment as the host machine and make them part of the same subnet for easy access. After a couple of hours fiddling around with different solutions I basically gave up on it as it&#8217;s really not worth the time and efforts doing so, I opted to have a dedicated Hyper-V VM running Ubuntu Server as the Docker host on my home server.</p>



<p>Since it&#8217;s Ubuntu Server, the networking part becomes very straightforward:</p>



<p>The Docker host VM has its own static IP, e.g. 192.168.1.100/24. (The IP is assigned to interface <strong>eth0</strong> in Ubuntu.)</p>



<pre class="wp-block-code"><code>ip address show eth0</code></pre>



<p>Create an <strong><a href="https://docs.docker.com/network/ipvlan/" target="_blank" rel="noreferrer noopener">ipvlan</a></strong> network of the same subnet:</p>



<pre class="wp-block-code"><code>docker network create --driver ipvlan --subnet=192.168.1.0/24 --gateway=192.168.1.1 -o ipvlan_mode=l2 -o parent=eth0 docker_dev_net</code></pre>



<p>And then we can create containers using this network and assign static IPs to them:</p>



<pre class="wp-block-code"><code># I'm using the ubuntu/mysql Docker Image here as an example.
# The port 22 here is for being able to SSH into this container from my main windows computer.

docker run -dit --name MySQL_DEV --network docker_dev_net --ip 192.168.1.101 -p 3306:3306 -p 22:22 -e MYSQL_ROOT_PASSWORD=password ubuntu/mysql

# Make sure you add the corresponding DNS entries to your DNS server or router. e.g., on my Cisco router:

ip host MySQL_DEV.mydomain 192.168.1.101</code></pre>



<p>After the containers are running, test the connection with PowerShell:</p>



<pre class="wp-block-code"><code>Test-NetConnection -ComputerName MySQL_DEV.mydomain -Port 3306</code></pre>



<p>To conclude, it&#8217;s much easier to create Docker networks and containers and tap them into your existing network infrastructure in this way, without having to mess with Docker Desktop for Windows and WSL2. The final results are that I started three containers running MySQL, PostgreSQL, and Ubuntu, respectively. (The Ubuntu container will serve as an Apache web server hosting my websites.)</p>



<pre class="wp-block-code"><code>docker run -dit --name WEB_SERVER --network docker_dev_net --ip 192.168.1.103 -p 443:443 -p 80:80 -p 22:22 ubuntu

docker run -dit --name MySQL_DEV --network docker_dev_net --ip 192.168.1.101 -p 3306:3306 -p 22:22 -e MYSQL_ROOT_PASSWORD=password ubuntu/mysql

docker run -dit --name PostgreSQL_DEV --network docker_dev_net --ip 192.168.1.102 -p 5432:5432 -p 22:22 -e POSTGRES_PASSWORD=password postgres</code></pre>



<p></p>



<p></p>



<p></p>



<p></p>



<p></p>



<p></p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Set up Docker on Ubuntu Server</title>
		<link>https://jameswsullivan.github.io/set-up-docker-on-ubuntu-server/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Tue, 21 Sep 2021 06:14:07 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Docker]]></category>
		<category><![CDATA[Hosting]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[Self-Hosting]]></category>
		<category><![CDATA[Standard Notes]]></category>
		<category><![CDATA[Ubuntu]]></category>
		<guid isPermaLink="false">https://www.alexchen.net/?p=1638</guid>

					<description><![CDATA[Setting up Ubuntu Server, SSH, UFW, Nginx, and Docker.]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading">Environment: Windows Server 2019, Hyper-V, Ubuntu Server 20.04.3 LTS.</h2>



<p>1. After Ubuntu Server is installed on a VM (with a clean and minimum installation without any preloaded packages), set up Docker and OpenSSH.</p>



<pre class="wp-block-code"><code># Install OpenSSH
apt upgrade
apt update
apt install openssh-server

# Check SSH Status
systemctl status ssh

# Allow ssh over UFW firewall
ufw allow ssh</code></pre>



<p>2. Enable UFW, check status, and configure rules.</p>



<pre class="wp-block-code"><code># Enable UFW
ufw enable

# Check status and rules
ufw status

# Check status and make results numbered
ufw status numbered

# Disable UFW
ufw disable

# Block IP
ufw deny from IP-Address

# Block by subnet
ufw deny from IP/CIDR

# Block connections on interface
ufw deny in on eth0 from IP-Address

# Allow commands:
ufw allow from IP-Address
ufw allow in on eth0 from IP-Address

# Delete rule
ufw status numbered
ufw delete &#91;number]

# Allow by protocol
ufw allow from IP-Address proto tcp to any port 22
ufw allow from IP/CIDR proto tcp to any port 22
ufw allow proto tcp from any to any port 80,443</code></pre>



<p>3. Disable ipv6 on Ubuntu Server.</p>



<pre class="wp-block-code"><code># Add
net.ipv6.conf.all.disable_ipv6=1
net.ipv6.conf.default.disable_ipv6=1
net.ipv6.conf.lo.disable_ipv6=1
# to file /etc/sysctl.conf</code></pre>



<p>4. Reduce Ubuntu shutdown time.</p>



<pre class="wp-block-code"><code># Edit /etc/systemd/system.conf and uncomment DefaultTimeoutStopSec=90s and set it to a desired value

DefaultTimeoutStopSec=15s</code></pre>



<p>5. Install Docker</p>



<pre class="wp-block-code"><code># Remove existing Docker installations, if any
apt remove docker docker-engine docker.io containerd runc

# Install using the repository
apt update
apt install apt-transport-https ca-certificates curl gnupg lsb-release

# Add Docker's official GPG key
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

# Set up stable repository
echo \
"deb &#91;arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
$(lsb_release -cs) stable" \
| sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

# Install Docker engine
apt update
apt install docker-ce docker-ce-cli containerd.io

# Verify that Docker Engine is correctly installed
docker version</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Nextcloud Performance</title>
		<link>https://jameswsullivan.github.io/nextcloud-performance/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Mon, 20 Sep 2021 07:28:07 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Apache]]></category>
		<category><![CDATA[Hosting]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[Nextcloud]]></category>
		<category><![CDATA[Self-Hosting]]></category>
		<category><![CDATA[System Administration]]></category>
		<category><![CDATA[Ubuntu]]></category>
		<category><![CDATA[Web Hosting]]></category>
		<guid isPermaLink="false">https://www.alexchen.net/?p=1633</guid>

					<description><![CDATA[Nextcloud performance optimization.]]></description>
										<content:encoded><![CDATA[
<p>After about two days&#8217; troubleshooting and and testing, Nextcloud is successfully running in my homelab. This article documents a few performance tweaking.</p>



<p>1. PHP <code>max_input_time</code> and <code>max_execution_time</code>. (I was getting 504 Gateway Timeout when uploading larger files.)</p>



<pre class="wp-block-code"><code># Modify php.ini under /etc/php/8.0/fpm/ and /etc/php/8.0/apache2/
max_input_time 86400
max_execution_time 86400

upload_max_filesize 50G
post_max_size 51G

# Restart PHP and Apache
service apache2 restart
service php8.0-fpm restart</code></pre>



<p>2. Disable file locking. This potentially will cause problems when you have multiple users collaborating on file editing/syncing, but in my single-user setup this was not a concern. I needed to do this when I synced some large files and the client froze, and after a force restart/resync, the Nextcloud client reported <code>423 Locked</code> to <code>PUT https://...../</code> .</p>



<pre class="wp-block-code"><code># Add
'filelocking.enabled' => false,
# to nextcloud's config.php, and clear the locked files.

# Add
'maintenance' => true,
# to config.php

# Get into MariaDB and run the following
DELETE FROM oc_file_locks WHERE 1;

# Revert maintenance mode
'maintenance' => false,

# Restart PHP and Apache
service apache2 restart
service php8.0-fpm restart</code></pre>



<p>3. Overall performance.</p>



<p>Nextcloud&#8217;s overall syncing speed has a lot to do with your Nextcloud server&#8217;s performance, the more smooth your server runs the better syncing performance you&#8217;ll get (more RAM, SSD, etc.). I was able to get roughly 25MB upload speed and 65MB download speed with a Hyper-V VM running Ubuntu Desktop.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
