<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Linux &#8211; howdy</title>
	<atom:link href="https://jameswsullivan.github.io/tag/linux/feed/" rel="self" type="application/rss+xml" />
	<link>https://jameswsullivan.github.io/</link>
	<description></description>
	<lastBuildDate>Fri, 29 Dec 2023 19:29:51 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.2</generator>
	<item>
		<title>Refurbish Mac Mini A1347 (Late 2014) &#8211; Part 5 &#8211; Install openSUSE</title>
		<link>https://jameswsullivan.github.io/refurbish-mac-mini-a1347-late-2014-part-4-install-opensuse/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Tue, 21 Nov 2023 22:21:20 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Boot Loader]]></category>
		<category><![CDATA[Kubernetes]]></category>
		<category><![CDATA[KubeSphere]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[Mac Mini]]></category>
		<category><![CDATA[Mac Mini A1347]]></category>
		<category><![CDATA[macOS]]></category>
		<category><![CDATA[openSUSE]]></category>
		<category><![CDATA[rEFInd]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2847</guid>

					<description><![CDATA[Refurbish Mac Mini A1347 (Late 2014) - Part 5 - Install openSUSE and rEFInd.]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading">Background:</h2>



<p>One of the Mac Minis will be used for KubeSphere in a lab environment and I wanted to experiment with openSUSE. However, due to Macs handles the EFI slight differently, both openSUSE&#8217;s default GRUB2 for EFI and GRUB2 Boot Loader configs fail during installation. I&#8217;ve experimented with different combination of settings and openSUSE would not boot successfully once the USB drive is removed. Eventually, <a href="https://www.rodsbooks.com/refind/" target="_blank" rel="noreferrer noopener">rEFInd</a> resolved the problems.</p>



<p>Setup:</p>



<ul>
<li>Mac Mini late-2014 (macmini7,1) with 4GB RAM, 256GB SSD.</li>



<li>openSUSE Leap 15.5, with &#8220;Server&#8221; System Role, (installed natively via USB, without macOS)
<ul>
<li>Partition layout:
<ul>
<li>/dev/sda1 at /boot/eft</li>



<li>/dev/sda2 for / with btrfs</li>



<li>/dev/sda3 at swap</li>
</ul>
</li>



<li>&#8220;Secure Boot&#8221; is disabled under Boot Loader Settings, with Secure Boot Support unchecked.</li>



<li>&#8220;Protective MBR flag&#8221; set to &#8220;remove&#8221; under Boot Loader Settings.</li>
</ul>
</li>
</ul>



<h2 class="wp-block-heading">Issue Details:</h2>



<p>Installation using <code>GRUB2 for EFI</code> fails with the following error at around 93% when Boot Loader configs are being committed:</p>



<pre class="wp-block-code"><code><strong>Error</strong>

Execution of command "&#91;&#91;"/usr/sbin/grub2-install","--target=x86_64-efi","--force","--skip-fs-probe"]]" failed.
Exit code: 1
Error output: Installing for x86_64-efi platform.
Could not prepare Boot variable: invalid argument
/usr/sbin/grub2-install: error: efibootmgr failed to register the boot entry: input/output error.</code></pre>



<p>The installation will finish successfully if &#8220;Update NVRAM Entry&#8221; is unchecked, or use GRUB2 Boot Loader (MBR). However, in both cases, openSUSE is unable to boot successfully without the help of the installation media, the Mac Mini will stuck at the following screen after power-on.</p>



<figure class="wp-block-image size-large"><img fetchpriority="high" decoding="async" width="1024" height="818" src="https://jameswsullivan.github.io/wp-content/uploads/2023/11/mac-flashing-folder-with-question-mark-1024x818.jpg" alt="" class="wp-image-2850" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/11/mac-flashing-folder-with-question-mark-1024x818.jpg 1024w, https://jameswsullivan.github.io/wp-content/uploads/2023/11/mac-flashing-folder-with-question-mark-300x240.jpg 300w, https://jameswsullivan.github.io/wp-content/uploads/2023/11/mac-flashing-folder-with-question-mark-768x614.jpg 768w, https://jameswsullivan.github.io/wp-content/uploads/2023/11/mac-flashing-folder-with-question-mark-700x559.jpg 700w, https://jameswsullivan.github.io/wp-content/uploads/2023/11/mac-flashing-folder-with-question-mark.jpg 1100w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h2 class="wp-block-heading">Solution:</h2>



<p>The solution is fairly straightforward with the help of <a href="https://www.rodsbooks.com/refind/" target="_blank" rel="noreferrer noopener">rEFInd</a>.</p>



<p>1. Install openSUSE using the following Boot Loader Settings:</p>



<ul>
<li>Boot Loader: <code>GRUB2 for EFI</code></li>



<li>Uncheck <code>Secure Boot Support</code></li>



<li>Uncheck <code>Update NVRAM Entry</code></li>



<li><code>Protective MBR flag</code> set to <code>remove</code></li>



<li>Partition layout:
<ul>
<li>/dev/sda1 at /boot/eft</li>



<li>/dev/sda2 for / with btrfs</li>



<li>/dev/sda3 at swap</li>
</ul>
</li>
</ul>



<p>2. After installation finishes, boot openSUSE using the installation media and select <code>More ... -- Boot Linux System</code> , accept default settings and boot to the shell prompt.</p>



<blockquote class="wp-block-quote">
<p>I ran into a minor issue here which my keyboard doesn&#8217;t get recognized, but you should be able to use SSH to connect to the machine and perform the remaining steps. I didn&#8217;t further troubleshoot the driver issue. Also, I had the Mac Mini hardwired for internet so that I don&#8217;t have to load any WiFi drivers, but if you&#8217;re performing the steps on a Mac that doesn&#8217;t have an RJ45 port, you might need to perform extra steps to load the drivers.</p>
</blockquote>



<p>3. Install rEFInd using the following commands:</p>



<pre class="wp-block-code"><code># become root first to make things easy.

cd /tmp

zypper refresh

zypper install -y wget unzip

wget https://phoenixnap.dl.sourceforge.net/project/refind/0.14.0.2/refind-bin-0.14.0.2.zip

unzip refind-bin-0.14.0.2.zip

cd refind-bin-0.14.0.2

./refind-install</code></pre>



<p>After the installation finishes, you might see the following message:</p>



<pre class="wp-block-code"><code>ShimSource is none
Installing rEFInd on Linux....
ESP was found at /boot/efi using vfat
Installing driver for btrfs (btrfs_x64.efi)
Copied rEFInd binary files

Copying sample configuration file as refind.conf; edit this file to configure
rEFInd.

Creating new NVRAM entry

ALERT: There were problems running the efibootmgr program! You may need to
rename the refind_x64.efi binary to the default name (EFI/BOOT/bootx64.efi
on x86-64 systems, EFI/BOOT/bootia32.efi on x86 systems, or
EFI/BOOT/bootaa64.efi on ARM64 systems) to have it run!

Creating //boot/refind_linux.conf; edit it to adjust kernel options.

ALERT:
Installation has completed, but problems were detected. Review the output for
error messages and take corrective measures as necessary. You may need to
re-run this script or install manually before rEFInd will work.</code></pre>



<p>If that&#8217;s the case, perform the following steps:</p>



<pre class="wp-block-code"><code>cd /boot/efi/EFI/

cp -a refind/ BOOT

cd BOOT/

mv refind_x64.efi bootx64.efi</code></pre>



<p>Additionally, if you need to, reset NVRAM using <code>Command/Windows Key + Option/Alt + P + R</code> keys.</p>



<p>Now that you should be able to see the rEFInd boot screen after a reboot, with openSUSE installation media removed. This method should also work for dual boot with macOS, or on other Mac models.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Linux Administration: Expand LVM</title>
		<link>https://jameswsullivan.github.io/linux-administration-expand-lvm/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Sat, 05 Aug 2023 16:06:41 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Docker]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[System Administration]]></category>
		<category><![CDATA[Ubuntu]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2710</guid>

					<description><![CDATA[Expand LVM in Ubuntu 22.04 LTS.]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading">Background:</h2>



<p>This Ubuntu server (Hyper-V VM) in question is a Docker host that was partitioned using the default layout (50/50 split of available disk space) when Ubuntu was installed. After a few month one of the logic volumes <code>/dev/mapper/ubuntu--vg-ubuntu--lv</code> ran out of space. Since there is no GUI for partition management, a few steps will be needed to properly expand the volume size.</p>



<p>Related article:</p>



<ul>
<li><a href="https://jameswsullivan.github.io/linux-administration-install-docker-on-ubuntu-server-and-mount-disks/">Linux Administration: Install Docker on Ubuntu Server and mount disks</a></li>
</ul>



<h2 class="wp-block-heading">Solution:</h2>



<p>1. Expand the virtual disk size in Hyper-V manager.</p>



<p>2. On the Ubuntu server, use <code>fdisk -l</code> to identify the disk and <code>df -h</code> to check the disk usage, here we use <code>/dev/sdf</code> (disk) and <code>/dev/mapper/ubuntu--vg-ubuntu--lv</code> (logic volume) as an example.</p>



<p>3. Run <code>parted /dev/sdf print</code> to view partition layout. You&#8217;ll probably get a warning message like the following. Which one you choose doesn&#8217;t really matter because we&#8217;ll be doing the process manually.</p>



<pre class="wp-block-code"><code>Warning: Not all of the space available to /dev/sdf appears to be used, you can fix the GPT to use all of the space (an extra ______ blocks) or continue with the current setting?
Fix/Ignore?</code></pre>



<p>4. After you see the list of partitions, run this command on the partition that you need to expand to resize the partition to use the additional space, here we use partition 3 as an example: <code>parted /dev/sdf resizepart 3 100%</code></p>



<p>5. Resize the Physical Volume using command: <code>pvresize /dev/sdf3</code></p>



<p>6. Now that if you run <code>vgdisplay</code> , you should see the free space listed under <code>Free PE / Size</code>. And make sure you have your volume group name <code>ubuntu-vg</code> ready.</p>



<p>7. Run <code>lvdisplay</code> to identify the logical volume we need to expand, as we discussed above, the one needs expanding is the <code>/dev/ubuntu-vg/ubuntu-lv</code> volume.</p>



<p>8. Run <code>lvextend -l +100%FREE -r /dev/ubuntu-vg/ubuntu-lv</code> to expand the volume.</p>



<p>9. Now run <code>vgdisplay</code> , <code>lvdisplay</code>, and <code>df -h</code> again to verify that the <code>/dev/mapper/ubuntu--vg-ubuntu--lv</code> volume has been successfully expanded. Reboot the system if needed.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Linux Administration: Install Docker on Ubuntu Server and mount disks</title>
		<link>https://jameswsullivan.github.io/linux-administration-install-docker-on-ubuntu-server-and-mount-disks/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Tue, 11 Apr 2023 02:19:44 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Docker]]></category>
		<category><![CDATA[Hosting]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[Self-Hosting]]></category>
		<category><![CDATA[System Administration]]></category>
		<category><![CDATA[Ubuntu]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2307</guid>

					<description><![CDATA[Install Docker on a Ubuntu Server, attach disks to the Docker host VM and configure mounts.]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading">Environment:</h2>



<ul>
<li>Windows Server 2019 with Hyper-V for running VMs.</li>



<li>Ubuntu Server 20.04.3 LTS.</li>



<li>Physical or virtual disks that you want to mount to the Ubuntu Server.</li>
</ul>



<h2 class="wp-block-heading">Configurations:</h2>



<h2 class="wp-block-heading">Install Docker:</h2>



<blockquote class="wp-block-quote">
<p>Related article: <a href="https://jameswsullivan.github.io/linux-administration-install-docker-on-ubuntu-server/">Linux Administration: Install Docker on Ubuntu Server</a></p>
</blockquote>



<p>First, if you have installed Docker or any packages along during the installation process of the Ubuntu Server OS, they&#8217;re likely installed using <code>snap</code>. There is nothing wrong with using snap, but most of the directory paths will be different and it makes it harder to tweak certain configs in the future, so it&#8217;s recommended to remove them before the rest of the steps.</p>



<pre class="wp-block-code"><code># Remove docker that was installed via snap:

snap remove docker
reboot 

# NOTE: A reboot is needed after uninstallation, otherwise you'll get a "bash: /snap/bin/docker: No such file or directory" error.</code></pre>



<p>Install Docker using <code>apt-get</code> :</p>



<pre class="wp-block-code"><code># Install using the apt repository:
# https://docs.docker.com/engine/install/ubuntu/

apt-get update -y
apt-get upgrade -y
apt-get install ca-certificates curl gnupg lsb-release -y

mkdir -m 0755 -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg \
    | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

echo "deb &#91;arch=$(dpkg --print-architecture) \
    signed-by=/etc/apt/keyrings/docker.gpg] \
    https://download.docker.com/linux/ubuntu \
    $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

apt-get update -y
apt-get upgrade -y
apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

# After installing docker-ce, other dependencies are usually automatically installed.

# OPTIONAL: List and verify installed packages.

apt list --installed</code></pre>



<h2 class="wp-block-heading">Mount disks:</h2>



<p>It&#8217;s recommended to mount the physical or virtual disks one by one to the Docker host VM so that it&#8217;s easier to identify the disks by their UUID and get the mounts configured correctly one at a time, especially when you have multiple disks of the same size (because the devices are usually not attached in order when booting/rebooting).</p>



<pre class="wp-block-code"><code># List devices:

fdisk -l


# Cross reference with:

blkid
blkid | grep /dev/sd


# Use lsscsi if needed:

apt-get install lsscsi -y


# Create partition:

gdisk /dev/sda

# Enter ? for help. Enter n and accept all default parameters to use the entire disk capacity.
# Enter w to write changes to disk.


# Format disk to ext4 file system.

mkfs.ext4 /dev/sda


# Then run:

fdisk -l
blkid | grep /dev/sd

# again to grab the device name and UUID.


# Create mount locations:

mkdir /mnt/directory_name
mount /dev/sda /mnt/directory_name


# Copy the UUID and add entries in /etc/fstab to configure mounts at boot time.

nano /etc/fstab


# Add entries, e.g., mount 100GB to /mnt/my_folder:

UUID="dcd8c5ac-db76-435e-ab3c-48570190c7d8" /mnt/my_folder ext4 defaults 0 1


# Verify the mounts after a reboot.</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Self-host Nextcloud – Part 4 – Use Docker</title>
		<link>https://jameswsullivan.github.io/self-host-nextcloud-part-4-use-docker/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Tue, 11 Apr 2023 01:24:00 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Docker]]></category>
		<category><![CDATA[Hosting]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[Nextcloud]]></category>
		<category><![CDATA[Self-Hosting]]></category>
		<category><![CDATA[Ubuntu]]></category>
		<category><![CDATA[Web Hosting]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2303</guid>

					<description><![CDATA[Spin up self-hosted Nextcloud with MySQL using Docker.]]></description>
										<content:encoded><![CDATA[
<p>My previous attempt with self-hosting Nextcloud involved using VMs and a lot of manual installation and configurations, it works fine but: 1. its virtual disks were not configured in a way that&#8217;s easily expandable as data grows; 2. the entire setup is not very portable and convenient to manage and update. Using Docker effectively solves the issues.</p>



<p>Related articles:</p>



<ul>
<li><a href="https://jameswsullivan.github.io/self-host-nextcloud-part-1-installation/">Self-host Nextcloud – Part 1 – Installation</a></li>



<li><a href="https://jameswsullivan.github.io/self-host-nextcloud-part-2-self-signed-ssl-certificate/">Self-host Nextcloud – Part 2 – Self-signed SSL Certificate</a></li>



<li><a href="https://jameswsullivan.github.io/self-host-nextcloud-part-3-performance/">Self-host Nextcloud – Part 3 – Performance</a></li>



<li><a href="https://jameswsullivan.github.io/linux-administration-install-docker-on-ubuntu-server/">Linux Administration: Install Docker on Ubuntu Server</a></li>



<li><a href="https://jameswsullivan.github.io/configure-docker-mysql-server/">Docker Administration: MySQL Server</a></li>



<li><a href="https://jameswsullivan.github.io/create-storage-pools-and-virtual-disks-via-powershell/">Create Storage Pools and Virtual Disks via PowerShell</a></li>
</ul>



<h2 class="wp-block-heading">Components:</h2>



<ul>
<li>The Docker host is a dedicated Hyper-V VM running Ubuntu Server in Windows Server 2022.</li>



<li><a href="https://hub.docker.com/_/nextcloud" target="_blank" rel="noreferrer noopener">Nextcloud</a> Docker image.</li>



<li><a href="https://hub.docker.com/r/ubuntu/mysql" target="_blank" rel="noreferrer noopener">Ubuntu/MySQL</a> Docker image.</li>



<li>A storage pool consisting of 6 x 500GB 2.5&#8221; HDDs and a virtual disk in Parity mode with 2 disks set as redundant, bringing its total capacity to 1.35TB. This virtual disk will be mounted to Nextcloud&#8217;s <code>/var/www/html</code> path to store persistent data.</li>



<li>An 100GB virtual disk for MySQL persistent data (<code>/var/lib/mysql</code>).</li>



<li>[Optional] <a href="https://github.com/jameswsullivan/selfhosted/blob/main/nextcloud.dockerfile" target="_blank" rel="noreferrer noopener">My custom Dockerfile</a>.</li>



<li>[Optional] <a href="https://github.com/jameswsullivan/selfhosted/blob/main/mysql.dockerfile">My custom MySQL Dockerfile</a>.</li>
</ul>



<h2 class="wp-block-heading">Configurations:</h2>



<pre class="wp-block-code"><code># Build Nextcloud image

docker build --file nextcloud.dockerfile --tag nextcloud:1.0 --progress plain --no-cache . 2&gt;&amp;1 | tee build.log

# Start the Nextcloud container.
# The drive for Nextcloud's persistent data is mounted to /mnt/nextcloud_data .

docker run -dit --name MY-NEXTCLOUD-CONTAINER --ip IP-ADDRESS --network NAME-OF-DOCKER-NETWORK --restart=unless-stopped --hostname=MY-NEXTCLOUD-CONTAINER-HOSTNAME -v /mnt/nextcloud_data:/var/www/html nextcloud:1.0

# Start a MySQL container for Nextcloud.
# The virtual disk for MySQL's persistent data is mounted to /mnt/nextcloud_db .

docker run -dit --name MY-NEXTCLOUD-DB-CONTAINER --ip IP-ADDRESS --network DOCKER-NETWORK --hostname=MY-NEXTCLOUD-DB-CONTAINER-HOSTNAME --restart=unless-stopped -v /mnt/nextcloud_db:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=MY-ROOT-PASSWORD ubuntu/mysql</code></pre>



<p></p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Linux Administration: Troubleshooting Apache Web Server and Name-based Virtual Hosting with WordPress</title>
		<link>https://jameswsullivan.github.io/linux-administration-troubleshooting-apache-web-server-and-name-based-virtual-hosting-with-wordpress/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Sat, 25 Mar 2023 23:26:42 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Apache]]></category>
		<category><![CDATA[Docker]]></category>
		<category><![CDATA[Hosting]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[Self-Hosting]]></category>
		<category><![CDATA[Ubuntu]]></category>
		<category><![CDATA[Web Hosting]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2185</guid>

					<description><![CDATA[This troubleshooting note wraps up the Name-based Virtual Hosting Series.]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading">Background:</h2>



<p>I use a locally hosted WordPress site draft my GitHub pages articles and then convert to static pages using Simply Static. During the process I ran into the following issues with WordPress:</p>



<ul>
<li>WordPress Site Health check has three critical issues:
<ul>
<li>The required module, gd, is not installed, or has been disabled.</li>



<li>The REST API encountered an error.</li>



<li>Your site could not complete a loopback request.</li>
</ul>
</li>



<li><em>Updating failed. The response is not a valid JSON response.</em> when creating and updating posts.</li>



<li>Simply Static&#8217;s failed diagnostics:
<ul>
<li>Checking if WordPress can make requests to itself from YOUR_IP  FAIL</li>



<li>Checking for cURL support  FAIL</li>
</ul>
</li>
</ul>



<p>Related article: <a href="https://jameswsullivan.github.io/linux-administration-configure-apache-web-server-and-name-based-virtual-hosting/">Linux Administration: Configure Apache Web Server and Name-based Virtual Hosting</a></p>



<h2 class="wp-block-heading">Solutions:</h2>



<h2 class="wp-block-heading">Issue 1: Updating failed. The response is not a valid JSON response.</h2>



<p>I started getting this error only after setting the <strong>Permalinks</strong> setting to anything else other than the default setting <strong>Plain</strong>. When <strong>Permalinks</strong> is not set to <strong>Plain</strong>, the URLs need to be rewritten, and that&#8217;s when this error occurs. It turned out to be that I forgot to add the &lt;Directory> tag in the virtual host configuration file. As you can see in <a href="https://jameswsullivan.github.io/linux-administration-configure-apache-web-server-and-name-based-virtual-hosting/">this post</a>, my original configuration file looks like this:</p>



<pre class="wp-block-code"><code>&lt;VirtualHost *:80>
    ServerAdmin webmaster@example1.mydomain.com
    ServerName example1.mydomain.com
    DocumentRoot /var/www/html/example1.mydomain.com
    DirectoryIndex index.php
    ErrorLog ${APACHE_LOG_DIR}/example1.mydomain.com_error.log
    CustomLog ${APACHE_LOG_DIR}/example1.mydomain.com_access.log combined
&lt;/VirtualHost></code></pre>



<p>But the correct configs for rewrite to work need to look like this:</p>



<pre class="wp-block-code"><code>&lt;VirtualHost *:80>
    ServerAdmin webmaster@example1.mydomain.com
    ServerName example1.mydomain.com
    DocumentRoot /var/www/html/example1.mydomain.com

        &lt;Directory /var/www/html/example1.mydomain.com>
                Options Indexes FollowSymLinks
                AllowOverride All
                Require all granted
                DirectoryIndex index.php
        &lt;/Directory>

    ErrorLog ${APACHE_LOG_DIR}/example1.mydomain.com_error.log
    CustomLog ${APACHE_LOG_DIR}/example1.mydomain.com_access.log combined
&lt;/VirtualHost></code></pre>



<p>Without the <strong>&lt;Directory&gt;</strong> element, the <strong>.htaccess</strong> file is unable to override the rewrite rules.</p>



<h2 class="wp-block-heading">Issue 2: WordPress Site Health Critical Issues</h2>



<p><strong>1. The required module, gd, is not installed, or has been disabled.</strong></p>



<pre class="wp-block-code"><code># Install the php8.1-gd module

apt-get install php8.1-gd -y
service apache2 restart</code></pre>



<p><strong>2. The REST API encountered an error.</strong></p>



<pre class="wp-block-code"><code>The REST API is one way that WordPress and other applications communicate with the server. For example, the block editor screen relies on the REST API to display and save your posts and pages.

When testing the REST API, an error was encountered:

REST API Endpoint: http://example1.mydomain.com/wp-json/wp/v2/types/post?context=edit
REST API Response: (http_request_failed) cURL error 6: Could not resolve host: example1.mydomain.com</code></pre>



<p>Or:</p>



<pre class="wp-block-code"><code>The REST API is one way that WordPress and other applications communicate with the server. For example, the block editor screen relies on the REST API to display and save your posts and pages.

When testing the REST API, an unexpected result was returned:

REST API Endpoint: http://example1.mydomain.com/wp-json/wp/v2/types/post?context=edit
REST API Response: (404) Not Found</code></pre>



<p><strong>3. Your site could not complete a loopback request.</strong></p>



<pre class="wp-block-code"><code>Loopback requests are used to run scheduled events, and are also used by the built-in editors for themes and plugins to verify code stability.

The loopback request to your site failed, this means features relying on them are not currently working as expected.
Error: cURL error 6: Could not resolve host: example1.mydomain (http_request_failed)</code></pre>



<p><strong>To resolve issues 2 and 3, edit the /etc/hosts file:</strong></p>



<pre class="wp-block-code"><code>nano /etc/hosts

# Add a new line: IP hostname. e.g. 192.168.0.4 website1.example.com</code></pre>



<p>Additionally, you might need to install the curl package and double check to see if the <code>rewrite</code> module is properly enabled:</p>



<pre class="wp-block-code"><code># Install curl:

apt-get install php8.1-curl curl -y

# Verify curl version:

curl --version

# Verify curl is enabled in php.ini

nano /etc/php/8.1/apache2/php.ini

# Uncomment this line:

extension=curl

# Enable the rewrite module.

a2enmod rewrite
service restart apache2</code></pre>



<p>This also resolves Simply Static&#8217;s <code><em>"Checking if WordPress can make requests to itself from your_IP"</em> FAIL</code> issue.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Docker Administration: SMB share and Docker volumes</title>
		<link>https://jameswsullivan.github.io/docker-administration-smb-share-and-docker-volumes/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Fri, 03 Feb 2023 16:52:00 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Docker]]></category>
		<category><![CDATA[Hosting]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[Self-Hosting]]></category>
		<category><![CDATA[Ubuntu]]></category>
		<category><![CDATA[Web Hosting]]></category>
		<guid isPermaLink="false">https://www.alexchen.net/?p=2122</guid>

					<description><![CDATA[Use SMB shares with Docker volumes.]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading">Background:</h2>



<p>Recently I&#8217;ve been setting up a Docker lab environment to run some applications and needed some data to persist and be shared across my lab network. Since most of the computers run Windows, using SMB shares seems to be the easiest solution.</p>



<p>Related articles:</p>



<ul>
<li><a href="https://jameswsullivan.github.io/linux-administration-install-docker-on-ubuntu-server/">Docker host</a>.</li>



<li><a href="https://jameswsullivan.github.io/docker-administration-docker-networking-ipvlan/">ipvlan Docker network</a>.</li>
</ul>



<h2 class="wp-block-heading">Configurations:</h2>



<p>Create a <a href="https://docs.docker.com/storage/volumes/#create-cifssamba-volumes" target="_blank" rel="noreferrer noopener">Docker CIFS/Samba volume</a>:</p>



<pre class="wp-block-code"><code># Assuming that the network share is at:
\\main_server\DockerShare

# Create a docker volume:
docker volume create --driver local --opt type=cifs --opt device=//main_server/DockerShare --opt o=addr=main_server,username=your_username,password=your_password,file_mode=0777,dir_mode=0777 --name my_smb_vol</code></pre>



<p>Run a container with a volume mount:</p>



<pre class="wp-block-code"><code># List all volumes
docker volume ls

# Run a container with the volume that's been created:
docker run -dit --name WEB_SERVER --network docker_dev_net --ip 192.168.1.103 --mount source=my_smb_vol,destination=/SharedVolume -p 443:443 -p 80:80 -p 22:22 ubuntu</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Docker Administration: Docker Networking (ipvlan)</title>
		<link>https://jameswsullivan.github.io/docker-administration-docker-networking-ipvlan/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Fri, 03 Feb 2023 04:19:00 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Docker]]></category>
		<category><![CDATA[Hosting]]></category>
		<category><![CDATA[IPVLAN]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[Network Administration]]></category>
		<category><![CDATA[Networking]]></category>
		<category><![CDATA[Self-Hosting]]></category>
		<category><![CDATA[Web Hosting]]></category>
		<guid isPermaLink="false">https://www.alexchen.net/?p=2115</guid>

					<description><![CDATA[Create ipvlan docker networks.]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading">Background:</h2>



<p>My home lab&#8217;s network is organized and controlled by IPs, access-lists, etc., via Cisco routers and switches, so I wanted my Docker host and containers to have static IP addresses and be within the same IP segment and add custom DNS records to my DNS servers to resolve to them. The Docker networking part is fairly straightforward, but what&#8217;s inconvenient is how Docker Desktop for Windows and WSL2 handle their networking part behind the scene. WSL2 gets its own vEthernet adapter with an IP in the 172.0.0.0 range and the containers get placed in a different 172.0.0.0 network segment and assigned with dynamic IPs and depending on how the Hyper-V and WSL2 backend handles the routing and switching, it&#8217;s rather difficult (if not impossible) to easily assign static IPs to the containers within the same IP segment as the host machine and make them part of the same subnet for easy access. After a couple of hours fiddling around with different solutions I basically gave up on it as it&#8217;s really not worth the time and efforts doing so, I opted to have a dedicated <a href="https://jameswsullivan.github.io/linux-administration-install-docker-on-ubuntu-server/">Hyper-V VM running Ubuntu Server as the Docker host</a>.</p>



<h2 class="wp-block-heading">Solution:</h2>



<p>On an Ubuntu Server the networking part becomes straightforward.</p>



<p>Assuming that the Docker host VM has the IP address of 192.168.1.100/24 (this is the IP assigned to interface <strong>eth0</strong>). To find out what IP the <code>eth0</code> interface is using, run:</p>



<pre class="wp-block-code"><code>ip address show eth0</code></pre>



<p>Create an <strong><a href="https://docs.docker.com/network/ipvlan/" target="_blank" rel="noreferrer noopener">ipvlan</a></strong> network:</p>



<pre class="wp-block-code"><code>docker network create --driver ipvlan --subnet=192.168.1.0/24 --gateway=192.168.1.1 -o ipvlan_mode=l2 -o parent=eth0 docker_dev_net</code></pre>



<p>And then we can create containers using this network and assign static IPs to them:</p>



<pre class="wp-block-code"><code># Let's use ubuntu/mysql Docker image as an example:

docker run -dit --name MySQL_DEV --network docker_dev_net --ip 192.168.1.101 -p 3306:3306 -p 22:22 -e MYSQL_ROOT_PASSWORD=password ubuntu/mysql

# Make sure you add the corresponding DNS entries to your DNS server or router. e.g., on my Cisco router:

ip host MySQL_DEV.mydomain 192.168.1.101</code></pre>



<p>After the containers are running, test the connection with PowerShell:</p>



<pre class="wp-block-code"><code>Test-NetConnection -ComputerName MySQL_DEV.mydomain -Port 3306</code></pre>



<p></p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Linux Administration: Install Docker on Ubuntu Server</title>
		<link>https://jameswsullivan.github.io/linux-administration-install-docker-on-ubuntu-server/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Tue, 21 Sep 2021 06:14:07 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Docker]]></category>
		<category><![CDATA[Hosting]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[Self-Hosting]]></category>
		<category><![CDATA[Standard Notes]]></category>
		<category><![CDATA[Ubuntu]]></category>
		<guid isPermaLink="false">https://www.alexchen.net/?p=1638</guid>

					<description><![CDATA[Setting up Ubuntu Server, SSH, UFW, Nginx, and Docker.]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading">Environment:</h2>



<ul>
<li>Windows Server 2019</li>



<li>Hyper-V</li>



<li>Ubuntu Server 20.04.3 LTS.</li>
</ul>



<h2 class="wp-block-heading">Configurations:</h2>



<p>1. After Ubuntu Server is installed on a VM (with a clean and minimum installation without any preloaded packages), set up Docker and OpenSSH.</p>



<pre class="wp-block-code"><code># Install OpenSSH
apt update -y
apt upgrade -y
apt install openssh-server -y

# Check SSH Status
systemctl status ssh

# Allow ssh over UFW firewall
ufw allow ssh</code></pre>



<p>2. Enable UFW, check status, and configure rules.</p>



<pre class="wp-block-code"><code># Enable UFW
ufw enable

# Check status and rules
ufw status

# Check status and make results numbered
ufw status numbered

# Disable UFW
ufw disable

# Block IP
ufw deny from IP-Address

# Block by subnet
ufw deny from IP/CIDR

# Block connections on interface
ufw deny in on eth0 from IP-Address

# Allow commands:
ufw allow from IP-Address
ufw allow in on eth0 from IP-Address

# Delete rule
ufw status numbered
ufw delete &#91;number]

# Allow by protocol
ufw allow from IP-Address proto tcp to any port 22
ufw allow from IP/CIDR proto tcp to any port 22
ufw allow proto tcp from any to any port 80,443</code></pre>



<p>3. Disable ipv6 on Ubuntu Server.</p>



<pre class="wp-block-code"><code># Add
net.ipv6.conf.all.disable_ipv6=1
net.ipv6.conf.default.disable_ipv6=1
net.ipv6.conf.lo.disable_ipv6=1
# to file /etc/sysctl.conf</code></pre>



<p>4. Reduce Ubuntu shutdown time.</p>



<pre class="wp-block-code"><code># Edit /etc/systemd/system.conf and uncomment DefaultTimeoutStopSec=90s and set it to a desired value

DefaultTimeoutStopSec=15s</code></pre>



<p>5. Install Docker</p>



<pre class="wp-block-code"><code># Remove existing Docker installations, if any
apt remove docker docker-engine docker.io containerd runc

# Install using the repository
apt update -y
apt install -y apt-transport-https ca-certificates curl gnupg lsb-release

# Add Docker's official GPG key
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

# Set up stable repository
echo \
"deb &#91;arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
$(lsb_release -cs) stable" \
| sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

# Install Docker engine
apt update -y
apt install -y docker-ce docker-ce-cli containerd.io

# Verify that Docker Engine is correctly installed
docker version</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Self-host Nextcloud &#8211; Part 3 &#8211; Performance</title>
		<link>https://jameswsullivan.github.io/self-host-nextcloud-part-3-performance/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Mon, 20 Sep 2021 07:28:07 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Apache]]></category>
		<category><![CDATA[Hosting]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[Nextcloud]]></category>
		<category><![CDATA[Self-Hosting]]></category>
		<category><![CDATA[System Administration]]></category>
		<category><![CDATA[Ubuntu]]></category>
		<category><![CDATA[Web Hosting]]></category>
		<guid isPermaLink="false">https://www.alexchen.net/?p=1633</guid>

					<description><![CDATA[Nextcloud performance optimization.]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading">Background:</h2>



<p>After about two days&#8217; troubleshooting and and testing, Nextcloud is successfully running in my homelab. This article documents a few performance tweaking.</p>



<h2 class="wp-block-heading">Issues:</h2>



<ul>
<li>504 Gateway Timeout when uploading larger files.</li>



<li>Disable file locking.</li>
</ul>



<h2 class="wp-block-heading">Solutions:</h2>



<p>1. Modify PHP <code>max_input_time</code> and <code>max_execution_time</code> to get rid of the 504 Gateway Timeout error when uploading large files.</p>



<pre class="wp-block-code"><code># Modify php.ini under /etc/php/8.0/fpm/ and /etc/php/8.0/apache2/
max_input_time 86400
max_execution_time 86400

upload_max_filesize 50G
post_max_size 50G

# Restart PHP and Apache
service apache2 restart
service php8.0-fpm restart</code></pre>



<p>2. Disable file locking.</p>



<p>This might cause potential problems when you have multiple users collaborating on file editing/syncing, but in my single-user setup this was not a concern. I needed to do this when I was syncing some large files and the client froze, and after a force restart/resync, the Nextcloud client reported <code>423 Locked</code> errors to <code>PUT https://...../</code> .</p>



<pre class="wp-block-code"><code># Add
'filelocking.enabled' =&gt; false,
# to nextcloud's config.php, and clear the locked files.

# Add
'maintenance' =&gt; true,
# to config.php

# Get into MariaDB and run the following
DELETE FROM oc_file_locks WHERE 1;

# Revert maintenance mode
'maintenance' =&gt; false,

# Restart PHP and Apache
service apache2 restart
service php8.0-fpm restart</code></pre>



<h4 class="wp-block-heading">Overall performance.</h4>



<p>Nextcloud&#8217;s overall syncing speed has a lot to do with your Nextcloud server&#8217;s performance, the more smooth your server runs the better syncing performance you&#8217;ll get (more RAM, use SSD instead of HDD, etc.). I was able to get roughly 25MB upload speed and 65MB download speed with a Hyper-V VM running Ubuntu Desktop.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Self-host Nextcloud &#8211; Part 2 &#8211; Self-signed SSL Certificate</title>
		<link>https://jameswsullivan.github.io/self-host-nextcloud-part-2-self-signed-ssl-certificate/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Sun, 19 Sep 2021 20:58:07 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Apache]]></category>
		<category><![CDATA[Docker]]></category>
		<category><![CDATA[Hosting]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[Nextcloud]]></category>
		<category><![CDATA[Self-Hosting]]></category>
		<category><![CDATA[SSL]]></category>
		<category><![CDATA[Ubuntu]]></category>
		<guid isPermaLink="false">https://www.alexchen.net/?p=1622</guid>

					<description><![CDATA[Perfecting SSL configuration on Nextcloud server.]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading">Background:</h2>



<p>In <a href="https://jameswsullivan.github.io/self-host-nextcloud-part-1-installation/">Part 1 of the Nextcloud series</a> we&#8217;ve discussed how to bring up a self-hosted Nextcloud instance. In this article I&#8217;d like to discuss the SSL troubleshooting process. Reference articles: <a href="https://stackoverflow.com/questions/46349459/chrome-neterr-cert-authority-invalid-error-on-self-signing-certificate-at-loca?rq=1" data-type="URL" data-id="https://stackoverflow.com/questions/46349459/chrome-neterr-cert-authority-invalid-error-on-self-signing-certificate-at-loca?rq=1" target="_blank" rel="noreferrer noopener">article 1</a>, <a href="https://alexanderzeitler.com/articles/Fixing-Chrome-missing_subjectAltName-selfsigned-cert-openssl/" data-type="URL" data-id="https://alexanderzeitler.com/articles/Fixing-Chrome-missing_subjectAltName-selfsigned-cert-openssl/" target="_blank" rel="noreferrer noopener">article 2</a>, <a href="https://superuser.com/questions/1631692/why-is-chrome-not-trusting-imported-self-signed-root-ca" data-type="URL" data-id="https://superuser.com/questions/1631692/why-is-chrome-not-trusting-imported-self-signed-root-ca" target="_blank" rel="noreferrer noopener">article 3</a>, <a href="https://www.youtube.com/watch?v=e8vMTlobW3c" data-type="URL" data-id="https://www.youtube.com/watch?v=e8vMTlobW3c" target="_blank" rel="noreferrer noopener">video</a>.</p>



<h2 class="wp-block-heading">Issues<strong>:</strong></h2>



<ul>
<li>SSL/HTTPS won&#8217;t go into effect even if I&#8217;ve enabled SSL in Apache, generated the certs, and configured the config files.</li>



<li>HTTPS goes into effect in Firefox but always said &#8220;Not Secure&#8221; or &#8220;Invalid&#8221; cert in Chrome.</li>



<li>Chrome errors: &#8220;NET::ERR_CERT_AUTHORITY_INVALID&#8221;, &#8220;NET::ERR_CERT_COMMON_NAME_INVALID&#8221;</li>
</ul>



<h2 class="wp-block-heading">Solutions:</h2>



<p>1. Originally, I followed this article to generate my certs, but the cert won&#8217;t get accepted by Chrome even if I&#8217;ve imported it into Trusted Root Certification Authorities store. The certificate generation procedures that worked are:</p>



<pre class="wp-block-code"><code># Generate a Certificate Authority (CA)

openssl genrsa -des3 -out nextcloudCA.key 2048
# A password needs to be created after this command is run.

openssl req -x509 -new -nodes -key nextcloudCA.key -sha256 -days 365 -out nextcloudCA.pem
# A series of information will be asked after this command is run. You can customize your own or just follow whatever is in the &#91;dn] section below.

openssl x509 -outform pem -in nextcloudCA.pem -out nextcloudCA.crt
# Generate a crt file for future import. The pem file can also be used for import.

# Prepare the v3.ext and config files.
# cert.csr.cnf file
&#91;req]
default_bits = 2048
prompt = no
default_md = sha256
distinguished_name = dn

&#91;dn]
C=Replace-with-Your-Info
ST=Replace-with-Your-Info
L=Replace-with-Your-Info
O=Replace-with-Your-Info
OU=Replace-with-Your-Info
emailAddress=Replace-with-Your-Info
CN=Replace-with-Your-Info

# v3.ext file
authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
subjectAltName = @alt_names

&#91;alt_names]
DNS.1 = Replace-with-Your-Info-Or-Delete-Line
DNS.2 = Replace-with-Your-Info-Or-Delete-Line
DNS.3 = Replace-with-Your-Info-Or-Delete-Line
IP.1 = Replace-with-Your-Info-Or-Delete-Line
IP.2 = Replace-with-Your-Info-Or-Delete-Line

# Generate the domain name cert
openssl req -new -sha256 -nodes -out nextcloudDNCert.csr -newkey rsa:2048 -keyout nextcloudDNCert.key -config cert.csr.cnf

openssl x509 -req -in nextcloudDNCert.csr -CA nextcloudCA.crt -CAkey nextcloudCA.key -CAcreateserial -out nextcloudDNCert.crt -days 365 -sha256 -extfile v3.ext</code></pre>



<p>2. Put your cert files (<strong>nextcloudDNCert.crt</strong> and <strong>nextcloudDNCert.key</strong>) in the directories that&#8217;s suitable for your setup, and modify your SSL config file or the nextcloud.conf file to point to the cert files. Sample config files can be downloaded here: <a rel="noreferrer noopener" href="https://github.com/jameswsullivan/blog-file-share/blob/main/sample.nextcloud.conf" target="_blank">sample.nextcloud.conf</a> .</p>



<pre class="wp-block-code"><code># Under /etc/apache2/sites-available, modify nextcloud.conf .

SSLCertificateFile Your-Cert-File-Path
SSLCertificateKeyFile Your-Cert-Key-File-Path</code></pre>



<p>3. Restart Apache service</p>



<pre class="wp-block-code"><code>service apache2 restart</code></pre>



<p>4. Import <strong>nextcloudCA.crt</strong> into your Trusted Root Certification Authorities store, clear your browser&#8217;s cookies, restart the browser and access your Nextcloud server again, this time the HTTPS padlock should be solid grey, no &#8220;Not Secure&#8221; and other errors.</p>



<h2 class="wp-block-heading">Explanation about the certificate errors:</h2>



<p>&#8220;NET::ERR_CERT_AUTHORITY_INVALID&#8221;</p>



<p>This is due to how the certs were generated, when using <a href="https://betterprogramming.pub/how-to-create-trusted-ssl-certificates-for-your-local-development-13fd5aad29c6" data-type="URL" data-id="https://betterprogramming.pub/how-to-create-trusted-ssl-certificates-for-your-local-development-13fd5aad29c6" target="_blank" rel="noreferrer noopener">this method</a> to generate, I always got the error, but after I switched to the method written in step #1 and the certs were properly imported, this error was gone.</p>



<p>&#8220;NET::ERR_CERT_COMMON_NAME_INVALID&#8221;</p>



<p>Assuming you already put in the Common Name (which is your FQDN, e.g. nextcloud.mydomain.com) correctly when generating the certs and it still gave this error, check the <code>alt_names</code> section above, make sure all the DNS.x and IP.x entries cover all your <code>alt_name</code> variants. Once I configured all the stuff under the <code>alt_names</code> section correctly (for me it&#8217;s &#8220;localhost&#8221;, my server&#8217;s IP, and the &#8220;subdomain&#8221; URL I&#8217;m using), the error was gone.</p>



<h2 class="wp-block-heading">Other:</h2>



<ul>
<li>Some mentioned that Chrome versions played a role in accepting self-signed certs. But my issues were resolved without dealing with Chrome versions.</li>



<li>I&#8217;ve seen posts mentioning the <code>chrome://flags/#allow-insecure-localhost</code> flag, but it didn&#8217;t apply to my scenario.</li>



<li>Some articles say that self-signed certs won&#8217;t be deemed secure and valid by browsers/OSs/Chrome, which is not true if the certs are generated and imported correctly.</li>



<li>Security hardening &#8211; forcing HTTPS, Strict-Transport-Security, and URL redirections. See <a href="https://github.com/jameswsullivan/blog-file-share/blob/main/sample.nextcloud.conf" data-type="URL" data-id="https://drive.google.com/file/d/1QQRGrROpZhrnDc-ET8mDUfj2EjtHzAnK/view?usp=sharing" target="_blank" rel="noreferrer noopener">sample.nextcloud.conf</a> and its comments for details.</li>
</ul>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
