<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Hardware &#8211; howdy</title>
	<atom:link href="https://jameswsullivan.github.io/tag/hardware/feed/" rel="self" type="application/rss+xml" />
	<link>https://jameswsullivan.github.io/</link>
	<description></description>
	<lastBuildDate>Sun, 19 Nov 2023 22:05:32 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.2</generator>
	<item>
		<title>Refurbish Mac Mini A1347 (Late 2014 and Mid 2011) &#8211; Part 4</title>
		<link>https://jameswsullivan.github.io/refurbish-mac-mini-a1347-late-2014-and-mid-2011-part-4/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Sun, 19 Nov 2023 18:29:10 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Driver]]></category>
		<category><![CDATA[Electronics]]></category>
		<category><![CDATA[Hardware]]></category>
		<category><![CDATA[Mac Mini]]></category>
		<category><![CDATA[Mac Mini A1347]]></category>
		<category><![CDATA[macOS]]></category>
		<category><![CDATA[Repair]]></category>
		<category><![CDATA[Windows Systems Administration]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2827</guid>

					<description><![CDATA[Refurbish Mac Mini A1347 (Late 2014 and Mid 2011) - Part 4. Restore Mac Mini late-2014 and mid-2011. Install Windows 10 on Mac Mini mid-2011 (macmini5,1).]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading" id="0-background">Background:</h2>



<p>I came across two more cheap Mac Mini A1347 (one is late-2014 the other is a mid-2011) that I can use for my projects. While restoring them, I came across a few things that&#8217;s worth noting.</p>



<h2 class="wp-block-heading">Issues:</h2>



<ol>
<li>The mid-2011 model has great difficulty with drivers (particularly display and sound) with Windows 10/11.</li>



<li>The mid-2011 model gets very hot when just under normal workload.</li>



<li>The late-2014 model automatically turns on after applying power (which is something I want to disable).</li>



<li>Install 16GB RAM and a second hard drive to the mid-2011 model.</li>
</ol>



<h2 class="wp-block-heading" id="1-issues">Solutions:</h2>



<p>1. The mid-2011 model has great difficulty with drivers (particularly display and sound) with Windows 10/11.</p>



<p>The mid-2011 model (<a href="https://support.apple.com/kb/sp632?locale=en_US" target="_blank" rel="noreferrer noopener">the 2.3Ghz variant</a>) has the Intel HD 3000 graphics card and the Cirrus Audio CS4206B sound card, both of which don&#8217;t have official driver support for anything beyond Windows 7. Plus, if Windows is installed using EFI, the screen is going to go black as soon as HD 3000&#8217;s display driver gets applied, and installing the Cirrus Audio driver will not work either. While you can force Windows to use the Basic Display Driver (Microsoft Basic Display Adapter) by uninstalling the display driver using <a href="https://www.wagnardsoft.com/display-driver-uninstaller-DDU-" target="_blank" rel="noreferrer noopener">DDU</a> and blocking the Hardware Ids using Group Policy (will explain in the last section of this post), it&#8217;s not an elegant solution after all and you&#8217;ll still suffer from no audio (from both HDMI and Cirrus Audio).</p>



<blockquote class="wp-block-quote">
<p>According to some research, it seems that there might be a solution by using DSDT modification/override so that the hardware can be properly &#8220;seen&#8221; and handled correctly by the OS under UEFI. But it&#8217;s not worth it for me to go down that rabbit hole to figure it out, so I just opted for Legacy BIOS mode (which also means that Windows 11 is not the best option). </p>
</blockquote>



<p>After installing Windows 10 using Legacy BIOS mode, everything works fine except the Display-Audio via HDMI despite the fact that all drivers have been installed and are showing that they work &#8220;correctly&#8221; in Device Manager. There is nothing indicating errors but HDMI and Thunderbolt ports both output no sound to the TV. But it&#8217;s acceptable in my case to use as a &#8220;media player&#8221; for my treadmill, which accepts a 3.5mm audio input to the treadmill&#8217;s speakers.</p>



<p>Download:</p>



<ul>
<li><a href="https://github.com/jameswsullivan/blog-file-share/blob/main/Macmini5%2C1-Drivers.7z">Windows 10 drivers for Mac Mini mid-2011 (Macmini5,1)</a></li>



<li><a href="https://www.wagnardsoft.com/display-driver-uninstaller-DDU-">DDU (Display Driver Uninstaller)</a> (<a href="https://www.intel.com/content/www/us/en/support/articles/000091878/graphics.html" target="_blank" rel="noreferrer noopener">reference</a>)</li>
</ul>



<p>Additionally, <a href="https://www.intel.com/content/www/us/en/support/articles/000090440/graphics.html" target="_blank" rel="noreferrer noopener">Intel HD 4000&#8217;s driver</a> seems to also work for Intel HD 3000, and its Display Audio driver is a newer version which supports &#8220;Windows 10&#8221;, but I still wasn&#8217;t able to get sound from HDMI/Thunderbolt.</p>



<p>2. The mid-2011 model gets very hot when just under normal workload.</p>



<p>I guess this was somewhat &#8220;by design&#8221; because I&#8217;ve done my due diligence to check, clean, and restore everything I can think of &#8211; heatsink, thermal paste, fan, etc.. It&#8217;s been restored to a condition that&#8217;s almost like new. After some Googling around I think it&#8217;s just how this particular model is, because the aluminum case is designed to act as a &#8220;heatsink&#8221; to dissipate heat, I guess I&#8217;m just used to newer model&#8217;s cooler and quieter designs.</p>



<p>3. The late-2014 model automatically turns on after applying power (which is something I want to disable).</p>



<p>One of the late-2014 models automatically turns on after applying power, and judging from what was originally installed on it, it seems to be used as a display device at a medical facility that runs a 24/7 slideshow. Disabling it was easy:</p>



<p>Get into Recovery Mode by <code>Option/Windows Key + R</code> , and open <strong>Terminal</strong> under <strong>Utilities</strong>, and type the following command:</p>



<pre class="wp-block-code"><code># To disable:
pmset autorestart 0

# If you want to enable "Power On After Power-Loss", set the value to 1 instead.
pmset autorestart 1</code></pre>



<p>4. Install 16GB RAM and a second hard drive to the mid-2011 model.</p>



<p>RAM and a second hard drive are one of the most popular upgrades done on this model, <a href="https://www.ifixit.com/Device/Mac_Mini_Mid_2011" target="_blank" rel="noreferrer noopener">ifixit has very well made instructions</a>.</p>



<div style="height:50px" aria-hidden="true" class="wp-block-spacer"></div>



<h2 class="wp-block-heading">Forcing Windows 11 (in UEFI mode) to use Microsoft Basic Display Adapter without automatically installing drivers.</h2>



<p>Find the &#8220;Hardware Ids&#8221;:</p>



<pre class="wp-block-code"><code>Device Manager -- Display adapters -- Properties -- Details tab -- Select "Hardware Ids" from the Property drop-down -- Copy them to a text file.</code></pre>



<p>Block them using Group Policy:</p>



<pre class="wp-block-code"><code>Open Local Group Policy Editor, go to Computer Configuration -- Administrative Templates -- System -- Device Installation -- Device Installation Restrictions -- "Prevent installation of devices that match any of these device IDs."

Enable it and add the Hardware Ids you found from Device Manager.</code></pre>



<p>Additionally, you can configure the following to stop Windows 11 from automatically updating drivers:</p>



<pre class="wp-block-code"><code>Open Local Group Policy Editor, go to Computer Configuration -- Administrative Templates -- Windows Components -- Windows Update -- Manage Updates offered from Windows Update -- Enable “Do not include drivers with Windows Updates”</code></pre>



<pre class="wp-block-code"><code>Open Settings -- System -- About -- Advanced system settings -- Hardware tab -- Device Installation Settings -- Check "No (your device might not work as expected)"</code></pre>



<p>During the process, if the screen goes black after Windows 11 automatically applies a display driver (Intel HD 3000 in this case), you might need to get into Safe Mode to use <a href="https://www.wagnardsoft.com/display-driver-uninstaller-DDU-" target="_blank" rel="noreferrer noopener">DDU</a> to remove the driver. You can force powering off the machine three times to get into Advanced boot options (Recovery) mode, or you can try the following trick (because the OS is not frozen or dead, it&#8217;s just the screen that&#8217;s gone black, so you can still do things &#8220;blindly&#8221;):</p>



<pre class="wp-block-code"><code>Windows + R (Run) -- type "shutdown /r /o /t /f 0"</code></pre>



<p>Assuming there is nothing else blocking the reboot, it should go to the Advanced boot options menu upon restart.</p>



<p>If you need to install anything while in Safe Mode, enable Windows Installer using the following commands in a command prompt:</p>



<pre class="wp-block-code"><code>REG ADD “HKLM\SYSTEM\CurrentControlSet\Control\SafeBoot\Network\MSIServer” /VE /T REG_SZ /F /D “Service”

net start msiserver</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Refurbish Mac Mini A1347 (Late 2014 ) – Part 3 &#8211; Remove EFI/BIOS Firmware Lock</title>
		<link>https://jameswsullivan.github.io/refurbish-mac-mini-a1347-late-2014-part-3-remove-efi-bios-firmware-lock/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Tue, 03 Oct 2023 18:33:47 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[CH341A]]></category>
		<category><![CDATA[Electronics]]></category>
		<category><![CDATA[Hardware]]></category>
		<category><![CDATA[Mac Mini]]></category>
		<category><![CDATA[Mac Mini A1347]]></category>
		<category><![CDATA[Repair]]></category>
		<category><![CDATA[XGecu T56]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2811</guid>

					<description><![CDATA[Refurbish Mac Mini A1347 (Late 2014 ) – Part 3 - Remove EFI/BIOS Firmware Lock with CH341A Programmer]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading">Background:</h2>



<p>Two of the Mac Minis I bought on eBay were really cheap and had their HDD and accessories removed, everything&#8217;s been in working order (hardware wise) until I found that I was hit with a &#8220;lock&#8221; screen prompting for password and unable to enter Recovery Mode (Command/Windows Key + R).</p>



<figure class="wp-block-image size-large"><img fetchpriority="high" decoding="async" width="1024" height="607" src="https://jameswsullivan.github.io/wp-content/uploads/2023/10/MacMiniEFILock-1024x607.png" alt="" class="wp-image-2812" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/10/MacMiniEFILock-1024x607.png 1024w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/MacMiniEFILock-300x178.png 300w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/MacMiniEFILock-768x455.png 768w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/MacMiniEFILock-700x415.png 700w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/MacMiniEFILock.png 1326w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h2 class="wp-block-heading">Solution:</h2>



<p>The solution is quite straightforward with the right tools:</p>



<ol>
<li>Use a BIOS/Chip programmer to extract firmware data. The BIOS chips on my Mac Minis are: <code>MX25L6406E</code> and <code>N25Q064A</code>. NeoProgrammer was able to detect <code>N25Q064A</code> automatically, but for <code>MX25L6406E</code>, it was only able to detect the series and the specific chip needs to be selected manually.</li>



<li>Open the extracted <code>.bin</code> file with a HEX editor (<a href="https://mh-nexus.de/en/hxd/">HxD</a> was what I used), search for <code>$SVS</code> , fill the section with <code>FF</code> . Save file.</li>



<li>Wipe the BIOS chip, write the modified <code>.bin</code> file back to the chip.</li>



<li>EFI/BIOS Firmware Lock is gone.</li>
</ol>



<p>The steps I omitted were <a href="https://www.ifixit.com/Teardown/Mac+mini+Late+2014+Teardown/30410">how to open Mac Mini and remove the logic board</a>. I assume that if you&#8217;re already doing this level of DIY, this should already be a simple process. I also removed the AirPort module to allow for more space to fit the clip.</p>



<p><strong>Tools needed:</strong></p>



<ul>
<li>CH341A programmer (with the SOP8 SOIC8 clip).</li>



<li>NeoProgrammer V2.2.0.10</li>



<li>HxD HEX Editor</li>



<li>[Optional]: Multimeter with probes thin enough to test the connectivity/continuity between the clip and CH341A.</li>



<li>[Optional]: Microscope. It&#8217;s gonna be really easy to see the chip&#8217;s part number with a microscope.</li>
</ul>



<p>There are a lot of alternatives that you could use to accomplish this task, for me the CH341A was the cheapest and easiest to come by. Here is a list of possible alternatives:</p>



<ul>
<li><strong>Programmer:</strong> <a href="http://www.xgecu.com/en/TL866_main.html">XGecu T48/T56</a> universal programmer. This is probably the best one out there if you want a tool that supports almost any chip available out there. It&#8217;s a little pricey for small jobs like this one, but it&#8217;s on my shopping list.</li>



<li><strong>Software:</strong> AsProgrammer, Colibri (compatible with CH341A); Xgpro (comes with XGecu programmer, not sure if it&#8217;s compatible with CH341A).</li>
</ul>



<p>Colibri doesn&#8217;t seem to support as many chips as AsProgrammer and NeoProgrammer do, but all of them were fairly straightforward to use.</p>



<p><strong>Pro Tips:</strong></p>



<ul>
<li>Datasheet: <a href="https://github.com/jameswsullivan/blog-file-share/blob/main/MX25L6406E-MacronixInternational.pdf">MX25L6406E</a> and <a href="https://github.com/jameswsullivan/blog-file-share/blob/main/N25Q064A-MicronTechnology.pdf">N25Q064A</a> .</li>



<li>The CH341A programmer and the clip should theoretically work with any 24 and 25 series chips.</li>



<li>See the closeup pictures from the gallery below, the purple wire should match PIN #1 on the chip, and when it&#8217;s clipped to CH341A, PIN #1 faces toward the lever, away from the USB port.</li>



<li>Use a multimeter to test the continuity after fitting the clip onto the BIOS chip. It&#8217;s not absolutely necessary but it saved me a lot of time when trying to get a solid connection.</li>
</ul>



<p>A video will be provided at a later time to better illustrate the process.</p>



<figure class="wp-block-gallery has-nested-images columns-2 is-cropped wp-block-gallery-1 is-layout-flex wp-block-gallery-is-layout-flex">
<figure class="wp-block-image size-large"><a href="https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-01-scaled.jpg"><img decoding="async" width="1024" height="576" data-id="2816" src="https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-01-1024x576.jpg" alt="" class="wp-image-2816" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-01-1024x576.jpg 1024w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-01-300x169.jpg 300w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-01-768x432.jpg 768w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-01-1536x864.jpg 1536w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-01-2048x1152.jpg 2048w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-01-700x394.jpg 700w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></figure>



<figure class="wp-block-image size-large"><a href="https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-02-scaled.jpg"><img decoding="async" width="1024" height="576" data-id="2817" src="https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-02-1024x576.jpg" alt="" class="wp-image-2817" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-02-1024x576.jpg 1024w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-02-300x169.jpg 300w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-02-768x432.jpg 768w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-02-1536x864.jpg 1536w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-02-2048x1152.jpg 2048w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-02-700x394.jpg 700w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></figure>



<figure class="wp-block-image size-large"><a href="https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-03-scaled.jpg"><img loading="lazy" decoding="async" width="1024" height="576" data-id="2815" src="https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-03-1024x576.jpg" alt="" class="wp-image-2815" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-03-1024x576.jpg 1024w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-03-300x169.jpg 300w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-03-768x432.jpg 768w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-03-1536x864.jpg 1536w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-03-2048x1152.jpg 2048w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-03-700x394.jpg 700w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></figure>



<figure class="wp-block-image size-large"><a href="https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-04-scaled.jpg"><img loading="lazy" decoding="async" width="1024" height="576" data-id="2814" src="https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-04-1024x576.jpg" alt="" class="wp-image-2814" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-04-1024x576.jpg 1024w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-04-300x169.jpg 300w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-04-768x432.jpg 768w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-04-1536x864.jpg 1536w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-04-2048x1152.jpg 2048w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-04-700x394.jpg 700w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></figure>



<figure class="wp-block-image size-large"><a href="https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-05.jpg"><img loading="lazy" decoding="async" width="1024" height="1024" data-id="2819" src="https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-05-1024x1024.jpg" alt="" class="wp-image-2819" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-05-1024x1024.jpg 1024w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-05-300x300.jpg 300w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-05-150x150.jpg 150w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-05-768x768.jpg 768w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-05-1536x1536.jpg 1536w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-05-2048x2048.jpg 2048w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-05-140x140.jpg 140w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-05-380x380.jpg 380w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-05-600x600.jpg 600w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></figure>



<figure class="wp-block-image size-large"><a href="https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-06-scaled.jpg"><img loading="lazy" decoding="async" width="1024" height="1024" data-id="2818" src="https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-06-1024x1024.jpg" alt="" class="wp-image-2818" srcset="https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-06-1024x1024.jpg 1024w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-06-300x300.jpg 300w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-06-150x150.jpg 150w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-06-768x768.jpg 768w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-06-1536x1536.jpg 1536w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-06-2048x2048.jpg 2048w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-06-140x140.jpg 140w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-06-380x380.jpg 380w, https://jameswsullivan.github.io/wp-content/uploads/2023/10/CH341A-MACMINI-06-600x600.jpg 600w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></figure>
</figure>



<p></p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Migrate Windows 10 from SATA to USB</title>
		<link>https://jameswsullivan.github.io/migrate-windows-10-from-sata-to-usb/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Wed, 16 Aug 2023 03:46:27 +0000</pubDate>
				<category><![CDATA[blog]]></category>
		<category><![CDATA[Hardware]]></category>
		<category><![CDATA[System Administration]]></category>
		<category><![CDATA[Windows Customization]]></category>
		<category><![CDATA[Windows Systems Administration]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2766</guid>

					<description><![CDATA[Use Hasleo WinToUSB to migrate Windows 10 from a SATA installation onto a USB connected drive.]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading">Background:</h2>



<p>I have an older Lenovo M93p Tiny computer that I use for some file sharing work, it&#8217;s been running fine until I recently noticed some degradation of file transfer speed between this machine and my file server. It turned out that the PoE switch was the main culprit, probably due to exhausted RAM/buffer or high CPU usage, and a reboot resolved the network performance issue. However, the file transfer speed was still not ideal &#8211; under perfect condition, file transfer between two computers should hover around 100 &#8211; 113 MB/s, but I was only getting around 40 MB/s max.</p>



<p>For better illustration, here are how the two drives are connected:</p>



<ul>
<li>a 120GB SSD is directly installed inside the unit, connected via the SATA (SATA 2, 3.0Gb/s) port. </li>



<li>a 1TB old Apple HDD connected using the <a href="https://www.google.com/search?sca_esv=557322196&amp;rlz=1C1GCEA_enUS1010US1010&amp;q=12.7mm+DVD-ROM+Hard+Drive+Caddy&amp;tbm=shop&amp;source=lnms&amp;sa=X&amp;ved=2ahUKEwiAibG6mOCAAxVFlGoFHZUkDpcQ0pQJegQICxAB&amp;biw=1285&amp;bih=648&amp;dpr=1.88" data-type="link" data-id="https://www.google.com/search?sca_esv=557322196&amp;rlz=1C1GCEA_enUS1010US1010&amp;q=12.7mm+DVD-ROM+Hard+Drive+Caddy&amp;tbm=shop&amp;source=lnms&amp;sa=X&amp;ved=2ahUKEwiAibG6mOCAAxVFlGoFHZUkDpcQ0pQJegQICxAB&amp;biw=1285&amp;bih=648&amp;dpr=1.88" target="_blank" rel="noreferrer noopener">12.7mm DVD-ROM Hard Drive Caddy</a>, and connected to the computer via USB (with Lenovo&#8217;s optical drive VESA expansion bracket).</li>
</ul>



<p>After some experimentation, it appears that the drive caddy might be the bottleneck, so I decided to switch the two drives.</p>



<p>However, since the OS was initially installed onto the SATA drive, switching to USB will cause boot issues and also due to driver mismatch, a simple BCD rebuild won&#8217;t work. But I managed to make it work with <a href="https://www.easyuefi.com/" target="_blank" rel="noreferrer noopener">Hasleo WinToUSB</a>, <strong>here are the steps</strong>:</p>



<ol>
<li>Clone the 120GB drive to another temporary drive, install (use the SATA port) and boot into Windows using the temporary drive (rebuild BCD if needed).</li>



<li>Connect the 120GB drive to the optical drive caddy (USB).</li>



<li>Use Hasleo WinToUSB&#8217;s <code>Windows To Go USB</code> function to clone your <code>Current Windows OS</code> to the 120GB drive that&#8217;s connected via USB.</li>



<li>Remove the temporary drive, connect the 1TB HDD via SATA, boot into BIOS and change boot device to the USB device accordingly (mine shows as USB FDD).</li>
</ol>



<p>A second reboot might be needed for the machine to pickup the USB bootable device.</p>



<h2 class="wp-block-heading">How to rebuild BCD (Windows 10 UEFI):</h2>



<ul>
<li>Use a WinPE or Windows installation USB to boot into a command prompt (or if you are able to enter command prompt using F8 or Advanced Boot Options).</li>



<li>Use diskpart to assign a letter to the EFI partition:</li>
</ul>



<pre class="wp-block-code"><code>diskpart
list disk
sel disk X

# X is your disk number

list vol

# find the volume that's FAT32 (the EFI partition).

sel vol X
assign letter=Z

exit</code></pre>



<ul>
<li>Now switch to the Z drive, and run the following commands:</li>
</ul>



<pre class="wp-block-code"><code>cd EFI\Microsoft\Boot
del BCD
# or: ren BCD BCD.bk if you want to be safe.

bootrec /rebuildbcd

# if bootrec doesn't work, try
bcdboot X:\windows /s Z: /f UEFI
# where X is your windows installation's location.</code></pre>



<h2 class="wp-block-heading">Afterthought:</h2>



<p>There might be a way to inject/change the correct drivers (from SATA to USB) so that Windows can boot correctly, but I wasn&#8217;t successful with it.</p>



<p>The reason a Windows To Go clone was needed is that after switching the drive directly from SATA to USB and try to boot, the drive would still be recognized as a SATA drive in BIOS, and attempting a normal boot (with or without BCD rebuild) would result in a blue screen with INACCESSIBLE_BOOT_DEVICE error. However, Windows was able to boot into Safe Mode, which indicates the driver mismatch being the culprit.</p>



<p>Using Hasleo WinToUSB was a quicker solution, I might decided to experiment with the driver sometime in the future with a spare machine.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Dell N-Series 激活SLIC2.0/模拟BIOS激活系统会烧毁主板么？</title>
		<link>https://jameswsullivan.github.io/dell-n-series-laptop-slic20-bios/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Thu, 25 Feb 2010 16:16:00 +0000</pubDate>
				<category><![CDATA[archive]]></category>
		<category><![CDATA[Dell]]></category>
		<category><![CDATA[Hardware]]></category>
		<category><![CDATA[System Administration]]></category>
		<category><![CDATA[Windows Systems Administration]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2219</guid>

					<description><![CDATA[实测Dell N-Series用SLIC2.0/模拟BIOS激活系统是否会烧毁主板]]></description>
										<content:encoded><![CDATA[
<blockquote class="wp-block-quote">
<p>此文系早年博客的备份，仅用于参考学习。<br>This article is an archival copy of my early years&#8217; blog posts.</p>
</blockquote>



<p><a href="http://bbs.pcbeta.com/">论坛</a>里对于Dell N-Series系列笔记本如何激活SLIC2.0的解答已经很明确了，所以在这个问题上本文仅做一个简记，第二个问题才是本文的重点。</p>



<p>前几天偶然看到一篇有关“使用loader（即模拟BIOS）的方式激活Vista/Win7有烧毁主板的可能”的文章，读过之后我着实被吓了一跳，赶紧Google了一下相关知识并对自己身边的几台机器进行温度检测（我已用loader给自己和朋友装了若干台机器，一旦埋下隐患后果不堪设想 -_-!!! ），在此顺便将检测结果和我的一些思考写下来，供他人和自己日后作为参考。</p>



<div style="height:50px" aria-hidden="true" class="wp-block-spacer"></div>



<h2 class="wp-block-heading">1. Dell N-Series 系列激活SLIC2.0的方法（实践机器为Dell Latitude D830）</h2>



<p>Dell N-Series由于在出厂时没有预装系统，所以它把SLIC2.0给隐藏了。这对于Vista之前的系统是没有影响的，但是为了完美使用Vista，我们需要借助dell的一个小工具将其显示出来。</p>



<p><s>点击下载：DellServiceTag</s></p>



<p>具体操作方法很简单，任意一种方式进入纯DOS，运行其中的svctag.exe，然后根据屏幕提示操作即可。有人说需要上网找同型号机器的ServiceTag以便更改时使用，但其实只要执行两次更改，第一次将自己的ServiceTag记住，提述输入新的Tag时留空直接回车，然后运行第二次的时候再将自己的Tag填回去即可。</p>



<p>更具体的操作方法参见远景的帖子：<s>http://bbs.pcbeta.com/viewthread.php?tid=607414</s></p>



<p><s>SLIC查看器：SLIC_ToolKit_V3.2</s></p>



<p><strong>一点小补充：</strong>经我本人测试，D830使用网上达人修改的BIOS升级程序升级至SLIC2.1是安全的，我升级后使用至今没有出现任何不良反应，只要在BIOS升级的过程中不出断电之类的问题应该就没有问题。（D830 N-Series 我并未尝试，我的机器是T7300配置、预装XP的版本）</p>



<p><strong>注意：</strong>博主不对升级BIOS有可能产生的不良后果负责，我只在我的机器上测试成功，若你的机器与我的有不同，请Google后再实践！</p>



<div style="height:50px" aria-hidden="true" class="wp-block-spacer"></div>



<h2 class="wp-block-heading">2. “用loader能烧毁主板”的问题</h2>



<p>首先，我要陈述下述事实：</p>



<p>1). 我在网上并没有搜到任何一个确因使用loader而使得主板烧毁或者元件高温脱焊的实例；</p>



<p>2). 综论坛、各种“知道”所述，所谓“用loader能烧毁主板”的说法，其核心就是在讨论两个问题：</p>



<p>(1). 模拟BIOS使得系统与真实BIOS之间的通信不能正常进行，进而BIOS温控程序无法根据硬件温度调节风扇转速，最终导致过热而烧毁硬件;（此为我以及大多数网友所担心的问题）</p>



<p>(2). 由于模拟BIOS与真实BIOS之间的差异，使得系统在对真实BIOS进行读写时写入了错误值（主要为电压）而导致硬件烧毁；（说实话这个问题我不是很明白，也无法去验证）</p>



<p>其实(1)还是比较容易去检验的，最简单的方法就是用EVEREST一类的软件对一台机器使用/未使用模拟BIOS的状态进行一段时间的温度和风扇转速监测，并且在两次监测过程中使电脑的运转负荷尽量相同。我在修改一台Dell D830 N-Series机器的SLIC前后对它进行了检测，结果如下：</p>



<p>1). 用SLIC ToolKit查看模拟的SLIC版本是DELLM07_V2.0，修改后真实的SLIC是DELLM08_V2.0；</p>



<p>2). EVEREST监测过程中均是先开机闲置大约20分钟，再打一会儿G-Force，其间频繁查看EVEREST的温度检测，结果是用/未用模拟BIOS的元件温度前者与后者大致相同，上下2-3℃的误差也在传感器和软件的误差范围内；风扇转速显示倒是有些区别，前者比后者数值上要少5-600RPM，但在玩游戏过程中由于显卡和CPU温度的升高，风扇都提高了大约相同比例的转速，所以基本上从我当前的这台机器判断，模拟BIOS并未对机器的温度检测与控制系统产生什么影响。</p>



<p>但是，我这种检测有很大的局限性：</p>



<p>1. 我的机器本身就是Dell的，模拟的BIOS也用的是Dell的，同时模拟BIOS与真实BIOS版本差别不大，所以二者在温控方面可能本来就没有多大差异。而对于使用A品牌的电脑却用B品牌的模拟BIOS的情况，我没去进行检测，因为手头实在没有可以随意折腾的电脑，也没有那么长的空闲时间来做多个测试。</p>



<p>2. 我没有对兼容机进行测试。兼容机的BIOS与笔记本和品牌机还是有很大不同的，而且不同品牌的主板、新品与旧品主板的BIOS都可能存在差异，使用模拟BIOS会不会对它有影响我就无法一一测试了。</p>



<p>不过单就使用效果来看，毕竟loader已经被中国人用的很广泛了，每个经常承接“装系统”任务的人周围肯定都有几台机器是用loader激活的，也没听说有人真的因此而损坏了硬件。所以我在此下一个并无坚实理论依据的结论：<strong>用loader基本上是安全的</strong>。</p>



<p>一篇我认为讲解的比较透彻的参考文章：<s>http://www.metsky.com/archives/133.html</s></p>



<p>关键字：dell n-series 机器激活slic2.0，模拟bios会不会烧毁主板，用loader激活oem系统会不会烧毁主板，模拟bios激活系统烧毁主板</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>显卡积尘导致机器无限重启</title>
		<link>https://jameswsullivan.github.io/graphics-card-dust-accumulation-causes-reboot-loop/</link>
		
		<dc:creator><![CDATA[James]]></dc:creator>
		<pubDate>Thu, 30 Jul 2009 14:34:00 +0000</pubDate>
				<category><![CDATA[archive]]></category>
		<category><![CDATA[Graphics Card]]></category>
		<category><![CDATA[Hardware]]></category>
		<category><![CDATA[System Administration]]></category>
		<category><![CDATA[Windows Systems Administration]]></category>
		<guid isPermaLink="false">https://jameswsullivan.github.io/?p=2423</guid>

					<description><![CDATA[显卡积尘导致机器无限重启]]></description>
										<content:encoded><![CDATA[
<blockquote class="wp-block-quote">
<p>此文系早年博客的备份，仅用于参考学习。<br>This article is an archival copy of my early years&#8217; blog posts.</p>
</blockquote>



<p>由于寒假过后很长时间没有再回家，新配的台式机也就闲置了几个月。可是在我再次回家开机时却发现了一个问题：机器会经常性的在未出现自检画面前无限重启，有时循环若干次之后能进入系统但无画面，而进入系统之后只要不再次重启，则可以一直稳定运行。</p>



<p>起初我并没有马上意识到是显卡的问题，因为在几次关机断电后再重启就可以进入系统了，还有两次是我重新插拔了SATA接口后也正常进入系统（因为其中一个SATA有时会松动）。可是在过了两个星期左右之后，无限重启的现象频繁出现，以至于有时根本无法使用。</p>



<p>随后我便打开机箱，将光驱硬盘等外部设备全都拆掉再试验，发现无法启动；再将内存换一个接口，依旧无法启动，再说如果是内存的问题，机器应该有报警声。最后机器里唯一没动过的即是那硕大的蓝宝HD4850显卡，再考虑到偶尔能进入系统但是无画面显示的情况，我断定问题一定出在它身上。</p>



<p>将显卡取下后，从外面 根本看不出有任何问题，金手指也未氧化，除了显卡电路板的正反面都积了一点灰尘之外别无它物。可是我万万没想到，恰恰是这点灰尘导致了这个奇怪的现象。在我将显卡正反面的灰尘用软毛刷清除掉（散热器和风扇周围的灰尘最好将散热片取下后清理），又用橡皮清洁了一下金手指之后，将其插回，问题得到解决，稳定使用至今再没有出现过频繁重启的现象。</p>



<p>这里补充一下，在上网查询这个现象的过程中，看到有人抨击技嘉的EP43-DS3主板，说是因为该主板的兼容性不好而导致的无限重启的问题，但却又总也找不到解决方法。而根据我的经验，技嘉的这款板子兼容性良好，这台机器入手半年多，除了这次问题之外再没遇到任何有关硬件的问题。整机配置如下：</p>



<ul>
<li>CPU: Intel Core 2 Duo E8200</li>



<li>MotherBoard: Gigabyte EP43-DS3</li>



<li>RAM: Kingston 2G DDRII 800</li>



<li>Primary storage: WD 320G</li>



<li>Graphics: 蓝宝石 ATI Radeon HD 4850 512MB</li>



<li>LCD: AOC 2217V</li>



<li>DVD Drive: Pioneer DVD-128P</li>
</ul>



<p>关键字：机器无限重启，无限重启无法进入系统，进入系统无画面，EP43-DS3无限重启</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
